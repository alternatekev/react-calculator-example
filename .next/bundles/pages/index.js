
          window.__NEXT_REGISTER_PAGE('/', function() {
            var comp = module.exports =
webpackJsonp([5],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (true) {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyFunction = __webpack_require__(23);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (true) {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var core = __webpack_require__(2);
var ctx = __webpack_require__(12);
var hide = __webpack_require__(13);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(51)('wks');
var uid = __webpack_require__(38);
var Symbol = __webpack_require__(5).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var IE8_DOM_DEFINE = __webpack_require__(75);
var toPrimitive = __webpack_require__(48);
var dP = Object.defineProperty;

exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(14)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 10 */,
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(35);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(6);
var createDesc = __webpack_require__(26);
module.exports = __webpack_require__(8) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 15 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(7);

var ReactCurrentOwner = __webpack_require__(21);

var warning = __webpack_require__(1);
var canDefineProperty = __webpack_require__(41);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(88);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (true) {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (true) {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
       true ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
       true ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (true) {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (true) {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (true) {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(20);

var ReactCurrentOwner = __webpack_require__(21);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
   true ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ?  true ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ?  true ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ?  true ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ?  true ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ?  true ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;

/***/ }),
/* 18 */,
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(49);
var defined = __webpack_require__(46);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(46);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(118)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(47)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(64);


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(6).f;
var has = __webpack_require__(15);
var TAG = __webpack_require__(4)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(110);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(12);
var call = __webpack_require__(79);
var isArrayIter = __webpack_require__(80);
var anObject = __webpack_require__(11);
var toLength = __webpack_require__(37);
var getIterFn = __webpack_require__(62);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(77);
var enumBugKeys = __webpack_require__(52);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 34 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(11);
var dPs = __webpack_require__(120);
var enumBugKeys = __webpack_require__(52);
var IE_PROTO = __webpack_require__(50)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(61)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(97).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(45);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(125);
var global = __webpack_require__(5);
var hide = __webpack_require__(13);
var Iterators = __webpack_require__(22);
var TO_STRING_TAG = __webpack_require__(4)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 40 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var canDefineProperty = false;
if (true) {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(34);
var TAG = __webpack_require__(4)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 44 */,
/* 45 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(42);
var $export = __webpack_require__(3);
var redefine = __webpack_require__(76);
var hide = __webpack_require__(13);
var has = __webpack_require__(15);
var Iterators = __webpack_require__(22);
var $iterCreate = __webpack_require__(119);
var setToStringTag = __webpack_require__(29);
var getPrototypeOf = __webpack_require__(78);
var ITERATOR = __webpack_require__(4)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(9);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(34);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(51)('keys');
var uid = __webpack_require__(38);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};


/***/ }),
/* 52 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 53 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(138), __esModule: true };

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(70);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(4);


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(38)('meta');
var isObject = __webpack_require__(9);
var has = __webpack_require__(15);
var setDesc = __webpack_require__(6).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(14)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var core = __webpack_require__(2);
var LIBRARY = __webpack_require__(42);
var wksExt = __webpack_require__(56);
var defineProperty = __webpack_require__(6).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(149);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(153);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(70);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (true) {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
var document = __webpack_require__(5).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(43);
var ITERATOR = __webpack_require__(4)('iterator');
var Iterators = __webpack_require__(22);
module.exports = __webpack_require__(2).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 63 */
/***/ (function(module, exports) {



/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(7);

var ReactBaseClasses = __webpack_require__(86);
var ReactChildren = __webpack_require__(156);
var ReactDOMFactories = __webpack_require__(160);
var ReactElement = __webpack_require__(16);
var ReactPropTypes = __webpack_require__(164);
var ReactVersion = __webpack_require__(166);

var createReactClass = __webpack_require__(167);
var onlyChild = __webpack_require__(169);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (true) {
  var lowPriorityWarning = __webpack_require__(60);
  var canDefineProperty = __webpack_require__(41);
  var ReactElementValidator = __webpack_require__(90);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (true) {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (true) {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var emptyObject = {};

if (true) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

/***/ }),
/* 66 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 67 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(13);
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),
/* 69 */,
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(140);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(142);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

if (true) {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(91)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}


/***/ }),
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(14)(function () {
  return Object.defineProperty(__webpack_require__(61)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(13);


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(15);
var toIObject = __webpack_require__(19);
var arrayIndexOf = __webpack_require__(121)(false);
var IE_PROTO = __webpack_require__(50)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(15);
var toObject = __webpack_require__(24);
var IE_PROTO = __webpack_require__(50)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(11);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(22);
var ITERATOR = __webpack_require__(4)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 81 */,
/* 82 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(34);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(77);
var hiddenKeys = __webpack_require__(52).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(40);
var createDesc = __webpack_require__(26);
var toIObject = __webpack_require__(19);
var toPrimitive = __webpack_require__(48);
var has = __webpack_require__(15);
var IE8_DOM_DEFINE = __webpack_require__(75);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(20),
    _assign = __webpack_require__(7);

var ReactNoopUpdateQueue = __webpack_require__(87);

var canDefineProperty = __webpack_require__(41);
var emptyObject = __webpack_require__(65);
var invariant = __webpack_require__(0);
var lowPriorityWarning = __webpack_require__(60);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ?  true ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (true) {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var warning = __webpack_require__(1);

function warnNoop(publicInstance, callerName) {
  if (true) {
    var constructor = publicInstance.constructor;
     true ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(21);
var ReactComponentTreeHook = __webpack_require__(17);
var ReactElement = __webpack_require__(16);

var checkReactTypeSpec = __webpack_require__(161);

var canDefineProperty = __webpack_require__(41);
var getIteratorFn = __webpack_require__(89);
var warning = __webpack_require__(1);
var lowPriorityWarning = __webpack_require__(60);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

   true ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
     true ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
         true ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (true) {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(23);
var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var ReactPropTypesSecret = __webpack_require__(92);
var checkPropTypes = __webpack_require__(165);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
       true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 93 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(212), __esModule: true };

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 96 */,
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(5).document;
module.exports = document && document.documentElement;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(4)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(135), __esModule: true };

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGetInitialProps = undefined;

var _regenerator = __webpack_require__(112);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(113);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = __webpack_require__(99);

var _assign2 = _interopRequireDefault(_assign);

var loadGetInitialProps = exports.loadGetInitialProps = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(Component, ctx) {
    var props, compName, message;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (Component.getInitialProps) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return', {});

          case 2:
            _context.next = 4;
            return Component.getInitialProps(ctx);

          case 4:
            props = _context.sent;

            if (!(!props && (!ctx.res || !ctx.res.finished))) {
              _context.next = 9;
              break;
            }

            compName = getDisplayName(Component);
            message = '"' + compName + '.getInitialProps()" should resolve to an object. But found "' + props + '" instead.';
            throw new Error(message);

          case 9:
            return _context.abrupt('return', props);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function loadGetInitialProps(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.warn = warn;
exports.execOnce = execOnce;
exports.deprecated = deprecated;
exports.printAndExit = printAndExit;
exports.getDisplayName = getDisplayName;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function warn(message) {
  if (true) {
    console.error(message);
  }
}

function execOnce(fn) {
  var _this = this;

  var used = false;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (!used) {
      used = true;
      fn.apply(_this, args);
    }
  };
}

function deprecated(fn, message) {
  if (false) return fn;

  var warned = false;
  var newFn = function newFn() {
    if (!warned) {
      warned = true;
      console.error(message);
    }

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return fn.apply(this, args);
  };

  // copy all properties
  (0, _assign2.default)(newFn, fn);

  return newFn;
}

function printAndExit(message) {
  var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (code === 0) {
    console.log(message);
  } else {
    console.error(message);
  }

  process.exit(code);
}

function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Unknown';
}

function getLocationOrigin() {
  var _window$location = window.location,
      protocol = _window$location.protocol,
      hostname = _window$location.hostname,
      port = _window$location.port;

  return protocol + '//' + hostname + (port ? ':' + port : '');
}

function getURL() {
  var href = window.location.href;

  var origin = getLocationOrigin();
  return href.substring(origin.length);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(66)))

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(35);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(5);
var core = __webpack_require__(2);
var dP = __webpack_require__(6);
var DESCRIPTORS = __webpack_require__(8);
var SPECIES = __webpack_require__(4)('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(218), __esModule: true };

/***/ }),
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__(116);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(3);
var core = __webpack_require__(2);
var fails = __webpack_require__(14);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(128);
exports.encode = exports.stringify = __webpack_require__(129);


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(132), __esModule: true };

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = __webpack_require__(91);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(210);


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(94);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 114 */,
/* 115 */,
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(117), __esModule: true };

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25);
__webpack_require__(123);
module.exports = __webpack_require__(2).Array.from;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(45);
var defined = __webpack_require__(46);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(36);
var descriptor = __webpack_require__(26);
var setToStringTag = __webpack_require__(29);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(13)(IteratorPrototype, __webpack_require__(4)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(6);
var anObject = __webpack_require__(11);
var getKeys = __webpack_require__(33);

module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(19);
var toLength = __webpack_require__(37);
var toAbsoluteIndex = __webpack_require__(122);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(45);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(12);
var $export = __webpack_require__(3);
var toObject = __webpack_require__(24);
var call = __webpack_require__(79);
var isArrayIter = __webpack_require__(80);
var toLength = __webpack_require__(37);
var createProperty = __webpack_require__(124);
var getIterFn = __webpack_require__(62);

$export($export.S + $export.F * !__webpack_require__(98)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(6);
var createDesc = __webpack_require__(26);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(126);
var step = __webpack_require__(82);
var Iterators = __webpack_require__(22);
var toIObject = __webpack_require__(19);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(47)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 127 */,
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 130 */,
/* 131 */,
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(133);
var $Object = __webpack_require__(2).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(3);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperty: __webpack_require__(6).f });


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(99);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(136);
module.exports = __webpack_require__(2).Object.assign;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(3);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(137) });


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(33);
var gOPS = __webpack_require__(53);
var pIE = __webpack_require__(40);
var toObject = __webpack_require__(24);
var IObject = __webpack_require__(49);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(14)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(139);
module.exports = __webpack_require__(2).Object.getPrototypeOf;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(24);
var $getPrototypeOf = __webpack_require__(78);

__webpack_require__(108)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(141), __esModule: true };

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25);
__webpack_require__(39);
module.exports = __webpack_require__(56).f('iterator');


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(143), __esModule: true };

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(144);
__webpack_require__(63);
__webpack_require__(147);
__webpack_require__(148);
module.exports = __webpack_require__(2).Symbol;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(5);
var has = __webpack_require__(15);
var DESCRIPTORS = __webpack_require__(8);
var $export = __webpack_require__(3);
var redefine = __webpack_require__(76);
var META = __webpack_require__(57).KEY;
var $fails = __webpack_require__(14);
var shared = __webpack_require__(51);
var setToStringTag = __webpack_require__(29);
var uid = __webpack_require__(38);
var wks = __webpack_require__(4);
var wksExt = __webpack_require__(56);
var wksDefine = __webpack_require__(58);
var enumKeys = __webpack_require__(145);
var isArray = __webpack_require__(83);
var anObject = __webpack_require__(11);
var toIObject = __webpack_require__(19);
var toPrimitive = __webpack_require__(48);
var createDesc = __webpack_require__(26);
var _create = __webpack_require__(36);
var gOPNExt = __webpack_require__(146);
var $GOPD = __webpack_require__(85);
var $DP = __webpack_require__(6);
var $keys = __webpack_require__(33);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(84).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(40).f = $propertyIsEnumerable;
  __webpack_require__(53).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(42)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    replacer = args[1];
    if (typeof replacer == 'function') $replacer = replacer;
    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
      if ($replacer) value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(13)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(33);
var gOPS = __webpack_require__(53);
var pIE = __webpack_require__(40);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(19);
var gOPN = __webpack_require__(84).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(58)('asyncIterator');


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(58)('observable');


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(150), __esModule: true };

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(151);
module.exports = __webpack_require__(2).Object.setPrototypeOf;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(3);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(152).set });


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(9);
var anObject = __webpack_require__(11);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(12)(Function.call, __webpack_require__(85).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(154), __esModule: true };

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(155);
var $Object = __webpack_require__(2).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(3);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(36) });


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var PooledClass = __webpack_require__(157);
var ReactElement = __webpack_require__(16);

var emptyFunction = __webpack_require__(23);
var traverseAllChildren = __webpack_require__(158);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var _prodInvariant = __webpack_require__(20);

var invariant = __webpack_require__(0);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ?  true ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(20);

var ReactCurrentOwner = __webpack_require__(21);
var REACT_ELEMENT_TYPE = __webpack_require__(88);

var getIteratorFn = __webpack_require__(89);
var invariant = __webpack_require__(0);
var KeyEscapeUtils = __webpack_require__(159);
var warning = __webpack_require__(1);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (true) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
           true ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (true) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ?  true ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var ReactElement = __webpack_require__(16);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (true) {
  var ReactElementValidator = __webpack_require__(90);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _prodInvariant = __webpack_require__(20);

var ReactPropTypeLocationNames = __webpack_require__(162);
var ReactPropTypesSecret = __webpack_require__(163);

var invariant = __webpack_require__(0);
var warning = __webpack_require__(1);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(17);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ?  true ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
       true ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (true) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(17);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

         true ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(66)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _require = __webpack_require__(16),
    isValidElement = _require.isValidElement;

var factory = __webpack_require__(111);

module.exports = factory(isValidElement);

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



if (true) {
  var invariant = __webpack_require__(0);
  var warning = __webpack_require__(1);
  var ReactPropTypesSecret = __webpack_require__(92);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



module.exports = '15.6.2';

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _require = __webpack_require__(86),
    Component = _require.Component;

var _require2 = __webpack_require__(16),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = __webpack_require__(87);
var factory = __webpack_require__(168);

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



var _assign = __webpack_require__(7);

var emptyObject = __webpack_require__(65);
var _invariant = __webpack_require__(0);

if (true) {
  var warning = __webpack_require__(1);
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (true) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (true) {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (true) {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (true) {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (true) {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (true) {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (true) {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (true) {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (true) {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (true) {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (true) {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (true) {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (true) {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (true) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (true) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (true) {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var _prodInvariant = __webpack_require__(20);

var ReactElement = __webpack_require__(16);

var invariant = __webpack_require__(0);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ?  true ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(11);
var aFunction = __webpack_require__(35);
var SPECIES = __webpack_require__(4)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(12);
var invoke = __webpack_require__(214);
var html = __webpack_require__(97);
var cel = __webpack_require__(61);
var global = __webpack_require__(5);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(34)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(11);
var isObject = __webpack_require__(9);
var newPromiseCapability = __webpack_require__(101);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(6).f;
var create = __webpack_require__(36);
var redefineAll = __webpack_require__(68);
var ctx = __webpack_require__(12);
var anInstance = __webpack_require__(67);
var forOf = __webpack_require__(32);
var $iterDefine = __webpack_require__(47);
var step = __webpack_require__(82);
var setSpecies = __webpack_require__(102);
var DESCRIPTORS = __webpack_require__(8);
var fastKey = __webpack_require__(57).fastKey;
var validate = __webpack_require__(95);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(5);
var $export = __webpack_require__(3);
var meta = __webpack_require__(57);
var fails = __webpack_require__(14);
var hide = __webpack_require__(13);
var redefineAll = __webpack_require__(68);
var forOf = __webpack_require__(32);
var anInstance = __webpack_require__(67);
var isObject = __webpack_require__(9);
var setToStringTag = __webpack_require__(29);
var dP = __webpack_require__(6).f;
var each = __webpack_require__(176)(0);
var DESCRIPTORS = __webpack_require__(8);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(12);
var IObject = __webpack_require__(49);
var toObject = __webpack_require__(24);
var toLength = __webpack_require__(37);
var asc = __webpack_require__(177);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(178);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(9);
var isArray = __webpack_require__(83);
var SPECIES = __webpack_require__(4)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(43);
var from = __webpack_require__(180);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(32);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(3);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(3);
var aFunction = __webpack_require__(35);
var ctx = __webpack_require__(12);
var forOf = __webpack_require__(32);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g =
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this;

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(211);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(93)))

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(93)))

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(63);
__webpack_require__(25);
__webpack_require__(39);
__webpack_require__(213);
__webpack_require__(216);
__webpack_require__(217);
module.exports = __webpack_require__(2).Promise;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(42);
var global = __webpack_require__(5);
var ctx = __webpack_require__(12);
var classof = __webpack_require__(43);
var $export = __webpack_require__(3);
var isObject = __webpack_require__(9);
var aFunction = __webpack_require__(35);
var anInstance = __webpack_require__(67);
var forOf = __webpack_require__(32);
var speciesConstructor = __webpack_require__(170);
var task = __webpack_require__(171).set;
var microtask = __webpack_require__(215)();
var newPromiseCapabilityModule = __webpack_require__(101);
var perform = __webpack_require__(172);
var promiseResolve = __webpack_require__(173);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(4)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value);
            if (domain) domain.exit();
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  if (promise._h == 1) return false;
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;
  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) return false;
  } return true;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(68)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(29)($Promise, PROMISE);
__webpack_require__(102)(PROMISE);
Wrapper = __webpack_require__(2)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(98)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 214 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var macrotask = __webpack_require__(171).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(34)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if (Observer) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    var promise = Promise.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(3);
var core = __webpack_require__(2);
var global = __webpack_require__(5);
var speciesConstructor = __webpack_require__(170);
var promiseResolve = __webpack_require__(173);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(3);
var newPromiseCapability = __webpack_require__(101);
var perform = __webpack_require__(172);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(63);
__webpack_require__(25);
__webpack_require__(39);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
module.exports = __webpack_require__(2).Set;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(174);
var validate = __webpack_require__(95);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(175)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(3);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(179)('Set') });


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(181)('Set');


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(182)('Set');


/***/ }),
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(103);

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = __webpack_require__(107);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

exports.defaultHead = defaultHead;

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(71);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _sideEffect = __webpack_require__(248);

var _sideEffect2 = _interopRequireDefault(_sideEffect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Head = function (_React$Component) {
  (0, _inherits3.default)(Head, _React$Component);

  function Head() {
    (0, _classCallCheck3.default)(this, Head);
    return (0, _possibleConstructorReturn3.default)(this, (Head.__proto__ || (0, _getPrototypeOf2.default)(Head)).apply(this, arguments));
  }

  (0, _createClass3.default)(Head, [{
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return Head;
}(_react2.default.Component);

Head.contextTypes = {
  headManager: _propTypes2.default.object
};
function defaultHead() {
  return [_react2.default.createElement('meta', { charSet: 'utf-8', className: 'next-head' })];
}

function reduceComponents(components) {
  var _components$map$map$r;

  return (_components$map$map$r = components.map(function (c) {
    return c.props.children;
  }).map(function (children) {
    return _react2.default.Children.toArray(children);
  }).reduce(function (a, b) {
    return a.concat(b);
  }, []).reverse()).concat.apply(_components$map$map$r, (0, _toConsumableArray3.default)(defaultHead())).filter(function (c) {
    return !!c;
  }).filter(unique()).reverse().map(function (c) {
    var className = (c.className ? c.className + ' ' : '') + 'next-head';
    return _react2.default.cloneElement(c, { className: className });
  });
}

function mapOnServer(head) {
  return head;
}

function onStateChange(head) {
  if (this.context && this.context.headManager) {
    this.context.headManager.updateHead(head);
  }
}

var METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp', 'property'];

// returns a function for filtering head child elements
// which shouldn't be duplicated, like <title/>.

function unique() {
  var tags = new _set2.default();
  var metaTypes = new _set2.default();
  var metaCategories = {};

  return function (h) {
    switch (h.type) {
      case 'title':
      case 'base':
        if (tags.has(h.type)) return false;
        tags.add(h.type);
        break;
      case 'meta':
        for (var i = 0, len = METATYPES.length; i < len; i++) {
          var metatype = METATYPES[i];
          if (!h.props.hasOwnProperty(metatype)) continue;

          if (metatype === 'charSet') {
            if (metaTypes.has(metatype)) return false;
            metaTypes.add(metatype);
          } else {
            var category = h.props[metatype];
            var categories = metaCategories[metatype] || new _set2.default();
            if (categories.has(category)) return false;
            categories.add(category);
            metaCategories[metatype] = categories;
          }
        }
        break;
    }
    return true;
  };
}

exports.default = (0, _sideEffect2.default)(reduceComponents, onStateChange, mapOnServer)(Head);

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = __webpack_require__(107);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _set = __webpack_require__(103);

var _set2 = _interopRequireDefault(_set);

exports.default = withSideEffect;

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(100);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function withSideEffect(reduceComponentsToState, handleStateChangeOnClient, mapStateOnServer) {
  if (typeof reduceComponentsToState !== 'function') {
    throw new Error('Expected reduceComponentsToState to be a function.');
  }

  if (typeof handleStateChangeOnClient !== 'function') {
    throw new Error('Expected handleStateChangeOnClient to be a function.');
  }

  if (typeof mapStateOnServer !== 'undefined' && typeof mapStateOnServer !== 'function') {
    throw new Error('Expected mapStateOnServer to either be undefined or a function.');
  }

  return function wrap(WrappedComponent) {
    if (typeof WrappedComponent !== 'function') {
      throw new Error('Expected WrappedComponent to be a React component.');
    }

    var mountedInstances = new _set2.default();
    var state = void 0;

    function emitChange(component) {
      state = reduceComponentsToState([].concat((0, _toConsumableArray3.default)(mountedInstances)));

      if (SideEffect.canUseDOM) {
        handleStateChangeOnClient.call(component, state);
      } else if (mapStateOnServer) {
        state = mapStateOnServer(state);
      }
    }

    var SideEffect = function (_Component) {
      (0, _inherits3.default)(SideEffect, _Component);

      function SideEffect() {
        (0, _classCallCheck3.default)(this, SideEffect);
        return (0, _possibleConstructorReturn3.default)(this, (SideEffect.__proto__ || (0, _getPrototypeOf2.default)(SideEffect)).apply(this, arguments));
      }

      (0, _createClass3.default)(SideEffect, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          mountedInstances.add(this);
          emitChange(this);
        }
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
          emitChange(this);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          mountedInstances.delete(this);
          emitChange(this);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            WrappedComponent,
            null,
            this.props.children
          );
        }
      }], [{
        key: 'peek',
        value: function peek() {
          return state;
        }

        // Expose canUseDOM so tests can monkeypatch it

        // Try to use displayName of wrapped component

      }, {
        key: 'rewind',
        value: function rewind() {
          if (SideEffect.canUseDOM) {
            throw new Error('You may only call rewind() on the server. Call peek() to read the current state.');
          }

          var recordedState = state;
          state = undefined;
          mountedInstances.clear();
          return recordedState;
        }
      }]);
      return SideEffect;
    }(_react.Component);

    SideEffect.displayName = 'SideEffect(' + (0, _utils.getDisplayName)(WrappedComponent) + ')';
    SideEffect.contextTypes = WrappedComponent.contextTypes;
    SideEffect.canUseDOM = typeof window !== 'undefined';


    return SideEffect;
  };
}

/***/ }),
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(443);


/***/ }),
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(23);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (true) {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;

/***/ }),
/* 301 */,
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;

/***/ }),
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var performance = __webpack_require__(441);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(28);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(28);

var createArrayFromMixed = __webpack_require__(457);
var getMarkupWrap = __webpack_require__(458);
var invariant = __webpack_require__(0);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ?  true ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ?  true ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var invariant = __webpack_require__(0);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ?  true ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ?  true ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ?  true ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ?  true ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(28);

var invariant = __webpack_require__(0);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ?  true ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;

/***/ }),
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var camelize = __webpack_require__(464);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 465 */,
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(467);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = __webpack_require__(497);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = __webpack_require__(498);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */
/***/ (function(module, exports) {

module.exports = {
  "aspect_ratio": {
    "height": "0",
    "position": "relative"
  },
  "aspect_ratio__16x9": {
    "padding-bottom": "56.25%"
  },
  "aspect_ratio__9x16": {
    "padding-bottom": "177.77%"
  },
  "aspect_ratio__4x3": {
    "padding-bottom": "75%"
  },
  "aspect_ratio__3x4": {
    "padding-bottom": "133.33%"
  },
  "aspect_ratio__6x4": {
    "padding-bottom": "66.6%"
  },
  "aspect_ratio__4x6": {
    "padding-bottom": "150%"
  },
  "aspect_ratio__8x5": {
    "padding-bottom": "62.5%"
  },
  "aspect_ratio__5x8": {
    "padding-bottom": "160%"
  },
  "aspect_ratio__7x5": {
    "padding-bottom": "71.42%"
  },
  "aspect_ratio__5x7": {
    "padding-bottom": "140%"
  },
  "aspect_ratio__1x1": {
    "padding-bottom": "100%"
  },
  "aspect_ratio__object": {
    "position": "absolute",
    "top": "0",
    "right": "0",
    "bottom": "0",
    "left": "0",
    "width": "100%",
    "height": "100%",
    "z-index": "100"
  },
  "bg_center": {
    "background-repeat": "no-repeat",
    "background-position": "center center"
  },
  "bg_top": {
    "background-repeat": "no-repeat",
    "background-position": "top center"
  },
  "bg_right": {
    "background-repeat": "no-repeat",
    "background-position": "center right"
  },
  "bg_bottom": {
    "background-repeat": "no-repeat",
    "background-position": "bottom center"
  },
  "bg_left": {
    "background-repeat": "no-repeat",
    "background-position": "center left"
  },
  "cover": {
    "background-size": "cover"
  },
  "contain": {
    "background-size": "contain"
  },
  "b__black": {
    "border-color": "var(--black)"
  },
  "b__near_black": {
    "border-color": "var(--near-black)"
  },
  "b__dark_gray": {
    "border-color": "var(--dark-gray)"
  },
  "b__mid_gray": {
    "border-color": "var(--mid-gray)"
  },
  "b__gray": {
    "border-color": "var(--gray)"
  },
  "b__silver": {
    "border-color": "var(--silver)"
  },
  "b__light_silver": {
    "border-color": "var(--light-silver)"
  },
  "b__light_gray": {
    "border-color": "var(--light-gray)"
  },
  "b__near_white": {
    "border-color": "var(--near-white)"
  },
  "b__white": {
    "border-color": "var(--white)"
  },
  "b__white_90": {
    "border-color": "var(--white-90)"
  },
  "b__white_80": {
    "border-color": "var(--white-80)"
  },
  "b__white_70": {
    "border-color": "var(--white-70)"
  },
  "b__white_60": {
    "border-color": "var(--white-60)"
  },
  "b__white_50": {
    "border-color": "var(--white-50)"
  },
  "b__white_40": {
    "border-color": "var(--white-40)"
  },
  "b__white_30": {
    "border-color": "var(--white-30)"
  },
  "b__white_20": {
    "border-color": "var(--white-20)"
  },
  "b__white_10": {
    "border-color": "var(--white-10)"
  },
  "b__white_05": {
    "border-color": "var(--white-05)"
  },
  "b__white_025": {
    "border-color": "var(--white-025)"
  },
  "b__white_0125": {
    "border-color": "var(--white-0125)"
  },
  "b__black_90": {
    "border-color": "var(--black-90)"
  },
  "b__black_80": {
    "border-color": "var(--black-80)"
  },
  "b__black_70": {
    "border-color": "var(--black-70)"
  },
  "b__black_60": {
    "border-color": "var(--black-60)"
  },
  "b__black_50": {
    "border-color": "var(--black-50)"
  },
  "b__black_40": {
    "border-color": "var(--black-40)"
  },
  "b__black_30": {
    "border-color": "var(--black-30)"
  },
  "b__black_20": {
    "border-color": "var(--black-20)"
  },
  "b__black_10": {
    "border-color": "var(--black-10)"
  },
  "b__black_05": {
    "border-color": "var(--black-05)"
  },
  "b__black_025": {
    "border-color": "var(--black-025)"
  },
  "b__black_0125": {
    "border-color": "var(--black-0125)"
  },
  "b__dark_red": {
    "border-color": "var(--dark-red)"
  },
  "b__red": {
    "border-color": "var(--red)"
  },
  "b__light_red": {
    "border-color": "var(--light-red)"
  },
  "b__orange": {
    "border-color": "var(--orange)"
  },
  "b__gold": {
    "border-color": "var(--gold)"
  },
  "b__yellow": {
    "border-color": "var(--yellow)"
  },
  "b__light_yellow": {
    "border-color": "var(--light-yellow)"
  },
  "b__purple": {
    "border-color": "var(--purple)"
  },
  "b__light_purple": {
    "border-color": "var(--light-purple)"
  },
  "b__dark_pink": {
    "border-color": "var(--dark-pink)"
  },
  "b__hot_pink": {
    "border-color": "var(--hot-pink)"
  },
  "b__pink": {
    "border-color": "var(--pink)"
  },
  "b__light_pink": {
    "border-color": "var(--light-pink)"
  },
  "b__dark_green": {
    "border-color": "var(--dark-green)"
  },
  "b__green": {
    "border-color": "var(--green)"
  },
  "b__light_green": {
    "border-color": "var(--light-green)"
  },
  "b__navy": {
    "border-color": "var(--navy)"
  },
  "b__dark_blue": {
    "border-color": "var(--dark-blue)"
  },
  "b__blue": {
    "border-color": "var(--blue)"
  },
  "b__light_blue": {
    "border-color": "var(--light-blue)"
  },
  "b__lightest_blue": {
    "border-color": "var(--lightest-blue)"
  },
  "b__washed_blue": {
    "border-color": "var(--washed-blue)"
  },
  "b__washed_green": {
    "border-color": "var(--washed-green)"
  },
  "b__washed_yellow": {
    "border-color": "var(--washed-yellow)"
  },
  "b__washed_red": {
    "border-color": "var(--washed-red)"
  },
  "b__transparent": {
    "border-color": "var(--transparent)"
  },
  "br0": {
    "border-radius": "0"
  },
  "br1": {
    "border-radius": ".125rem"
  },
  "br2": {
    "border-radius": ".25rem"
  },
  "br3": {
    "border-radius": ".5rem"
  },
  "br4": {
    "border-radius": "1rem"
  },
  "br_100": {
    "border-radius": "100%"
  },
  "br_pill": {
    "border-radius": "9999px"
  },
  "br__bottom": {
    "border-top-left-radius": "0",
    "border-top-right-radius": "0"
  },
  "br__top": {
    "border-bottom-left-radius": "0",
    "border-bottom-right-radius": "0"
  },
  "br__right": {
    "border-top-left-radius": "0",
    "border-bottom-left-radius": "0"
  },
  "br__left": {
    "border-top-right-radius": "0",
    "border-bottom-right-radius": "0"
  },
  "b__dotted": {
    "border-style": "dotted"
  },
  "b__dashed": {
    "border-style": "dashed"
  },
  "b__solid": {
    "border-style": "solid"
  },
  "b__none": {
    "border-style": "none"
  },
  "bw0": {
    "border-width": "0"
  },
  "bw1": {
    "border-width": ".125rem"
  },
  "bw2": {
    "border-width": ".25rem"
  },
  "bw3": {
    "border-width": ".5rem"
  },
  "bw4": {
    "border-width": "1rem"
  },
  "bw5": {
    "border-width": "2rem"
  },
  "bt_0": {
    "border-top-width": "0"
  },
  "br_0": {
    "border-right-width": "0"
  },
  "bb_0": {
    "border-bottom-width": "0"
  },
  "bl_0": {
    "border-left-width": "0"
  },
  "ba": {
    "border-style": "solid",
    "border-width": "1px"
  },
  "bt": {
    "border-top-style": "solid",
    "border-top-width": "1px"
  },
  "br": {
    "border-right-style": "solid",
    "border-right-width": "1px"
  },
  "bb": {
    "border-bottom-style": "solid",
    "border-bottom-width": "1px"
  },
  "bl": {
    "border-left-style": "solid",
    "border-left-width": "1px"
  },
  "bn": {
    "border-style": "none",
    "border-width": "0"
  },
  "shadow_1": {
    "box-shadow": "0px 0px 4px 2px rgba( 0, 0, 0, 0.2 )"
  },
  "shadow_2": {
    "box-shadow": "0px 0px 8px 2px rgba( 0, 0, 0, 0.2 )"
  },
  "shadow_3": {
    "box-shadow": "2px 2px 4px 2px rgba( 0, 0, 0, 0.2 )"
  },
  "shadow_4": {
    "box-shadow": "2px 2px 8px 0px rgba( 0, 0, 0, 0.2 )"
  },
  "shadow_5": {
    "box-shadow": "4px 4px 8px 0px rgba( 0, 0, 0, 0.2 )"
  },
  "html": {
    "box-sizing": "border-box"
  },
  "body": {
    "box-sizing": "border-box"
  },
  "div": {
    "box-sizing": "border-box"
  },
  "article": {
    "box-sizing": "border-box"
  },
  "section": {
    "box-sizing": "border-box"
  },
  "main": {
    "box-sizing": "border-box"
  },
  "footer": {
    "box-sizing": "border-box"
  },
  "header": {
    "box-sizing": "border-box"
  },
  "form": {
    "box-sizing": "border-box"
  },
  "fieldset": {
    "box-sizing": "border-box"
  },
  "legend": {
    "box-sizing": "border-box"
  },
  "pre": {
    "box-sizing": "border-box",
    "white-space": "pre"
  },
  "code": {
    "box-sizing": "border-box",
    "font-family": "Consolas,\n               monaco,\n               monospace"
  },
  "p": {
    "box-sizing": "border-box"
  },
  "a": {
    "box-sizing": "border-box"
  },
  "h1": {
    "box-sizing": "border-box",
    "height": "1rem"
  },
  "h2": {
    "box-sizing": "border-box",
    "height": "2rem"
  },
  "h3": {
    "box-sizing": "border-box",
    "height": "4rem"
  },
  "h4": {
    "box-sizing": "border-box",
    "height": "8rem"
  },
  "h5": {
    "box-sizing": "border-box",
    "height": "16rem"
  },
  "h6": {
    "box-sizing": "border-box"
  },
  "ul": {
    "box-sizing": "border-box"
  },
  "ol": {
    "box-sizing": "border-box"
  },
  "li": {
    "box-sizing": "border-box"
  },
  "dl": {
    "box-sizing": "border-box"
  },
  "dt": {
    "box-sizing": "border-box",
    "display": "table"
  },
  "dd": {
    "box-sizing": "border-box"
  },
  "textarea": {
    "box-sizing": "border-box"
  },
  "input_type__email": {
    "box-sizing": "border-box"
  },
  "input_type__number": {
    "box-sizing": "border-box"
  },
  "input_type__password": {
    "box-sizing": "border-box"
  },
  "input_type__tel": {
    "box-sizing": "border-box"
  },
  "input_type__text": {
    "box-sizing": "border-box"
  },
  "input_type__url": {
    "box-sizing": "border-box"
  },
  "border_box": {
    "box-sizing": "border-box"
  },
  "cf_before": {
    "content": "\" \"",
    "display": "table"
  },
  "cf_after": {
    "clear": "both"
  },
  "cf": {
    "*zoom": "1"
  },
  "cl": {
    "clear": "left"
  },
  "cr": {
    "clear": "right"
  },
  "cb": {
    "clear": "both"
  },
  "cn": {
    "clear": "none"
  },
  "top_0": {
    "top": "0"
  },
  "right_0": {
    "right": "0"
  },
  "bottom_0": {
    "bottom": "0"
  },
  "left_0": {
    "left": "0"
  },
  "top_1": {
    "top": "1rem"
  },
  "right_1": {
    "right": "1rem"
  },
  "bottom_1": {
    "bottom": "1rem"
  },
  "left_1": {
    "left": "1rem"
  },
  "top_2": {
    "top": "2rem"
  },
  "right_2": {
    "right": "2rem"
  },
  "bottom_2": {
    "bottom": "2rem"
  },
  "left_2": {
    "left": "2rem"
  },
  "top__1": {
    "top": "-1rem"
  },
  "right__1": {
    "right": "-1rem"
  },
  "bottom__1": {
    "bottom": "-1rem"
  },
  "left__1": {
    "left": "-1rem"
  },
  "top__2": {
    "top": "-2rem"
  },
  "right__2": {
    "right": "-2rem"
  },
  "bottom__2": {
    "bottom": "-2rem"
  },
  "left__2": {
    "left": "-2rem"
  },
  "absolute__fill": {
    "top": "0",
    "right": "0",
    "bottom": "0",
    "left": "0"
  },
  "dn": {
    "display": "none"
  },
  "di": {
    "display": "inline"
  },
  "db": {
    "display": "block"
  },
  "dib": {
    "display": "inline-block"
  },
  "dit": {
    "display": "inline-table"
  },
  "dtc": {
    "display": "table-cell"
  },
  "dt_row": {
    "display": "table-row"
  },
  "dt_row_group": {
    "display": "table-row-group"
  },
  "dt_column": {
    "display": "table-column"
  },
  "dt_column_group": {
    "display": "table-column-group"
  },
  "dt__fixed": {
    "table-layout": "fixed",
    "width": "100%"
  },
  "flex": {
    "display": "flex"
  },
  "inline_flex": {
    "display": "inline-flex"
  },
  "flex_auto": {
    "flex": "1 1 auto",
    "min-width": "0",
    "min-height": "0"
  },
  "flex_none": {
    "flex": "none"
  },
  "flex_column": {
    "flex-direction": "column"
  },
  "flex_row": {
    "flex-direction": "row"
  },
  "flex_wrap": {
    "flex-wrap": "wrap"
  },
  "items_start": {
    "align-items": "flex-start"
  },
  "items_end": {
    "align-items": "flex-end"
  },
  "items_center": {
    "align-items": "center"
  },
  "items_baseline": {
    "align-items": "baseline"
  },
  "items_stretch": {
    "align-items": "stretch"
  },
  "self_start": {
    "align-self": "flex-start"
  },
  "self_end": {
    "align-self": "flex-end"
  },
  "self_center": {
    "align-self": "center"
  },
  "self_baseline": {
    "align-self": "baseline"
  },
  "self_stretch": {
    "align-self": "stretch"
  },
  "justify_start": {
    "justify-content": "flex-start"
  },
  "justify_end": {
    "justify-content": "flex-end"
  },
  "justify_center": {
    "justify-content": "center"
  },
  "justify_between": {
    "justify-content": "space-between"
  },
  "justify_around": {
    "justify-content": "space-around"
  },
  "content_start": {
    "align-content": "flex-start"
  },
  "content_end": {
    "align-content": "flex-end"
  },
  "content_center": {
    "align-content": "center"
  },
  "content_between": {
    "align-content": "space-between"
  },
  "content_around": {
    "align-content": "space-around"
  },
  "content_stretch": {
    "align-content": "stretch"
  },
  "order_0": {
    "order": "0"
  },
  "order_1": {
    "order": "1"
  },
  "order_2": {
    "order": "2"
  },
  "order_3": {
    "order": "3"
  },
  "order_4": {
    "order": "4"
  },
  "order_5": {
    "order": "5"
  },
  "order_6": {
    "order": "6"
  },
  "order_7": {
    "order": "7"
  },
  "order_8": {
    "order": "8"
  },
  "order_last": {
    "order": "99999"
  },
  "fl": {
    "float": "left",
    "_display": "inline"
  },
  "fr": {
    "float": "right",
    "_display": "inline"
  },
  "fn": {
    "float": "none"
  },
  "sans_serif": {
    "font-family": "-apple-system, BlinkMacSystemFont,\n               'avenir next', avenir,\n               helvetica, 'helvetica neue',\n               ubuntu,\n               roboto, noto,\n               'segoe ui', arial,\n               sans-serif"
  },
  "serif": {
    "font-family": "georgia,\n               times,\n               serif"
  },
  "system_sans_serif": {
    "font-family": "sans-serif"
  },
  "system_serif": {
    "font-family": "serif"
  },
  "courier": {
    "font-family": "'Courier Next',\n               courier,\n               monospace"
  },
  "helvetica": {
    "font-family": "'helvetica neue', helvetica,\n               sans-serif"
  },
  "avenir": {
    "font-family": "'avenir next', avenir,\n               sans-serif"
  },
  "athelas": {
    "font-family": "athelas,\n               georgia,\n               serif"
  },
  "georgia": {
    "font-family": "georgia,\n               serif"
  },
  "times": {
    "font-family": "times,\n               serif"
  },
  "bodoni": {
    "font-family": "\"Bodoni MT\",\n                serif"
  },
  "calisto": {
    "font-family": "\"Calisto MT\",\n                serif"
  },
  "garamond": {
    "font-family": "garamond,\n               serif"
  },
  "baskerville": {
    "font-family": "baskerville,\n               serif"
  },
  "i": {
    "font-style": "italic"
  },
  "fs_normal": {
    "font-style": "normal"
  },
  "normal": {
    "font-weight": "normal"
  },
  "b": {
    "font-weight": "bold"
  },
  "fw1": {
    "font-weight": "100"
  },
  "fw2": {
    "font-weight": "200"
  },
  "fw3": {
    "font-weight": "300"
  },
  "fw4": {
    "font-weight": "400"
  },
  "fw5": {
    "font-weight": "500"
  },
  "fw6": {
    "font-weight": "600"
  },
  "fw7": {
    "font-weight": "700"
  },
  "fw8": {
    "font-weight": "800"
  },
  "fw9": {
    "font-weight": "900"
  },
  "input_reset": {
    "-webkit-appearance": "none",
    "-moz-appearance": "none"
  },
  "button_reset___moz_focus_inner": {
    "border": "0",
    "padding": "0"
  },
  "input_reset___moz_focus_inner": {
    "border": "0",
    "padding": "0"
  },
  "h_25": {
    "height": "25%"
  },
  "h_50": {
    "height": "50%"
  },
  "h_75": {
    "height": "75%"
  },
  "h_100": {
    "height": "100%"
  },
  "min_h_100": {
    "min-height": "100%"
  },
  "vh_25": {
    "height": "25vh"
  },
  "vh_50": {
    "height": "50vh"
  },
  "vh_75": {
    "height": "75vh"
  },
  "vh_100": {
    "height": "100vh"
  },
  "min_vh_100": {
    "min-height": "100vh"
  },
  "h_auto": {
    "height": "auto"
  },
  "h_inherit": {
    "height": "inherit"
  },
  "dim": {
    "opacity": "1",
    "transition": "opacity .15s ease-in"
  },
  "dim_focus": {
    "opacity": ".5",
    "transition": "opacity .15s ease-in"
  },
  "dim_active": {
    "opacity": ".8",
    "transition": "opacity .15s ease-out"
  },
  "hide_child__child": {
    "opacity": "0",
    "transition": "opacity .15s ease-in"
  },
  "hide_child_hover__child": {
    "opacity": "1",
    "transition": "opacity .15s ease-in"
  },
  "hide_child_focus__child": {
    "opacity": "1",
    "transition": "opacity .15s ease-in"
  },
  "hide_child_active__child": {
    "opacity": "1",
    "transition": "opacity .15s ease-in"
  },
  "underline_hover_focus": {
    "text-decoration": "underline"
  },
  "grow": {
    "-moz-osx-font-smoothing": "grayscale",
    "backface-visibility": "hidden",
    "transform": "translateZ(0)",
    "transition": "transform 0.25s ease-out"
  },
  "grow_focus": {
    "transform": "scale(1.05)"
  },
  "grow_active": {
    "transform": "scale(.90)"
  },
  "grow_large": {
    "-moz-osx-font-smoothing": "grayscale",
    "backface-visibility": "hidden",
    "transform": "translateZ(0)",
    "transition": "transform .25s ease-in-out"
  },
  "grow_large_focus": {
    "transform": "scale(1.2)"
  },
  "grow_large_active": {
    "transform": "scale(.95)"
  },
  "shadow_hover__after": {
    "box-shadow": "0px 0px 8px 2px rgba( 0, 0, 0, .2 )",
    "opacity": "0",
    "transition": "opacity .25s ease-in-out"
  },
  "shadow_hover_hover__after": {
    "opacity": "1"
  },
  "shadow_hover_focus__after": {
    "opacity": "1"
  },
  "bg_animate": {
    "transition": "background-color .15s ease-in-out"
  },
  "bg_animate_focus": {
    "transition": "background-color .15s ease-in-out"
  },
  "img": {
    "max-width": "100%"
  },
  "tracked": {
    "letter-spacing": ".1em"
  },
  "tracked_tight": {
    "letter-spacing": "-.05em"
  },
  "tracked_mega": {
    "letter-spacing": ".25em"
  },
  "lh_solid": {
    "line-height": "1"
  },
  "lh_title": {
    "line-height": "1.25"
  },
  "lh_copy": {
    "line-height": "1.5"
  },
  "link": {
    "text-decoration": "none",
    "transition": "color .15s ease-in"
  },
  "link_link": {
    "transition": "color .15s ease-in"
  },
  "link_visited": {
    "transition": "color .15s ease-in"
  },
  "link_active": {
    "transition": "color .15s ease-in"
  },
  "link_focus": {
    "transition": "color .15s ease-in"
  },
  "list": {
    "list-style-type": "none"
  },
  "mw_100": {
    "max-width": "100%"
  },
  "mw1": {
    "max-width": "1rem"
  },
  "mw2": {
    "max-width": "2rem"
  },
  "mw3": {
    "max-width": "4rem"
  },
  "mw4": {
    "max-width": "8rem"
  },
  "mw5": {
    "max-width": "16rem"
  },
  "mw6": {
    "max-width": "32rem"
  },
  "mw7": {
    "max-width": "48rem"
  },
  "mw8": {
    "max-width": "64rem"
  },
  "mw9": {
    "max-width": "96rem"
  },
  "mw_none": {
    "max-width": "none"
  },
  "o_100": {
    "opacity": "1"
  },
  "o_90": {
    "opacity": ".9"
  },
  "o_80": {
    "opacity": ".8"
  },
  "o_70": {
    "opacity": ".7"
  },
  "o_60": {
    "opacity": ".6"
  },
  "o_50": {
    "opacity": ".5"
  },
  "o_40": {
    "opacity": ".4"
  },
  "o_30": {
    "opacity": ".3"
  },
  "o_20": {
    "opacity": ".2"
  },
  "o_10": {
    "opacity": ".1"
  },
  "o_05": {
    "opacity": ".05"
  },
  "o_025": {
    "opacity": ".025"
  },
  "o_0": {
    "opacity": "0"
  },
  "outline": {
    "outline": "1px solid"
  },
  "outline_transparent": {
    "outline": "1px solid transparent"
  },
  "outline_0": {
    "outline": "0"
  },
  "overflow_visible": {
    "overflow": "visible"
  },
  "overflow_hidden": {
    "overflow": "hidden"
  },
  "overflow_scroll": {
    "overflow": "scroll"
  },
  "overflow_auto": {
    "overflow": "auto"
  },
  "overflow_x_visible": {
    "overflow-x": "visible"
  },
  "overflow_x_hidden": {
    "overflow-x": "hidden"
  },
  "overflow_x_scroll": {
    "overflow-x": "scroll"
  },
  "overflow_x_auto": {
    "overflow-x": "auto"
  },
  "overflow_y_visible": {
    "overflow-y": "visible"
  },
  "overflow_y_hidden": {
    "overflow-y": "hidden"
  },
  "overflow_y_scroll": {
    "overflow-y": "scroll"
  },
  "overflow_y_auto": {
    "overflow-y": "auto"
  },
  "static": {
    "position": "static"
  },
  "relative": {
    "position": "relative"
  },
  "absolute": {
    "position": "absolute"
  },
  "fixed": {
    "position": "fixed"
  },
  "rotate_45": {
    "transform": "rotate(45deg)"
  },
  "rotate_90": {
    "transform": "rotate(90deg)"
  },
  "rotate_135": {
    "transform": "rotate(135deg)"
  },
  "rotate_180": {
    "transform": "rotate(180deg)"
  },
  "rotate_225": {
    "transform": "rotate(225deg)"
  },
  "rotate_270": {
    "transform": "rotate(270deg)"
  },
  "rotate_315": {
    "transform": "rotate(315deg)"
  },
  "black_90": {
    "color": "var(--black-90)"
  },
  "black_80": {
    "color": "var(--black-80)"
  },
  "black_70": {
    "color": "var(--black-70)"
  },
  "black_60": {
    "color": "var(--black-60)"
  },
  "black_50": {
    "color": "var(--black-50)"
  },
  "black_40": {
    "color": "var(--black-40)"
  },
  "black_30": {
    "color": "var(--black-30)"
  },
  "black_20": {
    "color": "var(--black-20)"
  },
  "black_10": {
    "color": "var(--black-10)"
  },
  "black_05": {
    "color": "var(--black-05)"
  },
  "white_90": {
    "color": "var(--white-90)"
  },
  "white_80": {
    "color": "var(--white-80)"
  },
  "white_70": {
    "color": "var(--white-70)"
  },
  "white_60": {
    "color": "var(--white-60)"
  },
  "white_50": {
    "color": "var(--white-50)"
  },
  "white_40": {
    "color": "var(--white-40)"
  },
  "white_30": {
    "color": "var(--white-30)"
  },
  "white_20": {
    "color": "var(--white-20)"
  },
  "white_10": {
    "color": "var(--white-10)"
  },
  "black": {
    "color": "var(--black)"
  },
  "near_black": {
    "color": "var(--near-black)"
  },
  "dark_gray": {
    "color": "var(--dark-gray)"
  },
  "mid_gray": {
    "color": "var(--mid-gray)"
  },
  "gray": {
    "color": "var(--gray)"
  },
  "silver": {
    "color": "var(--silver)"
  },
  "light_silver": {
    "color": "var(--light-silver)"
  },
  "moon_gray": {
    "color": "var(--moon-gray)"
  },
  "light_gray": {
    "color": "var(--light-gray)"
  },
  "near_white": {
    "color": "var(--near-white)"
  },
  "white": {
    "color": "var(--white)"
  },
  "dark_red": {
    "color": "var(--dark-red)"
  },
  "red": {
    "color": "var(--red)"
  },
  "light_red": {
    "color": "var(--light-red)"
  },
  "orange": {
    "color": "var(--orange)"
  },
  "gold": {
    "color": "var(--gold)"
  },
  "yellow": {
    "color": "var(--yellow)"
  },
  "light_yellow": {
    "color": "var(--light-yellow)"
  },
  "purple": {
    "color": "var(--purple)"
  },
  "light_purple": {
    "color": "var(--light-purple)"
  },
  "dark_pink": {
    "color": "var(--dark-pink)"
  },
  "hot_pink": {
    "color": "var(--hot-pink)"
  },
  "pink": {
    "color": "var(--pink)"
  },
  "light_pink": {
    "color": "var(--light-pink)"
  },
  "dark_green": {
    "color": "var(--dark-green)"
  },
  "green": {
    "color": "var(--green)"
  },
  "light_green": {
    "color": "var(--light-green)"
  },
  "navy": {
    "color": "var(--navy)"
  },
  "dark_blue": {
    "color": "var(--dark-blue)"
  },
  "blue": {
    "color": "var(--blue)"
  },
  "light_blue": {
    "color": "var(--light-blue)"
  },
  "lightest_blue": {
    "color": "var(--lightest-blue)"
  },
  "washed_blue": {
    "color": "var(--washed-blue)"
  },
  "washed_green": {
    "color": "var(--washed-green)"
  },
  "washed_yellow": {
    "color": "var(--washed-yellow)"
  },
  "washed_red": {
    "color": "var(--washed-red)"
  },
  "bg_black_90": {
    "background-color": "var(--black-90)"
  },
  "bg_black_80": {
    "background-color": "var(--black-80)"
  },
  "bg_black_70": {
    "background-color": "var(--black-70)"
  },
  "bg_black_60": {
    "background-color": "var(--black-60)"
  },
  "bg_black_50": {
    "background-color": "var(--black-50)"
  },
  "bg_black_40": {
    "background-color": "var(--black-40)"
  },
  "bg_black_30": {
    "background-color": "var(--black-30)"
  },
  "bg_black_20": {
    "background-color": "var(--black-20)"
  },
  "bg_black_10": {
    "background-color": "var(--black-10)"
  },
  "bg_black_05": {
    "background-color": "var(--black-05)"
  },
  "bg_white_90": {
    "background-color": "var(--white-90)"
  },
  "bg_white_80": {
    "background-color": "var(--white-80)"
  },
  "bg_white_70": {
    "background-color": "var(--white-70)"
  },
  "bg_white_60": {
    "background-color": "var(--white-60)"
  },
  "bg_white_50": {
    "background-color": "var(--white-50)"
  },
  "bg_white_40": {
    "background-color": "var(--white-40)"
  },
  "bg_white_30": {
    "background-color": "var(--white-30)"
  },
  "bg_white_20": {
    "background-color": "var(--white-20)"
  },
  "bg_white_10": {
    "background-color": "var(--white-10)"
  },
  "bg_black": {
    "background-color": "var(--black)"
  },
  "bg_near_black": {
    "background-color": "var(--near-black)"
  },
  "bg_dark_gray": {
    "background-color": "var(--dark-gray)"
  },
  "bg_mid_gray": {
    "background-color": "var(--mid-gray)"
  },
  "bg_gray": {
    "background-color": "var(--gray)"
  },
  "bg_silver": {
    "background-color": "var(--silver)"
  },
  "bg_light_silver": {
    "background-color": "var(--light-silver)"
  },
  "bg_moon_gray": {
    "background-color": "var(--moon-gray)"
  },
  "bg_light_gray": {
    "background-color": "var(--light-gray)"
  },
  "bg_near_white": {
    "background-color": "var(--near-white)"
  },
  "bg_white": {
    "background-color": "var(--white)"
  },
  "bg_transparent": {
    "background-color": "var(--transparent)"
  },
  "bg_dark_red": {
    "background-color": "var(--dark-red)"
  },
  "bg_red": {
    "background-color": "var(--red)"
  },
  "bg_light_red": {
    "background-color": "var(--light-red)"
  },
  "bg_orange": {
    "background-color": "var(--orange)"
  },
  "bg_gold": {
    "background-color": "var(--gold)"
  },
  "bg_yellow": {
    "background-color": "var(--yellow)"
  },
  "bg_light_yellow": {
    "background-color": "var(--light-yellow)"
  },
  "bg_purple": {
    "background-color": "var(--purple)"
  },
  "bg_light_purple": {
    "background-color": "var(--light-purple)"
  },
  "bg_dark_pink": {
    "background-color": "var(--dark-pink)"
  },
  "bg_hot_pink": {
    "background-color": "var(--hot-pink)"
  },
  "bg_pink": {
    "background-color": "var(--pink)"
  },
  "bg_light_pink": {
    "background-color": "var(--light-pink)"
  },
  "bg_dark_green": {
    "background-color": "var(--dark-green)"
  },
  "bg_green": {
    "background-color": "var(--green)"
  },
  "bg_light_green": {
    "background-color": "var(--light-green)"
  },
  "bg_navy": {
    "background-color": "var(--navy)"
  },
  "bg_dark_blue": {
    "background-color": "var(--dark-blue)"
  },
  "bg_blue": {
    "background-color": "var(--blue)"
  },
  "bg_light_blue": {
    "background-color": "var(--light-blue)"
  },
  "bg_lightest_blue": {
    "background-color": "var(--lightest-blue)"
  },
  "bg_washed_blue": {
    "background-color": "var(--washed-blue)"
  },
  "bg_washed_green": {
    "background-color": "var(--washed-green)"
  },
  "bg_washed_yellow": {
    "background-color": "var(--washed-yellow)"
  },
  "bg_washed_red": {
    "background-color": "var(--washed-red)"
  },
  "hover_black_focus": {
    "color": "var(--black)"
  },
  "hover_near_black_focus": {
    "color": "var(--near-black)"
  },
  "hover_dark_gray_focus": {
    "color": "var(--dark-gray)"
  },
  "hover_mid_gray_focus": {
    "color": "var(--mid-gray)"
  },
  "hover_gray_focus": {
    "color": "var(--gray)"
  },
  "hover_silver_focus": {
    "color": "var(--silver)"
  },
  "hover_light_silver_focus": {
    "color": "var(--light-silver)"
  },
  "hover_moon_gray_focus": {
    "color": "var(--moon-gray)"
  },
  "hover_light_gray_focus": {
    "color": "var(--light-gray)"
  },
  "hover_near_white_focus": {
    "color": "var(--near-white)"
  },
  "hover_white_focus": {
    "color": "var(--white)"
  },
  "hover_bg_black_focus": {
    "background-color": "var(--black)"
  },
  "hover_bg_near_black_focus": {
    "background-color": "var(--near-black)"
  },
  "hover_bg_dark_gray_focus": {
    "background-color": "var(--mid-gray)"
  },
  "hover_bg_gray_focus": {
    "background-color": "var(--gray)"
  },
  "hover_bg_silver_focus": {
    "background-color": "var(--silver)"
  },
  "hover_bg_light_silver_focus": {
    "background-color": "var(--light-silver)"
  },
  "hover_bg_moon_gray_focus": {
    "background-color": "var(--moon-gray)"
  },
  "hover_bg_light_gray_focus": {
    "background-color": "var(--light-gray)"
  },
  "hover_bg_near_white_focus": {
    "background-color": "var(--near-white)"
  },
  "hover_bg_white_focus": {
    "background-color": "var(--white)"
  },
  "hover_bg_transparent_focus": {
    "background-color": "var(--transparent)"
  },
  "hover_dark_red_focus": {
    "color": "var(--dark-red)"
  },
  "hover_red_focus": {
    "color": "var(--red)"
  },
  "hover_light_red_focus": {
    "color": "var(--light-red)"
  },
  "hover_orange_focus": {
    "color": "var(--orange)"
  },
  "hover_gold_focus": {
    "color": "var(--gold)"
  },
  "hover_yellow_focus": {
    "color": "var(--yellow)"
  },
  "hover_light_yellow_focus": {
    "color": "var(--light-yellow)"
  },
  "hover_purple_focus": {
    "color": "var(--purple)"
  },
  "hover_light_purple_focus": {
    "color": "var(--light-purple)"
  },
  "hover_dark_pink_focus": {
    "color": "var(--dark-pink)"
  },
  "hover_hot_pink_focus": {
    "color": "var(--hot-pink)"
  },
  "hover_pink_focus": {
    "color": "var(--pink)"
  },
  "hover_light_pink_focus": {
    "color": "var(--light-pink)"
  },
  "hover_dark_green_focus": {
    "color": "var(--dark-green)"
  },
  "hover_green_focus": {
    "color": "var(--green)"
  },
  "hover_light_green_focus": {
    "color": "var(--light-green)"
  },
  "hover_navy_focus": {
    "color": "var(--navy)"
  },
  "hover_dark_blue_focus": {
    "color": "var(--dark-blue)"
  },
  "hover_blue_focus": {
    "color": "var(--blue)"
  },
  "hover_light_blue_focus": {
    "color": "var(--light-blue)"
  },
  "hover_lightest_blue_focus": {
    "color": "var(--lightest-blue)"
  },
  "hover_washed_blue_focus": {
    "color": "var(--washed-blue)"
  },
  "hover_washed_green_focus": {
    "color": "var(--washed-green)"
  },
  "hover_washed_yellow_focus": {
    "color": "var(--washed-yellow)"
  },
  "hover_washed_red_focus": {
    "color": "var(--washed-red)"
  },
  "hover_bg_dark_red_focus": {
    "background-color": "var(--dark-red)"
  },
  "hover_bg_red_focus": {
    "background-color": "var(--red)"
  },
  "hover_bg_light_red_focus": {
    "background-color": "var(--light-red)"
  },
  "hover_bg_orange_focus": {
    "background-color": "var(--orange)"
  },
  "hover_bg_gold_focus": {
    "background-color": "var(--gold)"
  },
  "hover_bg_yellow_focus": {
    "background-color": "var(--yellow)"
  },
  "hover_bg_light_yellow_focus": {
    "background-color": "var(--light-yellow)"
  },
  "hover_bg_purple_focus": {
    "background-color": "var(--purple)"
  },
  "hover_bg_light_purple_focus": {
    "background-color": "var(--light-purple)"
  },
  "hover_bg_dark_pink_focus": {
    "background-color": "var(--dark-pink)"
  },
  "hover_bg_hot_pink_focus": {
    "background-color": "var(--hot-pink)"
  },
  "hover_bg_pink_focus": {
    "background-color": "var(--pink)"
  },
  "hover_bg_light_pink_focus": {
    "background-color": "var(--light-pink)"
  },
  "hover_bg_dark_green_focus": {
    "background-color": "var(--dark-green)"
  },
  "hover_bg_green_focus": {
    "background-color": "var(--green)"
  },
  "hover_bg_light_green_focus": {
    "background-color": "var(--light-green)"
  },
  "hover_bg_navy_focus": {
    "background-color": "var(--navy)"
  },
  "hover_bg_dark_blue_focus": {
    "background-color": "var(--dark-blue)"
  },
  "hover_bg_blue_focus": {
    "background-color": "var(--blue)"
  },
  "hover_bg_light_blue_focus": {
    "background-color": "var(--light-blue)"
  },
  "hover_bg_lightest_blue_focus": {
    "background-color": "var(--lightest-blue)"
  },
  "hover_bg_washed_blue_focus": {
    "background-color": "var(--washed-blue)"
  },
  "hover_bg_washed_green_focus": {
    "background-color": "var(--washed-green)"
  },
  "hover_bg_washed_yellow_focus": {
    "background-color": "var(--washed-yellow)"
  },
  "hover_bg_washed_red_focus": {
    "background-color": "var(--washed-red)"
  },
  "pa0": {
    "padding": "var(--spacing-none)"
  },
  "pa1": {
    "padding": "var(--spacing-extra-small)"
  },
  "pa2": {
    "padding": "var(--spacing-small)"
  },
  "pa3": {
    "padding": "var(--spacing-medium)"
  },
  "pa4": {
    "padding": "var(--spacing-large)"
  },
  "pa5": {
    "padding": "var(--spacing-extra-large)"
  },
  "pa6": {
    "padding": "var(--spacing-extra-extra-large)"
  },
  "pa7": {
    "padding": "var(--spacing-extra-extra-extra-large)"
  },
  "pl0": {
    "padding-left": "var(--spacing-none)"
  },
  "pl1": {
    "padding-left": "var(--spacing-extra-small)"
  },
  "pl2": {
    "padding-left": "var(--spacing-small)"
  },
  "pl3": {
    "padding-left": "var(--spacing-medium)"
  },
  "pl4": {
    "padding-left": "var(--spacing-large)"
  },
  "pl5": {
    "padding-left": "var(--spacing-extra-large)"
  },
  "pl6": {
    "padding-left": "var(--spacing-extra-extra-large)"
  },
  "pl7": {
    "padding-left": "var(--spacing-extra-extra-extra-large)"
  },
  "pr0": {
    "padding-right": "var(--spacing-none)"
  },
  "pr1": {
    "padding-right": "var(--spacing-extra-small)"
  },
  "pr2": {
    "padding-right": "var(--spacing-small)"
  },
  "pr3": {
    "padding-right": "var(--spacing-medium)"
  },
  "pr4": {
    "padding-right": "var(--spacing-large)"
  },
  "pr5": {
    "padding-right": "var(--spacing-extra-large)"
  },
  "pr6": {
    "padding-right": "var(--spacing-extra-extra-large)"
  },
  "pr7": {
    "padding-right": "var(--spacing-extra-extra-extra-large)"
  },
  "pb0": {
    "padding-bottom": "var(--spacing-none)"
  },
  "pb1": {
    "padding-bottom": "var(--spacing-extra-small)"
  },
  "pb2": {
    "padding-bottom": "var(--spacing-small)"
  },
  "pb3": {
    "padding-bottom": "var(--spacing-medium)"
  },
  "pb4": {
    "padding-bottom": "var(--spacing-large)"
  },
  "pb5": {
    "padding-bottom": "var(--spacing-extra-large)"
  },
  "pb6": {
    "padding-bottom": "var(--spacing-extra-extra-large)"
  },
  "pb7": {
    "padding-bottom": "var(--spacing-extra-extra-extra-large)"
  },
  "pt0": {
    "padding-top": "var(--spacing-none)"
  },
  "pt1": {
    "padding-top": "var(--spacing-extra-small)"
  },
  "pt2": {
    "padding-top": "var(--spacing-small)"
  },
  "pt3": {
    "padding-top": "var(--spacing-medium)"
  },
  "pt4": {
    "padding-top": "var(--spacing-large)"
  },
  "pt5": {
    "padding-top": "var(--spacing-extra-large)"
  },
  "pt6": {
    "padding-top": "var(--spacing-extra-extra-large)"
  },
  "pt7": {
    "padding-top": "var(--spacing-extra-extra-extra-large)"
  },
  "pv0": {
    "padding-top": "var(--spacing-none)",
    "padding-bottom": "var(--spacing-none)"
  },
  "pv1": {
    "padding-top": "var(--spacing-extra-small)",
    "padding-bottom": "var(--spacing-extra-small)"
  },
  "pv2": {
    "padding-top": "var(--spacing-small)",
    "padding-bottom": "var(--spacing-small)"
  },
  "pv3": {
    "padding-top": "var(--spacing-medium)",
    "padding-bottom": "var(--spacing-medium)"
  },
  "pv4": {
    "padding-top": "var(--spacing-large)",
    "padding-bottom": "var(--spacing-large)"
  },
  "pv5": {
    "padding-top": "var(--spacing-extra-large)",
    "padding-bottom": "var(--spacing-extra-large)"
  },
  "pv6": {
    "padding-top": "var(--spacing-extra-extra-large)",
    "padding-bottom": "var(--spacing-extra-extra-large)"
  },
  "pv7": {
    "padding-top": "var(--spacing-extra-extra-extra-large)",
    "padding-bottom": "var(--spacing-extra-extra-extra-large)"
  },
  "ph0": {
    "padding-left": "var(--spacing-none)",
    "padding-right": "var(--spacing-none)"
  },
  "ph1": {
    "padding-left": "var(--spacing-extra-small)",
    "padding-right": "var(--spacing-extra-small)"
  },
  "ph2": {
    "padding-left": "var(--spacing-small)",
    "padding-right": "var(--spacing-small)"
  },
  "ph3": {
    "padding-left": "var(--spacing-medium)",
    "padding-right": "var(--spacing-medium)"
  },
  "ph4": {
    "padding-left": "var(--spacing-large)",
    "padding-right": "var(--spacing-large)"
  },
  "ph5": {
    "padding-left": "var(--spacing-extra-large)",
    "padding-right": "var(--spacing-extra-large)"
  },
  "ph6": {
    "padding-left": "var(--spacing-extra-extra-large)",
    "padding-right": "var(--spacing-extra-extra-large)"
  },
  "ph7": {
    "padding-left": "var(--spacing-extra-extra-extra-large)",
    "padding-right": "var(--spacing-extra-extra-extra-large)"
  },
  "ma0": {
    "margin": "var(--spacing-none)"
  },
  "ma1": {
    "margin": "var(--spacing-extra-small)"
  },
  "ma2": {
    "margin": "var(--spacing-small)"
  },
  "ma3": {
    "margin": "var(--spacing-medium)"
  },
  "ma4": {
    "margin": "var(--spacing-large)"
  },
  "ma5": {
    "margin": "var(--spacing-extra-large)"
  },
  "ma6": {
    "margin": "var(--spacing-extra-extra-large)"
  },
  "ma7": {
    "margin": "var(--spacing-extra-extra-extra-large)"
  },
  "ml0": {
    "margin-left": "var(--spacing-none)"
  },
  "ml1": {
    "margin-left": "var(--spacing-extra-small)"
  },
  "ml2": {
    "margin-left": "var(--spacing-small)"
  },
  "ml3": {
    "margin-left": "var(--spacing-medium)"
  },
  "ml4": {
    "margin-left": "var(--spacing-large)"
  },
  "ml5": {
    "margin-left": "var(--spacing-extra-large)"
  },
  "ml6": {
    "margin-left": "var(--spacing-extra-extra-large)"
  },
  "ml7": {
    "margin-left": "var(--spacing-extra-extra-extra-large)"
  },
  "mr0": {
    "margin-right": "var(--spacing-none)"
  },
  "mr1": {
    "margin-right": "var(--spacing-extra-small)"
  },
  "mr2": {
    "margin-right": "var(--spacing-small)"
  },
  "mr3": {
    "margin-right": "var(--spacing-medium)"
  },
  "mr4": {
    "margin-right": "var(--spacing-large)"
  },
  "mr5": {
    "margin-right": "var(--spacing-extra-large)"
  },
  "mr6": {
    "margin-right": "var(--spacing-extra-extra-large)"
  },
  "mr7": {
    "margin-right": "var(--spacing-extra-extra-extra-large)"
  },
  "mb0": {
    "margin-bottom": "var(--spacing-none)"
  },
  "mb1": {
    "margin-bottom": "var(--spacing-extra-small)"
  },
  "mb2": {
    "margin-bottom": "var(--spacing-small)"
  },
  "mb3": {
    "margin-bottom": "var(--spacing-medium)"
  },
  "mb4": {
    "margin-bottom": "var(--spacing-large)"
  },
  "mb5": {
    "margin-bottom": "var(--spacing-extra-large)"
  },
  "mb6": {
    "margin-bottom": "var(--spacing-extra-extra-large)"
  },
  "mb7": {
    "margin-bottom": "var(--spacing-extra-extra-extra-large)"
  },
  "mt0": {
    "margin-top": "var(--spacing-none)"
  },
  "mt1": {
    "margin-top": "var(--spacing-extra-small)"
  },
  "mt2": {
    "margin-top": "var(--spacing-small)"
  },
  "mt3": {
    "margin-top": "var(--spacing-medium)"
  },
  "mt4": {
    "margin-top": "var(--spacing-large)"
  },
  "mt5": {
    "margin-top": "var(--spacing-extra-large)"
  },
  "mt6": {
    "margin-top": "var(--spacing-extra-extra-large)"
  },
  "mt7": {
    "margin-top": "var(--spacing-extra-extra-extra-large)"
  },
  "mv0": {
    "margin-top": "var(--spacing-none)",
    "margin-bottom": "var(--spacing-none)"
  },
  "mv1": {
    "margin-top": "var(--spacing-extra-small)",
    "margin-bottom": "var(--spacing-extra-small)"
  },
  "mv2": {
    "margin-top": "var(--spacing-small)",
    "margin-bottom": "var(--spacing-small)"
  },
  "mv3": {
    "margin-top": "var(--spacing-medium)",
    "margin-bottom": "var(--spacing-medium)"
  },
  "mv4": {
    "margin-top": "var(--spacing-large)",
    "margin-bottom": "var(--spacing-large)"
  },
  "mv5": {
    "margin-top": "var(--spacing-extra-large)",
    "margin-bottom": "var(--spacing-extra-large)"
  },
  "mv6": {
    "margin-top": "var(--spacing-extra-extra-large)",
    "margin-bottom": "var(--spacing-extra-extra-large)"
  },
  "mv7": {
    "margin-top": "var(--spacing-extra-extra-extra-large)",
    "margin-bottom": "var(--spacing-extra-extra-extra-large)"
  },
  "mh0": {
    "margin-left": "var(--spacing-none)",
    "margin-right": "var(--spacing-none)"
  },
  "mh1": {
    "margin-left": "var(--spacing-extra-small)",
    "margin-right": "var(--spacing-extra-small)"
  },
  "mh2": {
    "margin-left": "var(--spacing-small)",
    "margin-right": "var(--spacing-small)"
  },
  "mh3": {
    "margin-left": "var(--spacing-medium)",
    "margin-right": "var(--spacing-medium)"
  },
  "mh4": {
    "margin-left": "var(--spacing-large)",
    "margin-right": "var(--spacing-large)"
  },
  "mh5": {
    "margin-left": "var(--spacing-extra-large)",
    "margin-right": "var(--spacing-extra-large)"
  },
  "mh6": {
    "margin-left": "var(--spacing-extra-extra-large)",
    "margin-right": "var(--spacing-extra-extra-large)"
  },
  "mh7": {
    "margin-left": "var(--spacing-extra-extra-extra-large)",
    "margin-right": "var(--spacing-extra-extra-extra-large)"
  },
  "collapse": {
    "border-collapse": "collapse",
    "border-spacing": "0"
  },
  "striped__moon_gray_nth_child_odd": {
    "background-color": "var(--moon-gray)"
  },
  "striped__light_gray_nth_child_odd": {
    "background-color": "var(--light-gray)"
  },
  "striped__near_white_nth_child_odd": {
    "background-color": "var(--near-white)"
  },
  "tl": {
    "text-align": "left"
  },
  "tr": {
    "text-align": "right"
  },
  "tc": {
    "text-align": "center"
  },
  "strike": {
    "text-decoration": "line-through"
  },
  "underline": {
    "text-decoration": "underline"
  },
  "no_underline": {
    "text-decoration": "none"
  },
  "ttc": {
    "text-transform": "capitalize"
  },
  "ttl": {
    "text-transform": "lowercase"
  },
  "ttu": {
    "text-transform": "uppercase"
  },
  "ttn": {
    "text-transform": "none"
  },
  "f_6": {
    "font-size": "6rem"
  },
  "f_headline": {
    "font-size": "6rem"
  },
  "f_5": {
    "font-size": "5rem"
  },
  "f_subheadline": {
    "font-size": "5rem"
  },
  "f1": {
    "font-size": "3rem"
  },
  "f2": {
    "font-size": "2.25rem"
  },
  "f3": {
    "font-size": "1.5rem"
  },
  "f4": {
    "font-size": "1.25rem"
  },
  "f5": {
    "font-size": "1rem"
  },
  "f6": {
    "font-size": ".875rem"
  },
  "measure": {
    "max-width": "30em"
  },
  "measure_wide": {
    "max-width": "34em"
  },
  "measure_narrow": {
    "max-width": "20em"
  },
  "indent": {
    "text-indent": "1em",
    "margin-top": "0",
    "margin-bottom": "0"
  },
  "small_caps": {
    "font-variant": "small-caps"
  },
  "truncate": {
    "white-space": "nowrap",
    "overflow": "hidden",
    "text-overflow": "ellipsis"
  },
  "overflow_container": {
    "overflow-y": "scroll"
  },
  "center": {
    "margin-right": "auto",
    "margin-left": "auto"
  },
  "v_base": {
    "vertical-align": "baseline"
  },
  "v_mid": {
    "vertical-align": "middle"
  },
  "v_top": {
    "vertical-align": "top"
  },
  "v_btm": {
    "vertical-align": "bottom"
  },
  "clip": {
    "position": "fixed !important",
    "_position": "absolute !important",
    "clip": "rect(1px, 1px, 1px, 1px)"
  },
  "ws_normal": {
    "white-space": "normal"
  },
  "nowrap": {
    "white-space": "nowrap"
  },
  "w1": {
    "width": "1rem"
  },
  "w2": {
    "width": "2rem"
  },
  "w3": {
    "width": "4rem"
  },
  "w4": {
    "width": "8rem"
  },
  "w5": {
    "width": "16rem"
  },
  "w_10": {
    "width": "10%"
  },
  "w_20": {
    "width": "20%"
  },
  "w_25": {
    "width": "25%"
  },
  "w_30": {
    "width": "30%"
  },
  "w_33": {
    "width": "33%"
  },
  "w_34": {
    "width": "34%"
  },
  "w_40": {
    "width": "40%"
  },
  "w_50": {
    "width": "50%"
  },
  "w_60": {
    "width": "60%"
  },
  "w_70": {
    "width": "70%"
  },
  "w_75": {
    "width": "75%"
  },
  "w_80": {
    "width": "80%"
  },
  "w_90": {
    "width": "90%"
  },
  "w_100": {
    "width": "100%"
  },
  "w_third": {
    "width": "calc(100% / 3)"
  },
  "w_two_thirds": {
    "width": "calc(100% / 1.5)"
  },
  "w_auto": {
    "width": "auto"
  },
  "z_0": {
    "z-index": "0"
  },
  "z_1": {
    "z-index": "1"
  },
  "z_2": {
    "z-index": "2"
  },
  "z_3": {
    "z-index": "3"
  },
  "z_4": {
    "z-index": "4"
  },
  "z_5": {
    "z-index": "5"
  },
  "z_999": {
    "z-index": "999"
  },
  "z_9999": {
    "z-index": "9999"
  },
  "z_max": {
    "z-index": "2147483647"
  },
  "z_inherit": {
    "z-index": "inherit"
  },
  "z_initial": {
    "z-index": "initial"
  },
  "z_unset": {
    "z-index": "unset"
  },
  "__expression__": {
    "@media screen and (min-width: 60em)": "(--breakpoint-large)"
  },
  "aspect_ratio_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "0",
      "position": "relative"
    }
  },
  "aspect_ratio__16x9_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "56.25%"
    }
  },
  "aspect_ratio__9x16_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "177.77%"
    }
  },
  "aspect_ratio__4x3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "75%"
    }
  },
  "aspect_ratio__3x4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "133.33%"
    }
  },
  "aspect_ratio__6x4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "66.6%"
    }
  },
  "aspect_ratio__4x6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "150%"
    }
  },
  "aspect_ratio__8x5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "62.5%"
    }
  },
  "aspect_ratio__5x8_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "160%"
    }
  },
  "aspect_ratio__7x5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "71.42%"
    }
  },
  "aspect_ratio__5x7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "140%"
    }
  },
  "aspect_ratio__1x1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "100%"
    }
  },
  "aspect_ratio__object_ns": {
    "@media screen and (min-width: 30em)": {
      "position": "absolute",
      "top": "0",
      "right": "0",
      "bottom": "0",
      "left": "0",
      "width": "100%",
      "height": "100%",
      "z-index": "100"
    }
  },
  "bg_center_ns": {
    "@media screen and (min-width: 30em)": {
      "background-repeat": "no-repeat",
      "background-position": "center center"
    }
  },
  "bg_top_ns": {
    "@media screen and (min-width: 30em)": {
      "background-repeat": "no-repeat",
      "background-position": "top center"
    }
  },
  "bg_right_ns": {
    "@media screen and (min-width: 30em)": {
      "background-repeat": "no-repeat",
      "background-position": "center right"
    }
  },
  "bg_bottom_ns": {
    "@media screen and (min-width: 30em)": {
      "background-repeat": "no-repeat",
      "background-position": "bottom center"
    }
  },
  "bg_left_ns": {
    "@media screen and (min-width: 30em)": {
      "background-repeat": "no-repeat",
      "background-position": "center left"
    }
  },
  "cover_ns": {
    "@media screen and (min-width: 30em)": {
      "background-size": "cover"
    }
  },
  "contain_ns": {
    "@media screen and (min-width: 30em)": {
      "background-size": "contain"
    }
  },
  "br0_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": "0"
    }
  },
  "br1_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": ".125rem"
    }
  },
  "br2_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": ".25rem"
    }
  },
  "br3_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": ".5rem"
    }
  },
  "br4_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": "1rem"
    }
  },
  "br_100_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": "100%"
    }
  },
  "br_pill_ns": {
    "@media screen and (min-width: 30em)": {
      "border-radius": "9999px"
    }
  },
  "br__bottom_ns": {
    "@media screen and (min-width: 30em)": {
      "border-top-left-radius": "0",
      "border-top-right-radius": "0"
    }
  },
  "br__top_ns": {
    "@media screen and (min-width: 30em)": {
      "border-bottom-left-radius": "0",
      "border-bottom-right-radius": "0"
    }
  },
  "br__right_ns": {
    "@media screen and (min-width: 30em)": {
      "border-top-left-radius": "0",
      "border-bottom-left-radius": "0"
    }
  },
  "br__left_ns": {
    "@media screen and (min-width: 30em)": {
      "border-top-right-radius": "0",
      "border-bottom-right-radius": "0"
    }
  },
  "b__dotted_ns": {
    "@media screen and (min-width: 30em)": {
      "border-style": "dotted"
    }
  },
  "b__dashed_ns": {
    "@media screen and (min-width: 30em)": {
      "border-style": "dashed"
    }
  },
  "b__solid_ns": {
    "@media screen and (min-width: 30em)": {
      "border-style": "solid"
    }
  },
  "b__none_ns": {
    "@media screen and (min-width: 30em)": {
      "border-style": "none"
    }
  },
  "bw0_ns": {
    "@media screen and (min-width: 30em)": {
      "border-width": "0"
    }
  },
  "bw1_ns": {
    "@media screen and (min-width: 30em)": {
      "border-width": ".125rem"
    }
  },
  "bw2_ns": {
    "@media screen and (min-width: 30em)": {
      "border-width": ".25rem"
    }
  },
  "bw3_ns": {
    "@media screen and (min-width: 30em)": {
      "border-width": ".5rem"
    }
  },
  "bw4_ns": {
    "@media screen and (min-width: 30em)": {
      "border-width": "1rem"
    }
  },
  "bw5_ns": {
    "@media screen and (min-width: 30em)": {
      "border-width": "2rem"
    }
  },
  "bt_0_ns": {
    "@media screen and (min-width: 30em)": {
      "border-top-width": "0"
    }
  },
  "br_0_ns": {
    "@media screen and (min-width: 30em)": {
      "border-right-width": "0"
    }
  },
  "bb_0_ns": {
    "@media screen and (min-width: 30em)": {
      "border-bottom-width": "0"
    }
  },
  "bl_0_ns": {
    "@media screen and (min-width: 30em)": {
      "border-left-width": "0"
    }
  },
  "ba_ns": {
    "@media screen and (min-width: 30em)": {
      "border-style": "solid",
      "border-width": "1px"
    }
  },
  "bt_ns": {
    "@media screen and (min-width: 30em)": {
      "border-top-style": "solid",
      "border-top-width": "1px"
    }
  },
  "br_ns": {
    "@media screen and (min-width: 30em)": {
      "border-right-style": "solid",
      "border-right-width": "1px"
    }
  },
  "bb_ns": {
    "@media screen and (min-width: 30em)": {
      "border-bottom-style": "solid",
      "border-bottom-width": "1px"
    }
  },
  "bl_ns": {
    "@media screen and (min-width: 30em)": {
      "border-left-style": "solid",
      "border-left-width": "1px"
    }
  },
  "bn_ns": {
    "@media screen and (min-width: 30em)": {
      "border-style": "none",
      "border-width": "0"
    }
  },
  "shadow_1_ns": {
    "@media screen and (min-width: 30em)": {
      "box-shadow": "0px 0px 4px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_2_ns": {
    "@media screen and (min-width: 30em)": {
      "box-shadow": "0px 0px 8px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_3_ns": {
    "@media screen and (min-width: 30em)": {
      "box-shadow": "2px 2px 4px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_4_ns": {
    "@media screen and (min-width: 30em)": {
      "box-shadow": "2px 2px 8px 0px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_5_ns": {
    "@media screen and (min-width: 30em)": {
      "box-shadow": "4px 4px 8px 0px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "cl_ns": {
    "@media screen and (min-width: 30em)": {
      "clear": "left"
    }
  },
  "cr_ns": {
    "@media screen and (min-width: 30em)": {
      "clear": "right"
    }
  },
  "cb_ns": {
    "@media screen and (min-width: 30em)": {
      "clear": "both"
    }
  },
  "cn_ns": {
    "@media screen and (min-width: 30em)": {
      "clear": "none"
    }
  },
  "top_0_ns": {
    "@media screen and (min-width: 30em)": {
      "top": "0"
    }
  },
  "left_0_ns": {
    "@media screen and (min-width: 30em)": {
      "left": "0"
    }
  },
  "right_0_ns": {
    "@media screen and (min-width: 30em)": {
      "right": "0"
    }
  },
  "bottom_0_ns": {
    "@media screen and (min-width: 30em)": {
      "bottom": "0"
    }
  },
  "top_1_ns": {
    "@media screen and (min-width: 30em)": {
      "top": "1rem"
    }
  },
  "left_1_ns": {
    "@media screen and (min-width: 30em)": {
      "left": "1rem"
    }
  },
  "right_1_ns": {
    "@media screen and (min-width: 30em)": {
      "right": "1rem"
    }
  },
  "bottom_1_ns": {
    "@media screen and (min-width: 30em)": {
      "bottom": "1rem"
    }
  },
  "top_2_ns": {
    "@media screen and (min-width: 30em)": {
      "top": "2rem"
    }
  },
  "left_2_ns": {
    "@media screen and (min-width: 30em)": {
      "left": "2rem"
    }
  },
  "right_2_ns": {
    "@media screen and (min-width: 30em)": {
      "right": "2rem"
    }
  },
  "bottom_2_ns": {
    "@media screen and (min-width: 30em)": {
      "bottom": "2rem"
    }
  },
  "top__1_ns": {
    "@media screen and (min-width: 30em)": {
      "top": "-1rem"
    }
  },
  "right__1_ns": {
    "@media screen and (min-width: 30em)": {
      "right": "-1rem"
    }
  },
  "bottom__1_ns": {
    "@media screen and (min-width: 30em)": {
      "bottom": "-1rem"
    }
  },
  "left__1_ns": {
    "@media screen and (min-width: 30em)": {
      "left": "-1rem"
    }
  },
  "top__2_ns": {
    "@media screen and (min-width: 30em)": {
      "top": "-2rem"
    }
  },
  "right__2_ns": {
    "@media screen and (min-width: 30em)": {
      "right": "-2rem"
    }
  },
  "bottom__2_ns": {
    "@media screen and (min-width: 30em)": {
      "bottom": "-2rem"
    }
  },
  "left__2_ns": {
    "@media screen and (min-width: 30em)": {
      "left": "-2rem"
    }
  },
  "absolute__fill_ns": {
    "@media screen and (min-width: 30em)": {
      "top": "0",
      "right": "0",
      "bottom": "0",
      "left": "0"
    }
  },
  "dn_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "none"
    }
  },
  "di_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "inline"
    }
  },
  "db_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "block"
    }
  },
  "dib_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "inline-block"
    }
  },
  "dit_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "inline-table"
    }
  },
  "dt_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "table"
    }
  },
  "dtc_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "table-cell"
    }
  },
  "dt_row_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "table-row"
    }
  },
  "dt_row_group_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "table-row-group"
    }
  },
  "dt_column_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "table-column"
    }
  },
  "dt_column_group_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "table-column-group"
    }
  },
  "dt__fixed_ns": {
    "@media screen and (min-width: 30em)": {
      "table-layout": "fixed",
      "width": "100%"
    }
  },
  "flex_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "flex"
    }
  },
  "inline_flex_ns": {
    "@media screen and (min-width: 30em)": {
      "display": "inline-flex"
    }
  },
  "flex_auto_ns": {
    "@media screen and (min-width: 30em)": {
      "flex": "1 1 auto",
      "min-width": "0",
      "min-height": "0"
    }
  },
  "flex_none_ns": {
    "@media screen and (min-width: 30em)": {
      "flex": "none"
    }
  },
  "flex_column_ns": {
    "@media screen and (min-width: 30em)": {
      "flex-direction": "column"
    }
  },
  "flex_row_ns": {
    "@media screen and (min-width: 30em)": {
      "flex-direction": "row"
    }
  },
  "flex_wrap_ns": {
    "@media screen and (min-width: 30em)": {
      "flex-wrap": "wrap"
    }
  },
  "items_start_ns": {
    "@media screen and (min-width: 30em)": {
      "align-items": "flex-start"
    }
  },
  "items_end_ns": {
    "@media screen and (min-width: 30em)": {
      "align-items": "flex-end"
    }
  },
  "items_center_ns": {
    "@media screen and (min-width: 30em)": {
      "align-items": "center"
    }
  },
  "items_baseline_ns": {
    "@media screen and (min-width: 30em)": {
      "align-items": "baseline"
    }
  },
  "items_stretch_ns": {
    "@media screen and (min-width: 30em)": {
      "align-items": "stretch"
    }
  },
  "self_start_ns": {
    "@media screen and (min-width: 30em)": {
      "align-self": "flex-start"
    }
  },
  "self_end_ns": {
    "@media screen and (min-width: 30em)": {
      "align-self": "flex-end"
    }
  },
  "self_center_ns": {
    "@media screen and (min-width: 30em)": {
      "align-self": "center"
    }
  },
  "self_baseline_ns": {
    "@media screen and (min-width: 30em)": {
      "align-self": "baseline"
    }
  },
  "self_stretch_ns": {
    "@media screen and (min-width: 30em)": {
      "align-self": "stretch"
    }
  },
  "justify_start_ns": {
    "@media screen and (min-width: 30em)": {
      "justify-content": "flex-start"
    }
  },
  "justify_end_ns": {
    "@media screen and (min-width: 30em)": {
      "justify-content": "flex-end"
    }
  },
  "justify_center_ns": {
    "@media screen and (min-width: 30em)": {
      "justify-content": "center"
    }
  },
  "justify_between_ns": {
    "@media screen and (min-width: 30em)": {
      "justify-content": "space-between"
    }
  },
  "justify_around_ns": {
    "@media screen and (min-width: 30em)": {
      "justify-content": "space-around"
    }
  },
  "content_start_ns": {
    "@media screen and (min-width: 30em)": {
      "align-content": "flex-start"
    }
  },
  "content_end_ns": {
    "@media screen and (min-width: 30em)": {
      "align-content": "flex-end"
    }
  },
  "content_center_ns": {
    "@media screen and (min-width: 30em)": {
      "align-content": "center"
    }
  },
  "content_between_ns": {
    "@media screen and (min-width: 30em)": {
      "align-content": "space-between"
    }
  },
  "content_around_ns": {
    "@media screen and (min-width: 30em)": {
      "align-content": "space-around"
    }
  },
  "content_stretch_ns": {
    "@media screen and (min-width: 30em)": {
      "align-content": "stretch"
    }
  },
  "order_0_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "0"
    }
  },
  "order_1_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "1"
    }
  },
  "order_2_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "2"
    }
  },
  "order_3_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "3"
    }
  },
  "order_4_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "4"
    }
  },
  "order_5_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "5"
    }
  },
  "order_6_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "6"
    }
  },
  "order_7_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "7"
    }
  },
  "order_8_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "8"
    }
  },
  "order_last_ns": {
    "@media screen and (min-width: 30em)": {
      "order": "99999"
    }
  },
  "fl_ns": {
    "@media screen and (min-width: 30em)": {
      "float": "left",
      "_display": "inline"
    }
  },
  "fr_ns": {
    "@media screen and (min-width: 30em)": {
      "float": "right",
      "_display": "inline"
    }
  },
  "fn_ns": {
    "@media screen and (min-width: 30em)": {
      "float": "none"
    }
  },
  "i_ns": {
    "@media screen and (min-width: 30em)": {
      "font-style": "italic"
    }
  },
  "fs_normal_ns": {
    "@media screen and (min-width: 30em)": {
      "font-style": "normal"
    }
  },
  "normal_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "normal"
    }
  },
  "b_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "bold"
    }
  },
  "fw1_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "100"
    }
  },
  "fw2_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "200"
    }
  },
  "fw3_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "300"
    }
  },
  "fw4_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "400"
    }
  },
  "fw5_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "500"
    }
  },
  "fw6_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "600"
    }
  },
  "fw7_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "700"
    }
  },
  "fw8_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "800"
    }
  },
  "fw9_ns": {
    "@media screen and (min-width: 30em)": {
      "font-weight": "900"
    }
  },
  "h1_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "1rem"
    }
  },
  "h2_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "2rem"
    }
  },
  "h3_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "4rem"
    }
  },
  "h4_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "8rem"
    }
  },
  "h5_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "16rem"
    }
  },
  "h_25_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "25%"
    }
  },
  "h_50_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "50%"
    }
  },
  "h_75_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "75%"
    }
  },
  "h_100_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "100%"
    }
  },
  "min_h_100_ns": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "min-height": "100%"
    }
  },
  "vh_25_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "25vh"
    }
  },
  "vh_50_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "50vh"
    }
  },
  "vh_75_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "75vh"
    }
  },
  "vh_100_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "100vh"
    }
  },
  "min_vh_100_ns": {
    "@media screen and (min-width: 30em)": {
      "min-height": "100vh"
    }
  },
  "h_auto_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "auto"
    }
  },
  "h_inherit_ns": {
    "@media screen and (min-width: 30em)": {
      "height": "inherit"
    }
  },
  "tracked_ns": {
    "@media screen and (min-width: 30em)": {
      "letter-spacing": ".1em"
    }
  },
  "tracked_tight_ns": {
    "@media screen and (min-width: 30em)": {
      "letter-spacing": "-.05em"
    }
  },
  "tracked_mega_ns": {
    "@media screen and (min-width: 30em)": {
      "letter-spacing": ".25em"
    }
  },
  "lh_solid_ns": {
    "@media screen and (min-width: 30em)": {
      "line-height": "1"
    }
  },
  "lh_title_ns": {
    "@media screen and (min-width: 30em)": {
      "line-height": "1.25"
    }
  },
  "lh_copy_ns": {
    "@media screen and (min-width: 30em)": {
      "line-height": "1.5"
    }
  },
  "mw_100_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "100%"
    }
  },
  "mw1_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "1rem"
    }
  },
  "mw2_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "2rem"
    }
  },
  "mw3_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "4rem"
    }
  },
  "mw4_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "8rem"
    }
  },
  "mw5_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "16rem"
    }
  },
  "mw6_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "32rem"
    }
  },
  "mw7_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "48rem"
    }
  },
  "mw8_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "64rem"
    }
  },
  "mw9_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "96rem"
    }
  },
  "mw_none_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "none"
    }
  },
  "outline_ns": {
    "@media screen and (min-width: 30em)": {
      "outline": "1px solid"
    }
  },
  "outline_transparent_ns": {
    "@media screen and (min-width: 30em)": {
      "outline": "1px solid transparent"
    }
  },
  "outline_0_ns": {
    "@media screen and (min-width: 30em)": {
      "outline": "0"
    }
  },
  "overflow_visible_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow": "visible"
    }
  },
  "overflow_hidden_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow": "hidden"
    }
  },
  "overflow_scroll_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow": "scroll"
    }
  },
  "overflow_auto_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow": "auto"
    }
  },
  "overflow_x_visible_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-x": "visible"
    }
  },
  "overflow_x_hidden_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-x": "hidden"
    }
  },
  "overflow_x_scroll_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-x": "scroll"
    }
  },
  "overflow_x_auto_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-x": "auto"
    }
  },
  "overflow_y_visible_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-y": "visible"
    }
  },
  "overflow_y_hidden_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-y": "hidden"
    }
  },
  "overflow_y_scroll_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-y": "scroll"
    }
  },
  "overflow_y_auto_ns": {
    "@media screen and (min-width: 30em)": {
      "overflow-y": "auto"
    }
  },
  "static_ns": {
    "@media screen and (min-width: 30em)": {
      "position": "static"
    }
  },
  "relative_ns": {
    "@media screen and (min-width: 30em)": {
      "position": "relative"
    }
  },
  "absolute_ns": {
    "@media screen and (min-width: 30em)": {
      "position": "absolute"
    }
  },
  "fixed_ns": {
    "@media screen and (min-width: 30em)": {
      "position": "fixed"
    }
  },
  "rotate_45_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(45deg)"
    }
  },
  "rotate_90_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(90deg)"
    }
  },
  "rotate_135_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(135deg)"
    }
  },
  "rotate_180_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(180deg)"
    }
  },
  "rotate_225_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(225deg)"
    }
  },
  "rotate_270_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(270deg)"
    }
  },
  "rotate_315_ns": {
    "@media screen and (min-width: 30em)": {
      "transform": "rotate(315deg)"
    }
  },
  "pa0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-none)"
    }
  },
  "pa1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-extra-small)"
    }
  },
  "pa2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-small)"
    }
  },
  "pa3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-medium)"
    }
  },
  "pa4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-large)"
    }
  },
  "pa5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-extra-large)"
    }
  },
  "pa6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-extra-extra-large)"
    }
  },
  "pa7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pl0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-none)"
    }
  },
  "pl1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-small)"
    }
  },
  "pl2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-small)"
    }
  },
  "pl3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-medium)"
    }
  },
  "pl4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-large)"
    }
  },
  "pl5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-large)"
    }
  },
  "pl6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-extra-large)"
    }
  },
  "pl7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pr0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-none)"
    }
  },
  "pr1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-extra-small)"
    }
  },
  "pr2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-small)"
    }
  },
  "pr3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-medium)"
    }
  },
  "pr4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-large)"
    }
  },
  "pr5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-extra-large)"
    }
  },
  "pr6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-extra-extra-large)"
    }
  },
  "pr7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pb0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-none)"
    }
  },
  "pb1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-extra-small)"
    }
  },
  "pb2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-small)"
    }
  },
  "pb3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-medium)"
    }
  },
  "pb4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-large)"
    }
  },
  "pb5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-extra-large)"
    }
  },
  "pb6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "pb7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pt0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-none)"
    }
  },
  "pt1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-small)"
    }
  },
  "pt2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-small)"
    }
  },
  "pt3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-medium)"
    }
  },
  "pt4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-large)"
    }
  },
  "pt5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-large)"
    }
  },
  "pt6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-extra-large)"
    }
  },
  "pt7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pv0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-none)",
      "padding-bottom": "var(--spacing-none)"
    }
  },
  "pv1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-small)",
      "padding-bottom": "var(--spacing-extra-small)"
    }
  },
  "pv2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-small)",
      "padding-bottom": "var(--spacing-small)"
    }
  },
  "pv3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-medium)",
      "padding-bottom": "var(--spacing-medium)"
    }
  },
  "pv4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-large)",
      "padding-bottom": "var(--spacing-large)"
    }
  },
  "pv5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-large)",
      "padding-bottom": "var(--spacing-extra-large)"
    }
  },
  "pv6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-extra-large)",
      "padding-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "pv7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-top": "var(--spacing-extra-extra-extra-large)",
      "padding-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ph0_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-none)",
      "padding-right": "var(--spacing-none)"
    }
  },
  "ph1_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-small)",
      "padding-right": "var(--spacing-extra-small)"
    }
  },
  "ph2_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-small)",
      "padding-right": "var(--spacing-small)"
    }
  },
  "ph3_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-medium)",
      "padding-right": "var(--spacing-medium)"
    }
  },
  "ph4_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-large)",
      "padding-right": "var(--spacing-large)"
    }
  },
  "ph5_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-large)",
      "padding-right": "var(--spacing-extra-large)"
    }
  },
  "ph6_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-extra-large)",
      "padding-right": "var(--spacing-extra-extra-large)"
    }
  },
  "ph7_ns": {
    "@media screen and (min-width: 30em)": {
      "padding-left": "var(--spacing-extra-extra-extra-large)",
      "padding-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ma0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-none)"
    }
  },
  "ma1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-extra-small)"
    }
  },
  "ma2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-small)"
    }
  },
  "ma3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-medium)"
    }
  },
  "ma4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-large)"
    }
  },
  "ma5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-extra-large)"
    }
  },
  "ma6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-extra-extra-large)"
    }
  },
  "ma7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ml0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-none)"
    }
  },
  "ml1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-small)"
    }
  },
  "ml2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-small)"
    }
  },
  "ml3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-medium)"
    }
  },
  "ml4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-large)"
    }
  },
  "ml5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-large)"
    }
  },
  "ml6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-extra-large)"
    }
  },
  "ml7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mr0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-none)"
    }
  },
  "mr1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-extra-small)"
    }
  },
  "mr2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-small)"
    }
  },
  "mr3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-medium)"
    }
  },
  "mr4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-large)"
    }
  },
  "mr5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-extra-large)"
    }
  },
  "mr6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-extra-extra-large)"
    }
  },
  "mr7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mb0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-none)"
    }
  },
  "mb1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-extra-small)"
    }
  },
  "mb2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-small)"
    }
  },
  "mb3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-medium)"
    }
  },
  "mb4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-large)"
    }
  },
  "mb5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-extra-large)"
    }
  },
  "mb6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "mb7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mt0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-none)"
    }
  },
  "mt1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-small)"
    }
  },
  "mt2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-small)"
    }
  },
  "mt3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-medium)"
    }
  },
  "mt4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-large)"
    }
  },
  "mt5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-large)"
    }
  },
  "mt6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-extra-large)"
    }
  },
  "mt7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mv0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-none)",
      "margin-bottom": "var(--spacing-none)"
    }
  },
  "mv1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-small)",
      "margin-bottom": "var(--spacing-extra-small)"
    }
  },
  "mv2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-small)",
      "margin-bottom": "var(--spacing-small)"
    }
  },
  "mv3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-medium)",
      "margin-bottom": "var(--spacing-medium)"
    }
  },
  "mv4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-large)",
      "margin-bottom": "var(--spacing-large)"
    }
  },
  "mv5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-large)",
      "margin-bottom": "var(--spacing-extra-large)"
    }
  },
  "mv6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-extra-large)",
      "margin-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "mv7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-top": "var(--spacing-extra-extra-extra-large)",
      "margin-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mh0_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-none)",
      "margin-right": "var(--spacing-none)"
    }
  },
  "mh1_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-small)",
      "margin-right": "var(--spacing-extra-small)"
    }
  },
  "mh2_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-small)",
      "margin-right": "var(--spacing-small)"
    }
  },
  "mh3_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-medium)",
      "margin-right": "var(--spacing-medium)"
    }
  },
  "mh4_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-large)",
      "margin-right": "var(--spacing-large)"
    }
  },
  "mh5_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-large)",
      "margin-right": "var(--spacing-extra-large)"
    }
  },
  "mh6_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-extra-large)",
      "margin-right": "var(--spacing-extra-extra-large)"
    }
  },
  "mh7_ns": {
    "@media screen and (min-width: 30em)": {
      "margin-left": "var(--spacing-extra-extra-extra-large)",
      "margin-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "tl_ns": {
    "@media screen and (min-width: 30em)": {
      "text-align": "left"
    }
  },
  "tr_ns": {
    "@media screen and (min-width: 30em)": {
      "text-align": "right"
    }
  },
  "tc_ns": {
    "@media screen and (min-width: 30em)": {
      "text-align": "center"
    }
  },
  "strike_ns": {
    "@media screen and (min-width: 30em)": {
      "text-decoration": "line-through"
    }
  },
  "underline_ns": {
    "@media screen and (min-width: 30em)": {
      "text-decoration": "underline"
    }
  },
  "no_underline_ns": {
    "@media screen and (min-width: 30em)": {
      "text-decoration": "none"
    }
  },
  "ttc_ns": {
    "@media screen and (min-width: 30em)": {
      "text-transform": "capitalize"
    }
  },
  "ttl_ns": {
    "@media screen and (min-width: 30em)": {
      "text-transform": "lowercase"
    }
  },
  "ttu_ns": {
    "@media screen and (min-width: 30em)": {
      "text-transform": "uppercase"
    }
  },
  "ttn_ns": {
    "@media screen and (min-width: 30em)": {
      "text-transform": "none"
    }
  },
  "f_6_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "6rem"
    }
  },
  "f_headline_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "6rem"
    }
  },
  "f_5_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "5rem"
    }
  },
  "f_subheadline_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "5rem"
    }
  },
  "f1_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "3rem"
    }
  },
  "f2_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "2.25rem"
    }
  },
  "f3_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "1.5rem"
    }
  },
  "f4_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "1.25rem"
    }
  },
  "f5_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": "1rem"
    }
  },
  "f6_ns": {
    "@media screen and (min-width: 30em)": {
      "font-size": ".875rem"
    }
  },
  "measure_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "30em"
    }
  },
  "measure_wide_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "34em"
    }
  },
  "measure_narrow_ns": {
    "@media screen and (min-width: 30em)": {
      "max-width": "20em"
    }
  },
  "indent_ns": {
    "@media screen and (min-width: 30em)": {
      "text-indent": "1em",
      "margin-top": "0",
      "margin-bottom": "0"
    }
  },
  "small_caps_ns": {
    "@media screen and (min-width: 30em)": {
      "font-variant": "small-caps"
    }
  },
  "truncate_ns": {
    "@media screen and (min-width: 30em)": {
      "white-space": "nowrap",
      "overflow": "hidden",
      "text-overflow": "ellipsis"
    }
  },
  "v_base_ns": {
    "@media screen and (min-width: 30em)": {
      "vertical-align": "baseline"
    }
  },
  "v_mid_ns": {
    "@media screen and (min-width: 30em)": {
      "vertical-align": "middle"
    }
  },
  "v_top_ns": {
    "@media screen and (min-width: 30em)": {
      "vertical-align": "top"
    }
  },
  "v_btm_ns": {
    "@media screen and (min-width: 30em)": {
      "vertical-align": "bottom"
    }
  },
  "clip_ns": {
    "@media screen and (min-width: 30em)": {
      "position": "fixed !important",
      "_position": "absolute !important",
      "clip": "rect(1px, 1px, 1px, 1px)"
    }
  },
  "ws_normal_ns": {
    "@media screen and (min-width: 30em)": {
      "white-space": "normal"
    }
  },
  "nowrap_ns": {
    "@media screen and (min-width: 30em)": {
      "white-space": "nowrap"
    }
  },
  "pre_ns": {
    "@media screen and (min-width: 30em)": {
      "white-space": "pre"
    }
  },
  "w1_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "1rem"
    }
  },
  "w2_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "2rem"
    }
  },
  "w3_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "4rem"
    }
  },
  "w4_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "8rem"
    }
  },
  "w5_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "16rem"
    }
  },
  "w_10_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "10%"
    }
  },
  "w_20_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "20%"
    }
  },
  "w_25_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "25%"
    }
  },
  "w_30_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "30%"
    }
  },
  "w_33_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "33%"
    }
  },
  "w_34_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "34%"
    }
  },
  "w_40_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "40%"
    }
  },
  "w_50_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "50%"
    }
  },
  "w_60_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "60%"
    }
  },
  "w_70_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "70%"
    }
  },
  "w_75_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "75%"
    }
  },
  "w_80_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "80%"
    }
  },
  "w_90_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "90%"
    }
  },
  "w_100_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "100%"
    }
  },
  "w_third_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "calc(100% / 3)"
    }
  },
  "w_two_thirds_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "calc(100% / 1.5)"
    }
  },
  "w_auto_ns": {
    "@media screen and (min-width: 30em)": {
      "width": "auto"
    }
  },
  "aspect_ratio_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "0",
      "position": "relative"
    }
  },
  "aspect_ratio__16x9_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "56.25%"
    }
  },
  "aspect_ratio__9x16_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "177.77%"
    }
  },
  "aspect_ratio__4x3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "75%"
    }
  },
  "aspect_ratio__3x4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "133.33%"
    }
  },
  "aspect_ratio__6x4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "66.6%"
    }
  },
  "aspect_ratio__4x6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "150%"
    }
  },
  "aspect_ratio__8x5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "62.5%"
    }
  },
  "aspect_ratio__5x8_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "160%"
    }
  },
  "aspect_ratio__7x5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "71.42%"
    }
  },
  "aspect_ratio__5x7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "140%"
    }
  },
  "aspect_ratio__1x1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "100%"
    }
  },
  "aspect_ratio__object_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "position": "absolute",
      "top": "0",
      "right": "0",
      "bottom": "0",
      "left": "0",
      "width": "100%",
      "height": "100%",
      "z-index": "100"
    }
  },
  "bg_center_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "center center"
    }
  },
  "bg_top_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "top center"
    }
  },
  "bg_right_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "center right"
    }
  },
  "bg_bottom_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "bottom center"
    }
  },
  "bg_left_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "center left"
    }
  },
  "cover_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-size": "cover"
    }
  },
  "contain_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "background-size": "contain"
    }
  },
  "br0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": "0"
    }
  },
  "br1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": ".125rem"
    }
  },
  "br2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": ".25rem"
    }
  },
  "br3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": ".5rem"
    }
  },
  "br4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": "1rem"
    }
  },
  "br_100_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": "100%"
    }
  },
  "br_pill_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-radius": "9999px"
    }
  },
  "br__bottom_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-top-left-radius": "0",
      "border-top-right-radius": "0"
    }
  },
  "br__top_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-bottom-left-radius": "0",
      "border-bottom-right-radius": "0"
    }
  },
  "br__right_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-top-left-radius": "0",
      "border-bottom-left-radius": "0"
    }
  },
  "br__left_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-top-right-radius": "0",
      "border-bottom-right-radius": "0"
    }
  },
  "b__dotted_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-style": "dotted"
    }
  },
  "b__dashed_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-style": "dashed"
    }
  },
  "b__solid_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-style": "solid"
    }
  },
  "b__none_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-style": "none"
    }
  },
  "bw0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-width": "0"
    }
  },
  "bw1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-width": ".125rem"
    }
  },
  "bw2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-width": ".25rem"
    }
  },
  "bw3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-width": ".5rem"
    }
  },
  "bw4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-width": "1rem"
    }
  },
  "bw5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-width": "2rem"
    }
  },
  "bt_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-top-width": "0"
    }
  },
  "br_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-right-width": "0"
    }
  },
  "bb_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-bottom-width": "0"
    }
  },
  "bl_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-left-width": "0"
    }
  },
  "ba_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-style": "solid",
      "border-width": "1px"
    }
  },
  "bt_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-top-style": "solid",
      "border-top-width": "1px"
    }
  },
  "br_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-right-style": "solid",
      "border-right-width": "1px"
    }
  },
  "bb_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-bottom-style": "solid",
      "border-bottom-width": "1px"
    }
  },
  "bl_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-left-style": "solid",
      "border-left-width": "1px"
    }
  },
  "bn_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "border-style": "none",
      "border-width": "0"
    }
  },
  "shadow_1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "box-shadow": "0px 0px 4px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "box-shadow": "0px 0px 8px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "box-shadow": "2px 2px 4px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "box-shadow": "2px 2px 8px 0px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "box-shadow": "4px 4px 8px 0px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "cl_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "clear": "left"
    }
  },
  "cr_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "clear": "right"
    }
  },
  "cb_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "clear": "both"
    }
  },
  "cn_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "clear": "none"
    }
  },
  "top_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "top": "0"
    }
  },
  "left_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "left": "0"
    }
  },
  "right_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "right": "0"
    }
  },
  "bottom_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "bottom": "0"
    }
  },
  "top_1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "top": "1rem"
    }
  },
  "left_1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "left": "1rem"
    }
  },
  "right_1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "right": "1rem"
    }
  },
  "bottom_1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "bottom": "1rem"
    }
  },
  "top_2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "top": "2rem"
    }
  },
  "left_2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "left": "2rem"
    }
  },
  "right_2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "right": "2rem"
    }
  },
  "bottom_2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "bottom": "2rem"
    }
  },
  "top__1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "top": "-1rem"
    }
  },
  "right__1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "right": "-1rem"
    }
  },
  "bottom__1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "bottom": "-1rem"
    }
  },
  "left__1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "left": "-1rem"
    }
  },
  "top__2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "top": "-2rem"
    }
  },
  "right__2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "right": "-2rem"
    }
  },
  "bottom__2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "bottom": "-2rem"
    }
  },
  "left__2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "left": "-2rem"
    }
  },
  "absolute__fill_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "top": "0",
      "right": "0",
      "bottom": "0",
      "left": "0"
    }
  },
  "dn_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "none"
    }
  },
  "di_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "inline"
    }
  },
  "db_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "block"
    }
  },
  "dib_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "inline-block"
    }
  },
  "dit_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "inline-table"
    }
  },
  "dt_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "table"
    }
  },
  "dtc_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "table-cell"
    }
  },
  "dt_row_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "table-row"
    }
  },
  "dt_row_group_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "table-row-group"
    }
  },
  "dt_column_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "table-column"
    }
  },
  "dt_column_group_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "table-column-group"
    }
  },
  "dt__fixed_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "table-layout": "fixed",
      "width": "100%"
    }
  },
  "flex_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "flex"
    }
  },
  "inline_flex_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "display": "inline-flex"
    }
  },
  "flex_auto_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "flex": "1 1 auto",
      "min-width": "0",
      "min-height": "0"
    }
  },
  "flex_none_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "flex": "none"
    }
  },
  "flex_column_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "flex-direction": "column"
    }
  },
  "flex_row_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "flex-direction": "row"
    }
  },
  "flex_wrap_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "flex-wrap": "wrap"
    }
  },
  "items_start_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-items": "flex-start"
    }
  },
  "items_end_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-items": "flex-end"
    }
  },
  "items_center_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-items": "center"
    }
  },
  "items_baseline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-items": "baseline"
    }
  },
  "items_stretch_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-items": "stretch"
    }
  },
  "self_start_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-self": "flex-start"
    }
  },
  "self_end_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-self": "flex-end"
    }
  },
  "self_center_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-self": "center"
    }
  },
  "self_baseline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-self": "baseline"
    }
  },
  "self_stretch_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-self": "stretch"
    }
  },
  "justify_start_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "justify-content": "flex-start"
    }
  },
  "justify_end_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "justify-content": "flex-end"
    }
  },
  "justify_center_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "justify-content": "center"
    }
  },
  "justify_between_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "justify-content": "space-between"
    }
  },
  "justify_around_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "justify-content": "space-around"
    }
  },
  "content_start_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-content": "flex-start"
    }
  },
  "content_end_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-content": "flex-end"
    }
  },
  "content_center_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-content": "center"
    }
  },
  "content_between_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-content": "space-between"
    }
  },
  "content_around_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-content": "space-around"
    }
  },
  "content_stretch_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "align-content": "stretch"
    }
  },
  "order_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "0"
    }
  },
  "order_1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "1"
    }
  },
  "order_2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "2"
    }
  },
  "order_3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "3"
    }
  },
  "order_4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "4"
    }
  },
  "order_5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "5"
    }
  },
  "order_6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "6"
    }
  },
  "order_7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "7"
    }
  },
  "order_8_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "8"
    }
  },
  "order_last_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "order": "99999"
    }
  },
  "fl_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "float": "left",
      "_display": "inline"
    }
  },
  "fr_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "float": "right",
      "_display": "inline"
    }
  },
  "fn_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "float": "none"
    }
  },
  "i_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-style": "italic"
    }
  },
  "fs_normal_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-style": "normal"
    }
  },
  "normal_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "normal"
    }
  },
  "b_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "bold"
    }
  },
  "fw1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "100"
    }
  },
  "fw2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "200"
    }
  },
  "fw3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "300"
    }
  },
  "fw4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "400"
    }
  },
  "fw5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "500"
    }
  },
  "fw6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "600"
    }
  },
  "fw7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "700"
    }
  },
  "fw8_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "800"
    }
  },
  "fw9_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-weight": "900"
    }
  },
  "h1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "1rem"
    }
  },
  "h2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "2rem"
    }
  },
  "h3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "4rem"
    }
  },
  "h4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "8rem"
    }
  },
  "h5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "16rem"
    }
  },
  "h_25_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "25%"
    }
  },
  "h_50_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "50%"
    }
  },
  "h_75_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "75%"
    }
  },
  "h_100_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "100%"
    }
  },
  "vh_25_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "25vh"
    }
  },
  "vh_50_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "50vh"
    }
  },
  "vh_75_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "75vh"
    }
  },
  "vh_100_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "100vh"
    }
  },
  "min_vh_100_m": {
    "@media screen and (min-width: 60em)": {
      "min-height": "100vh"
    }
  },
  "h_auto_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "auto"
    }
  },
  "h_inherit_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "height": "inherit"
    }
  },
  "tracked_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "letter-spacing": ".1em"
    }
  },
  "tracked_tight_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "letter-spacing": "-.05em"
    }
  },
  "tracked_mega_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "letter-spacing": ".25em"
    }
  },
  "lh_solid_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "line-height": "1"
    }
  },
  "lh_title_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "line-height": "1.25"
    }
  },
  "lh_copy_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "line-height": "1.5"
    }
  },
  "mw_100_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "100%"
    }
  },
  "mw1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "1rem"
    }
  },
  "mw2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "2rem"
    }
  },
  "mw3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "4rem"
    }
  },
  "mw4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "8rem"
    }
  },
  "mw5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "16rem"
    }
  },
  "mw6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "32rem"
    }
  },
  "mw7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "48rem"
    }
  },
  "mw8_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "64rem"
    }
  },
  "mw9_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "96rem"
    }
  },
  "mw_none_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "none"
    }
  },
  "outline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "outline": "1px solid"
    }
  },
  "outline_transparent_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "outline": "1px solid transparent"
    }
  },
  "outline_0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "outline": "0"
    }
  },
  "outline_l": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "outline": "1px solid"
    }
  },
  "outline_transparent_l": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "outline": "1px solid transparent"
    }
  },
  "outline_0_l": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "outline": "0"
    }
  },
  "overflow_visible_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow": "visible"
    }
  },
  "overflow_hidden_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow": "hidden"
    }
  },
  "overflow_scroll_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow": "scroll"
    }
  },
  "overflow_auto_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow": "auto"
    }
  },
  "overflow_x_visible_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-x": "visible"
    }
  },
  "overflow_x_hidden_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-x": "hidden"
    }
  },
  "overflow_x_scroll_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-x": "scroll"
    }
  },
  "overflow_x_auto_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-x": "auto"
    }
  },
  "overflow_y_visible_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-y": "visible"
    }
  },
  "overflow_y_hidden_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-y": "hidden"
    }
  },
  "overflow_y_scroll_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-y": "scroll"
    }
  },
  "overflow_y_auto_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "overflow-y": "auto"
    }
  },
  "static_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "position": "static"
    }
  },
  "relative_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "position": "relative"
    }
  },
  "absolute_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "position": "absolute"
    }
  },
  "fixed_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "position": "fixed"
    }
  },
  "rotate_45_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(45deg)"
    }
  },
  "rotate_90_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(90deg)"
    }
  },
  "rotate_135_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(135deg)"
    }
  },
  "rotate_180_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(180deg)"
    }
  },
  "rotate_225_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(225deg)"
    }
  },
  "rotate_270_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(270deg)"
    }
  },
  "rotate_315_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "transform": "rotate(315deg)"
    }
  },
  "pa0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-none)"
    }
  },
  "pa1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-extra-small)"
    }
  },
  "pa2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-small)"
    }
  },
  "pa3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-medium)"
    }
  },
  "pa4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-large)"
    }
  },
  "pa5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-extra-large)"
    }
  },
  "pa6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-extra-extra-large)"
    }
  },
  "pa7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pl0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-none)"
    }
  },
  "pl1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-small)"
    }
  },
  "pl2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-small)"
    }
  },
  "pl3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-medium)"
    }
  },
  "pl4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-large)"
    }
  },
  "pl5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-large)"
    }
  },
  "pl6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-large)"
    }
  },
  "pl7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pr0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-none)"
    }
  },
  "pr1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-extra-small)"
    }
  },
  "pr2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-small)"
    }
  },
  "pr3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-medium)"
    }
  },
  "pr4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-large)"
    }
  },
  "pr5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-extra-large)"
    }
  },
  "pr6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-extra-extra-large)"
    }
  },
  "pr7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pb0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-none)"
    }
  },
  "pb1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-small)"
    }
  },
  "pb2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-small)"
    }
  },
  "pb3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-medium)"
    }
  },
  "pb4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-large)"
    }
  },
  "pb5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-large)"
    }
  },
  "pb6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "pb7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pt0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-none)"
    }
  },
  "pt1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-small)"
    }
  },
  "pt2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-small)"
    }
  },
  "pt3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-medium)"
    }
  },
  "pt4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-large)"
    }
  },
  "pt5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-large)"
    }
  },
  "pt6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-large)"
    }
  },
  "pt7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pv0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-none)",
      "padding-bottom": "var(--spacing-none)"
    }
  },
  "pv1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-small)",
      "padding-bottom": "var(--spacing-extra-small)"
    }
  },
  "pv2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-small)",
      "padding-bottom": "var(--spacing-small)"
    }
  },
  "pv3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-medium)",
      "padding-bottom": "var(--spacing-medium)"
    }
  },
  "pv4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-large)",
      "padding-bottom": "var(--spacing-large)"
    }
  },
  "pv5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-large)",
      "padding-bottom": "var(--spacing-extra-large)"
    }
  },
  "pv6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-large)",
      "padding-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "pv7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-extra-large)",
      "padding-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ph0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-none)",
      "padding-right": "var(--spacing-none)"
    }
  },
  "ph1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-small)",
      "padding-right": "var(--spacing-extra-small)"
    }
  },
  "ph2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-small)",
      "padding-right": "var(--spacing-small)"
    }
  },
  "ph3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-medium)",
      "padding-right": "var(--spacing-medium)"
    }
  },
  "ph4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-large)",
      "padding-right": "var(--spacing-large)"
    }
  },
  "ph5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-large)",
      "padding-right": "var(--spacing-extra-large)"
    }
  },
  "ph6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-large)",
      "padding-right": "var(--spacing-extra-extra-large)"
    }
  },
  "ph7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-extra-large)",
      "padding-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ma0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-none)"
    }
  },
  "ma1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-extra-small)"
    }
  },
  "ma2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-small)"
    }
  },
  "ma3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-medium)"
    }
  },
  "ma4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-large)"
    }
  },
  "ma5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-extra-large)"
    }
  },
  "ma6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-extra-extra-large)"
    }
  },
  "ma7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ml0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-none)"
    }
  },
  "ml1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-small)"
    }
  },
  "ml2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-small)"
    }
  },
  "ml3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-medium)"
    }
  },
  "ml4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-large)"
    }
  },
  "ml5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-large)"
    }
  },
  "ml6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-large)"
    }
  },
  "ml7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mr0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-none)"
    }
  },
  "mr1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-extra-small)"
    }
  },
  "mr2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-small)"
    }
  },
  "mr3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-medium)"
    }
  },
  "mr4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-large)"
    }
  },
  "mr5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-extra-large)"
    }
  },
  "mr6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-extra-extra-large)"
    }
  },
  "mr7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mb0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-none)"
    }
  },
  "mb1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-small)"
    }
  },
  "mb2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-small)"
    }
  },
  "mb3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-medium)"
    }
  },
  "mb4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-large)"
    }
  },
  "mb5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-large)"
    }
  },
  "mb6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "mb7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mt0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-none)"
    }
  },
  "mt1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-small)"
    }
  },
  "mt2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-small)"
    }
  },
  "mt3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-medium)"
    }
  },
  "mt4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-large)"
    }
  },
  "mt5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-large)"
    }
  },
  "mt6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-large)"
    }
  },
  "mt7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mv0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-none)",
      "margin-bottom": "var(--spacing-none)"
    }
  },
  "mv1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-small)",
      "margin-bottom": "var(--spacing-extra-small)"
    }
  },
  "mv2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-small)",
      "margin-bottom": "var(--spacing-small)"
    }
  },
  "mv3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-medium)",
      "margin-bottom": "var(--spacing-medium)"
    }
  },
  "mv4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-large)",
      "margin-bottom": "var(--spacing-large)"
    }
  },
  "mv5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-large)",
      "margin-bottom": "var(--spacing-extra-large)"
    }
  },
  "mv6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-large)",
      "margin-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "mv7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-extra-large)",
      "margin-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mh0_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-none)",
      "margin-right": "var(--spacing-none)"
    }
  },
  "mh1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-small)",
      "margin-right": "var(--spacing-extra-small)"
    }
  },
  "mh2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-small)",
      "margin-right": "var(--spacing-small)"
    }
  },
  "mh3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-medium)",
      "margin-right": "var(--spacing-medium)"
    }
  },
  "mh4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-large)",
      "margin-right": "var(--spacing-large)"
    }
  },
  "mh5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-large)",
      "margin-right": "var(--spacing-extra-large)"
    }
  },
  "mh6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-large)",
      "margin-right": "var(--spacing-extra-extra-large)"
    }
  },
  "mh7_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-extra-large)",
      "margin-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "tl_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-align": "left"
    }
  },
  "tr_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-align": "right"
    }
  },
  "tc_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-align": "center"
    }
  },
  "strike_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-decoration": "line-through"
    }
  },
  "underline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-decoration": "underline"
    }
  },
  "no_underline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-decoration": "none"
    }
  },
  "ttc_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-transform": "capitalize"
    }
  },
  "ttl_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-transform": "lowercase"
    }
  },
  "ttu_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-transform": "uppercase"
    }
  },
  "ttn_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-transform": "none"
    }
  },
  "f_6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "6rem"
    }
  },
  "f_headline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "6rem"
    }
  },
  "f_5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "5rem"
    }
  },
  "f_subheadline_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "5rem"
    }
  },
  "f1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "3rem"
    }
  },
  "f2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "2.25rem"
    }
  },
  "f3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "1.5rem"
    }
  },
  "f4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "1.25rem"
    }
  },
  "f5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": "1rem"
    }
  },
  "f6_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-size": ".875rem"
    }
  },
  "measure_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "30em"
    }
  },
  "measure_wide_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "34em"
    }
  },
  "measure_narrow_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "max-width": "20em"
    }
  },
  "indent_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "text-indent": "1em",
      "margin-top": "0",
      "margin-bottom": "0"
    }
  },
  "small_caps_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "font-variant": "small-caps"
    }
  },
  "truncate_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "white-space": "nowrap",
      "overflow": "hidden",
      "text-overflow": "ellipsis"
    }
  },
  "v_base_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "vertical-align": "baseline"
    }
  },
  "v_mid_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "vertical-align": "middle"
    }
  },
  "v_top_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "vertical-align": "top"
    }
  },
  "v_btm_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "vertical-align": "bottom"
    }
  },
  "clip_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "position": "fixed !important",
      "_position": "absolute !important",
      "clip": "rect(1px, 1px, 1px, 1px)"
    }
  },
  "ws_normal_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "white-space": "normal"
    }
  },
  "nowrap_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "white-space": "nowrap"
    }
  },
  "pre_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "white-space": "pre"
    }
  },
  "w1_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "1rem"
    }
  },
  "w2_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "2rem"
    }
  },
  "w3_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "4rem"
    }
  },
  "w4_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "8rem"
    }
  },
  "w5_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "16rem"
    }
  },
  "w_10_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "10%"
    }
  },
  "w_20_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "20%"
    }
  },
  "w_25_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "25%"
    }
  },
  "w_30_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "30%"
    }
  },
  "w_33_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "33%"
    }
  },
  "w_34_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "34%"
    }
  },
  "w_40_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "40%"
    }
  },
  "w_50_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "50%"
    }
  },
  "w_60_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "60%"
    }
  },
  "w_70_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "70%"
    }
  },
  "w_75_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "75%"
    }
  },
  "w_80_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "80%"
    }
  },
  "w_90_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "90%"
    }
  },
  "w_100_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "100%"
    }
  },
  "w_third_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "calc(100% / 3)"
    }
  },
  "w_two_thirds_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "calc(100% / 1.5)"
    }
  },
  "w_auto_m": {
    "@media screen and (min-width: 30em) and (max-width: 60em)": {
      "width": "auto"
    }
  },
  "aspect_ratio_l": {
    "@media screen and (min-width: 60em)": {
      "height": "0",
      "position": "relative"
    }
  },
  "aspect_ratio__16x9_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "56.25%"
    }
  },
  "aspect_ratio__9x16_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "177.77%"
    }
  },
  "aspect_ratio__4x3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "75%"
    }
  },
  "aspect_ratio__3x4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "133.33%"
    }
  },
  "aspect_ratio__6x4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "66.6%"
    }
  },
  "aspect_ratio__4x6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "150%"
    }
  },
  "aspect_ratio__8x5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "62.5%"
    }
  },
  "aspect_ratio__5x8_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "160%"
    }
  },
  "aspect_ratio__7x5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "71.42%"
    }
  },
  "aspect_ratio__5x7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "140%"
    }
  },
  "aspect_ratio__1x1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "100%"
    }
  },
  "aspect_ratio__object_l": {
    "@media screen and (min-width: 60em)": {
      "position": "absolute",
      "top": "0",
      "right": "0",
      "bottom": "0",
      "left": "0",
      "width": "100%",
      "height": "100%",
      "z-index": "100"
    }
  },
  "bg_center_l": {
    "@media screen and (min-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "center center"
    }
  },
  "bg_top_l": {
    "@media screen and (min-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "top center"
    }
  },
  "bg_right_l": {
    "@media screen and (min-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "center right"
    }
  },
  "bg_bottom_l": {
    "@media screen and (min-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "bottom center"
    }
  },
  "bg_left_l": {
    "@media screen and (min-width: 60em)": {
      "background-repeat": "no-repeat",
      "background-position": "center left"
    }
  },
  "cover_l": {
    "@media screen and (min-width: 60em)": {
      "background-size": "cover"
    }
  },
  "contain_l": {
    "@media screen and (min-width: 60em)": {
      "background-size": "contain"
    }
  },
  "br0_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": "0"
    }
  },
  "br1_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": ".125rem"
    }
  },
  "br2_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": ".25rem"
    }
  },
  "br3_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": ".5rem"
    }
  },
  "br4_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": "1rem"
    }
  },
  "br_100_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": "100%"
    }
  },
  "br_pill_l": {
    "@media screen and (min-width: 60em)": {
      "border-radius": "9999px"
    }
  },
  "br__bottom_l": {
    "@media screen and (min-width: 60em)": {
      "border-top-left-radius": "0",
      "border-top-right-radius": "0"
    }
  },
  "br__top_l": {
    "@media screen and (min-width: 60em)": {
      "border-bottom-left-radius": "0",
      "border-bottom-right-radius": "0"
    }
  },
  "br__right_l": {
    "@media screen and (min-width: 60em)": {
      "border-top-left-radius": "0",
      "border-bottom-left-radius": "0"
    }
  },
  "br__left_l": {
    "@media screen and (min-width: 60em)": {
      "border-top-right-radius": "0",
      "border-bottom-right-radius": "0"
    }
  },
  "b__dotted_l": {
    "@media screen and (min-width: 60em)": {
      "border-style": "dotted"
    }
  },
  "b__dashed_l": {
    "@media screen and (min-width: 60em)": {
      "border-style": "dashed"
    }
  },
  "b__solid_l": {
    "@media screen and (min-width: 60em)": {
      "border-style": "solid"
    }
  },
  "b__none_l": {
    "@media screen and (min-width: 60em)": {
      "border-style": "none"
    }
  },
  "bw0_l": {
    "@media screen and (min-width: 60em)": {
      "border-width": "0"
    }
  },
  "bw1_l": {
    "@media screen and (min-width: 60em)": {
      "border-width": ".125rem"
    }
  },
  "bw2_l": {
    "@media screen and (min-width: 60em)": {
      "border-width": ".25rem"
    }
  },
  "bw3_l": {
    "@media screen and (min-width: 60em)": {
      "border-width": ".5rem"
    }
  },
  "bw4_l": {
    "@media screen and (min-width: 60em)": {
      "border-width": "1rem"
    }
  },
  "bw5_l": {
    "@media screen and (min-width: 60em)": {
      "border-width": "2rem"
    }
  },
  "bt_0_l": {
    "@media screen and (min-width: 60em)": {
      "border-top-width": "0"
    }
  },
  "br_0_l": {
    "@media screen and (min-width: 60em)": {
      "border-right-width": "0"
    }
  },
  "bb_0_l": {
    "@media screen and (min-width: 60em)": {
      "border-bottom-width": "0"
    }
  },
  "bl_0_l": {
    "@media screen and (min-width: 60em)": {
      "border-left-width": "0"
    }
  },
  "ba_l": {
    "@media screen and (min-width: 60em)": {
      "border-style": "solid",
      "border-width": "1px"
    }
  },
  "bt_l": {
    "@media screen and (min-width: 60em)": {
      "border-top-style": "solid",
      "border-top-width": "1px"
    }
  },
  "br_l": {
    "@media screen and (min-width: 60em)": {
      "border-right-style": "solid",
      "border-right-width": "1px"
    }
  },
  "bb_l": {
    "@media screen and (min-width: 60em)": {
      "border-bottom-style": "solid",
      "border-bottom-width": "1px"
    }
  },
  "bl_l": {
    "@media screen and (min-width: 60em)": {
      "border-left-style": "solid",
      "border-left-width": "1px"
    }
  },
  "bn_l": {
    "@media screen and (min-width: 60em)": {
      "border-style": "none",
      "border-width": "0"
    }
  },
  "shadow_1_l": {
    "@media screen and (min-width: 60em)": {
      "box-shadow": "0px 0px 4px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_2_l": {
    "@media screen and (min-width: 60em)": {
      "box-shadow": "0px 0px 8px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_3_l": {
    "@media screen and (min-width: 60em)": {
      "box-shadow": "2px 2px 4px 2px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_4_l": {
    "@media screen and (min-width: 60em)": {
      "box-shadow": "2px 2px 8px 0px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "shadow_5_l": {
    "@media screen and (min-width: 60em)": {
      "box-shadow": "4px 4px 8px 0px rgba( 0, 0, 0, 0.2 )"
    }
  },
  "cl_l": {
    "@media screen and (min-width: 60em)": {
      "clear": "left"
    }
  },
  "cr_l": {
    "@media screen and (min-width: 60em)": {
      "clear": "right"
    }
  },
  "cb_l": {
    "@media screen and (min-width: 60em)": {
      "clear": "both"
    }
  },
  "cn_l": {
    "@media screen and (min-width: 60em)": {
      "clear": "none"
    }
  },
  "top_0_l": {
    "@media screen and (min-width: 60em)": {
      "top": "0"
    }
  },
  "left_0_l": {
    "@media screen and (min-width: 60em)": {
      "left": "0"
    }
  },
  "right_0_l": {
    "@media screen and (min-width: 60em)": {
      "right": "0"
    }
  },
  "bottom_0_l": {
    "@media screen and (min-width: 60em)": {
      "bottom": "0"
    }
  },
  "top_1_l": {
    "@media screen and (min-width: 60em)": {
      "top": "1rem"
    }
  },
  "left_1_l": {
    "@media screen and (min-width: 60em)": {
      "left": "1rem"
    }
  },
  "right_1_l": {
    "@media screen and (min-width: 60em)": {
      "right": "1rem"
    }
  },
  "bottom_1_l": {
    "@media screen and (min-width: 60em)": {
      "bottom": "1rem"
    }
  },
  "top_2_l": {
    "@media screen and (min-width: 60em)": {
      "top": "2rem"
    }
  },
  "left_2_l": {
    "@media screen and (min-width: 60em)": {
      "left": "2rem"
    }
  },
  "right_2_l": {
    "@media screen and (min-width: 60em)": {
      "right": "2rem"
    }
  },
  "bottom_2_l": {
    "@media screen and (min-width: 60em)": {
      "bottom": "2rem"
    }
  },
  "top__1_l": {
    "@media screen and (min-width: 60em)": {
      "top": "-1rem"
    }
  },
  "right__1_l": {
    "@media screen and (min-width: 60em)": {
      "right": "-1rem"
    }
  },
  "bottom__1_l": {
    "@media screen and (min-width: 60em)": {
      "bottom": "-1rem"
    }
  },
  "left__1_l": {
    "@media screen and (min-width: 60em)": {
      "left": "-1rem"
    }
  },
  "top__2_l": {
    "@media screen and (min-width: 60em)": {
      "top": "-2rem"
    }
  },
  "right__2_l": {
    "@media screen and (min-width: 60em)": {
      "right": "-2rem"
    }
  },
  "bottom__2_l": {
    "@media screen and (min-width: 60em)": {
      "bottom": "-2rem"
    }
  },
  "left__2_l": {
    "@media screen and (min-width: 60em)": {
      "left": "-2rem"
    }
  },
  "absolute__fill_l": {
    "@media screen and (min-width: 60em)": {
      "top": "0",
      "right": "0",
      "bottom": "0",
      "left": "0"
    }
  },
  "dn_l": {
    "@media screen and (min-width: 60em)": {
      "display": "none"
    }
  },
  "di_l": {
    "@media screen and (min-width: 60em)": {
      "display": "inline"
    }
  },
  "db_l": {
    "@media screen and (min-width: 60em)": {
      "display": "block"
    }
  },
  "dib_l": {
    "@media screen and (min-width: 60em)": {
      "display": "inline-block"
    }
  },
  "dit_l": {
    "@media screen and (min-width: 60em)": {
      "display": "inline-table"
    }
  },
  "dt_l": {
    "@media screen and (min-width: 60em)": {
      "display": "table"
    }
  },
  "dtc_l": {
    "@media screen and (min-width: 60em)": {
      "display": "table-cell"
    }
  },
  "dt_row_l": {
    "@media screen and (min-width: 60em)": {
      "display": "table-row"
    }
  },
  "dt_row_group_l": {
    "@media screen and (min-width: 60em)": {
      "display": "table-row-group"
    }
  },
  "dt_column_l": {
    "@media screen and (min-width: 60em)": {
      "display": "table-column"
    }
  },
  "dt_column_group_l": {
    "@media screen and (min-width: 60em)": {
      "display": "table-column-group"
    }
  },
  "dt__fixed_l": {
    "@media screen and (min-width: 60em)": {
      "table-layout": "fixed",
      "width": "100%"
    }
  },
  "flex_l": {
    "@media screen and (min-width: 60em)": {
      "display": "flex"
    }
  },
  "inline_flex_l": {
    "@media screen and (min-width: 60em)": {
      "display": "inline-flex"
    }
  },
  "flex_auto_l": {
    "@media screen and (min-width: 60em)": {
      "flex": "1 1 auto",
      "min-width": "0",
      "min-height": "0"
    }
  },
  "flex_none_l": {
    "@media screen and (min-width: 60em)": {
      "flex": "none"
    }
  },
  "flex_column_l": {
    "@media screen and (min-width: 60em)": {
      "flex-direction": "column"
    }
  },
  "flex_row_l": {
    "@media screen and (min-width: 60em)": {
      "flex-direction": "row"
    }
  },
  "flex_wrap_l": {
    "@media screen and (min-width: 60em)": {
      "flex-wrap": "wrap"
    }
  },
  "items_start_l": {
    "@media screen and (min-width: 60em)": {
      "align-items": "flex-start"
    }
  },
  "items_end_l": {
    "@media screen and (min-width: 60em)": {
      "align-items": "flex-end"
    }
  },
  "items_center_l": {
    "@media screen and (min-width: 60em)": {
      "align-items": "center"
    }
  },
  "items_baseline_l": {
    "@media screen and (min-width: 60em)": {
      "align-items": "baseline"
    }
  },
  "items_stretch_l": {
    "@media screen and (min-width: 60em)": {
      "align-items": "stretch"
    }
  },
  "self_start_l": {
    "@media screen and (min-width: 60em)": {
      "align-self": "flex-start"
    }
  },
  "self_end_l": {
    "@media screen and (min-width: 60em)": {
      "align-self": "flex-end"
    }
  },
  "self_center_l": {
    "@media screen and (min-width: 60em)": {
      "align-self": "center"
    }
  },
  "self_baseline_l": {
    "@media screen and (min-width: 60em)": {
      "align-self": "baseline"
    }
  },
  "self_stretch_l": {
    "@media screen and (min-width: 60em)": {
      "align-self": "stretch"
    }
  },
  "justify_start_l": {
    "@media screen and (min-width: 60em)": {
      "justify-content": "flex-start"
    }
  },
  "justify_end_l": {
    "@media screen and (min-width: 60em)": {
      "justify-content": "flex-end"
    }
  },
  "justify_center_l": {
    "@media screen and (min-width: 60em)": {
      "justify-content": "center"
    }
  },
  "justify_between_l": {
    "@media screen and (min-width: 60em)": {
      "justify-content": "space-between"
    }
  },
  "justify_around_l": {
    "@media screen and (min-width: 60em)": {
      "justify-content": "space-around"
    }
  },
  "content_start_l": {
    "@media screen and (min-width: 60em)": {
      "align-content": "flex-start"
    }
  },
  "content_end_l": {
    "@media screen and (min-width: 60em)": {
      "align-content": "flex-end"
    }
  },
  "content_center_l": {
    "@media screen and (min-width: 60em)": {
      "align-content": "center"
    }
  },
  "content_between_l": {
    "@media screen and (min-width: 60em)": {
      "align-content": "space-between"
    }
  },
  "content_around_l": {
    "@media screen and (min-width: 60em)": {
      "align-content": "space-around"
    }
  },
  "content_stretch_l": {
    "@media screen and (min-width: 60em)": {
      "align-content": "stretch"
    }
  },
  "order_0_l": {
    "@media screen and (min-width: 60em)": {
      "order": "0"
    }
  },
  "order_1_l": {
    "@media screen and (min-width: 60em)": {
      "order": "1"
    }
  },
  "order_2_l": {
    "@media screen and (min-width: 60em)": {
      "order": "2"
    }
  },
  "order_3_l": {
    "@media screen and (min-width: 60em)": {
      "order": "3"
    }
  },
  "order_4_l": {
    "@media screen and (min-width: 60em)": {
      "order": "4"
    }
  },
  "order_5_l": {
    "@media screen and (min-width: 60em)": {
      "order": "5"
    }
  },
  "order_6_l": {
    "@media screen and (min-width: 60em)": {
      "order": "6"
    }
  },
  "order_7_l": {
    "@media screen and (min-width: 60em)": {
      "order": "7"
    }
  },
  "order_8_l": {
    "@media screen and (min-width: 60em)": {
      "order": "8"
    }
  },
  "order_last_l": {
    "@media screen and (min-width: 60em)": {
      "order": "99999"
    }
  },
  "fl_l": {
    "@media screen and (min-width: 60em)": {
      "float": "left",
      "_display": "inline"
    }
  },
  "fr_l": {
    "@media screen and (min-width: 60em)": {
      "float": "right",
      "_display": "inline"
    }
  },
  "fn_l": {
    "@media screen and (min-width: 60em)": {
      "float": "none"
    }
  },
  "i_l": {
    "@media screen and (min-width: 60em)": {
      "font-style": "italic"
    }
  },
  "fs_normal_l": {
    "@media screen and (min-width: 60em)": {
      "font-style": "normal"
    }
  },
  "normal_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "normal"
    }
  },
  "b_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "bold"
    }
  },
  "fw1_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "100"
    }
  },
  "fw2_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "200"
    }
  },
  "fw3_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "300"
    }
  },
  "fw4_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "400"
    }
  },
  "fw5_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "500"
    }
  },
  "fw6_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "600"
    }
  },
  "fw7_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "700"
    }
  },
  "fw8_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "800"
    }
  },
  "fw9_l": {
    "@media screen and (min-width: 60em)": {
      "font-weight": "900"
    }
  },
  "h1_l": {
    "@media screen and (min-width: 60em)": {
      "height": "1rem"
    }
  },
  "h2_l": {
    "@media screen and (min-width: 60em)": {
      "height": "2rem"
    }
  },
  "h3_l": {
    "@media screen and (min-width: 60em)": {
      "height": "4rem"
    }
  },
  "h4_l": {
    "@media screen and (min-width: 60em)": {
      "height": "8rem"
    }
  },
  "h5_l": {
    "@media screen and (min-width: 60em)": {
      "height": "16rem"
    }
  },
  "h_25_l": {
    "@media screen and (min-width: 60em)": {
      "height": "25%"
    }
  },
  "h_50_l": {
    "@media screen and (min-width: 60em)": {
      "height": "50%"
    }
  },
  "h_75_l": {
    "@media screen and (min-width: 60em)": {
      "height": "75%"
    }
  },
  "h_100_l": {
    "@media screen and (min-width: 60em)": {
      "height": "100%"
    }
  },
  "min_h_100_l": {
    "@media screen and (min-width: 60em)": {
      "min-height": "100%"
    }
  },
  "vh_25_l": {
    "@media screen and (min-width: 60em)": {
      "height": "25vh"
    }
  },
  "vh_50_l": {
    "@media screen and (min-width: 60em)": {
      "height": "50vh"
    }
  },
  "vh_75_l": {
    "@media screen and (min-width: 60em)": {
      "height": "75vh"
    }
  },
  "vh_100_l": {
    "@media screen and (min-width: 60em)": {
      "height": "100vh"
    }
  },
  "h_auto_l": {
    "@media screen and (min-width: 60em)": {
      "height": "auto"
    }
  },
  "h_inherit_l": {
    "@media screen and (min-width: 60em)": {
      "height": "inherit"
    }
  },
  "tracked_l": {
    "@media screen and (min-width: 60em)": {
      "letter-spacing": ".1em"
    }
  },
  "tracked_tight_l": {
    "@media screen and (min-width: 60em)": {
      "letter-spacing": "-.05em"
    }
  },
  "tracked_mega_l": {
    "@media screen and (min-width: 60em)": {
      "letter-spacing": ".25em"
    }
  },
  "lh_solid_l": {
    "@media screen and (min-width: 60em)": {
      "line-height": "1"
    }
  },
  "lh_title_l": {
    "@media screen and (min-width: 60em)": {
      "line-height": "1.25"
    }
  },
  "lh_copy_l": {
    "@media screen and (min-width: 60em)": {
      "line-height": "1.5"
    }
  },
  "mw_100_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "100%"
    }
  },
  "mw1_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "1rem"
    }
  },
  "mw2_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "2rem"
    }
  },
  "mw3_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "4rem"
    }
  },
  "mw4_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "8rem"
    }
  },
  "mw5_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "16rem"
    }
  },
  "mw6_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "32rem"
    }
  },
  "mw7_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "48rem"
    }
  },
  "mw8_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "64rem"
    }
  },
  "mw9_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "96rem"
    }
  },
  "mw_none_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "none"
    }
  },
  "overflow_visible_l": {
    "@media screen and (min-width: 60em)": {
      "overflow": "visible"
    }
  },
  "overflow_hidden_l": {
    "@media screen and (min-width: 60em)": {
      "overflow": "hidden"
    }
  },
  "overflow_scroll_l": {
    "@media screen and (min-width: 60em)": {
      "overflow": "scroll"
    }
  },
  "overflow_auto_l": {
    "@media screen and (min-width: 60em)": {
      "overflow": "auto"
    }
  },
  "overflow_x_visible_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-x": "visible"
    }
  },
  "overflow_x_hidden_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-x": "hidden"
    }
  },
  "overflow_x_scroll_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-x": "scroll"
    }
  },
  "overflow_x_auto_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-x": "auto"
    }
  },
  "overflow_y_visible_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-y": "visible"
    }
  },
  "overflow_y_hidden_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-y": "hidden"
    }
  },
  "overflow_y_scroll_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-y": "scroll"
    }
  },
  "overflow_y_auto_l": {
    "@media screen and (min-width: 60em)": {
      "overflow-y": "auto"
    }
  },
  "static_l": {
    "@media screen and (min-width: 60em)": {
      "position": "static"
    }
  },
  "relative_l": {
    "@media screen and (min-width: 60em)": {
      "position": "relative"
    }
  },
  "absolute_l": {
    "@media screen and (min-width: 60em)": {
      "position": "absolute"
    }
  },
  "fixed_l": {
    "@media screen and (min-width: 60em)": {
      "position": "fixed"
    }
  },
  "rotate_45_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(45deg)"
    }
  },
  "rotate_90_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(90deg)"
    }
  },
  "rotate_135_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(135deg)"
    }
  },
  "rotate_180_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(180deg)"
    }
  },
  "rotate_225_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(225deg)"
    }
  },
  "rotate_270_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(270deg)"
    }
  },
  "rotate_315_l": {
    "@media screen and (min-width: 60em)": {
      "transform": "rotate(315deg)"
    }
  },
  "pa0_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-none)"
    }
  },
  "pa1_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-extra-small)"
    }
  },
  "pa2_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-small)"
    }
  },
  "pa3_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-medium)"
    }
  },
  "pa4_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-large)"
    }
  },
  "pa5_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-extra-large)"
    }
  },
  "pa6_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-extra-extra-large)"
    }
  },
  "pa7_l": {
    "@media screen and (min-width: 60em)": {
      "padding": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pl0_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-none)"
    }
  },
  "pl1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-small)"
    }
  },
  "pl2_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-small)"
    }
  },
  "pl3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-medium)"
    }
  },
  "pl4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-large)"
    }
  },
  "pl5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-large)"
    }
  },
  "pl6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-large)"
    }
  },
  "pl7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pr0_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-none)"
    }
  },
  "pr1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-extra-small)"
    }
  },
  "pr2_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-small)"
    }
  },
  "pr3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-medium)"
    }
  },
  "pr4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-large)"
    }
  },
  "pr5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-extra-large)"
    }
  },
  "pr6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-extra-extra-large)"
    }
  },
  "pr7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pb0_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-none)"
    }
  },
  "pb1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-small)"
    }
  },
  "pb2_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-small)"
    }
  },
  "pb3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-medium)"
    }
  },
  "pb4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-large)"
    }
  },
  "pb5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-large)"
    }
  },
  "pb6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "pb7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pt0_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-none)"
    }
  },
  "pt1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-small)"
    }
  },
  "pt2_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-small)"
    }
  },
  "pt3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-medium)"
    }
  },
  "pt4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-large)"
    }
  },
  "pt5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-large)"
    }
  },
  "pt6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-large)"
    }
  },
  "pt7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "pv0_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-none)",
      "padding-bottom": "var(--spacing-none)"
    }
  },
  "pv1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-small)",
      "padding-bottom": "var(--spacing-extra-small)"
    }
  },
  "pv2_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-small)",
      "padding-bottom": "var(--spacing-small)"
    }
  },
  "pv3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-medium)",
      "padding-bottom": "var(--spacing-medium)"
    }
  },
  "pv4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-large)",
      "padding-bottom": "var(--spacing-large)"
    }
  },
  "pv5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-large)",
      "padding-bottom": "var(--spacing-extra-large)"
    }
  },
  "pv6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-large)",
      "padding-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "pv7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-top": "var(--spacing-extra-extra-extra-large)",
      "padding-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ph0_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-none)",
      "padding-right": "var(--spacing-none)"
    }
  },
  "ph1_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-small)",
      "padding-right": "var(--spacing-extra-small)"
    }
  },
  "ph2_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-small)",
      "padding-right": "var(--spacing-small)"
    }
  },
  "ph3_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-medium)",
      "padding-right": "var(--spacing-medium)"
    }
  },
  "ph4_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-large)",
      "padding-right": "var(--spacing-large)"
    }
  },
  "ph5_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-large)",
      "padding-right": "var(--spacing-extra-large)"
    }
  },
  "ph6_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-large)",
      "padding-right": "var(--spacing-extra-extra-large)"
    }
  },
  "ph7_l": {
    "@media screen and (min-width: 60em)": {
      "padding-left": "var(--spacing-extra-extra-extra-large)",
      "padding-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ma0_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-none)"
    }
  },
  "ma1_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-extra-small)"
    }
  },
  "ma2_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-small)"
    }
  },
  "ma3_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-medium)"
    }
  },
  "ma4_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-large)"
    }
  },
  "ma5_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-extra-large)"
    }
  },
  "ma6_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-extra-extra-large)"
    }
  },
  "ma7_l": {
    "@media screen and (min-width: 60em)": {
      "margin": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "ml0_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-none)"
    }
  },
  "ml1_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-small)"
    }
  },
  "ml2_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-small)"
    }
  },
  "ml3_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-medium)"
    }
  },
  "ml4_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-large)"
    }
  },
  "ml5_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-large)"
    }
  },
  "ml6_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-large)"
    }
  },
  "ml7_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mr0_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-none)"
    }
  },
  "mr1_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-extra-small)"
    }
  },
  "mr2_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-small)"
    }
  },
  "mr3_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-medium)"
    }
  },
  "mr4_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-large)"
    }
  },
  "mr5_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-extra-large)"
    }
  },
  "mr6_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-extra-extra-large)"
    }
  },
  "mr7_l": {
    "@media screen and (min-width: 60em)": {
      "margin-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mb0_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-none)"
    }
  },
  "mb1_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-small)"
    }
  },
  "mb2_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-small)"
    }
  },
  "mb3_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-medium)"
    }
  },
  "mb4_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-large)"
    }
  },
  "mb5_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-large)"
    }
  },
  "mb6_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "mb7_l": {
    "@media screen and (min-width: 60em)": {
      "margin-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mt0_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-none)"
    }
  },
  "mt1_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-small)"
    }
  },
  "mt2_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-small)"
    }
  },
  "mt3_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-medium)"
    }
  },
  "mt4_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-large)"
    }
  },
  "mt5_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-large)"
    }
  },
  "mt6_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-large)"
    }
  },
  "mt7_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mv0_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-none)",
      "margin-bottom": "var(--spacing-none)"
    }
  },
  "mv1_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-small)",
      "margin-bottom": "var(--spacing-extra-small)"
    }
  },
  "mv2_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-small)",
      "margin-bottom": "var(--spacing-small)"
    }
  },
  "mv3_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-medium)",
      "margin-bottom": "var(--spacing-medium)"
    }
  },
  "mv4_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-large)",
      "margin-bottom": "var(--spacing-large)"
    }
  },
  "mv5_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-large)",
      "margin-bottom": "var(--spacing-extra-large)"
    }
  },
  "mv6_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-large)",
      "margin-bottom": "var(--spacing-extra-extra-large)"
    }
  },
  "mv7_l": {
    "@media screen and (min-width: 60em)": {
      "margin-top": "var(--spacing-extra-extra-extra-large)",
      "margin-bottom": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "mh0_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-none)",
      "margin-right": "var(--spacing-none)"
    }
  },
  "mh1_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-small)",
      "margin-right": "var(--spacing-extra-small)"
    }
  },
  "mh2_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-small)",
      "margin-right": "var(--spacing-small)"
    }
  },
  "mh3_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-medium)",
      "margin-right": "var(--spacing-medium)"
    }
  },
  "mh4_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-large)",
      "margin-right": "var(--spacing-large)"
    }
  },
  "mh5_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-large)",
      "margin-right": "var(--spacing-extra-large)"
    }
  },
  "mh6_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-large)",
      "margin-right": "var(--spacing-extra-extra-large)"
    }
  },
  "mh7_l": {
    "@media screen and (min-width: 60em)": {
      "margin-left": "var(--spacing-extra-extra-extra-large)",
      "margin-right": "var(--spacing-extra-extra-extra-large)"
    }
  },
  "tl_l": {
    "@media screen and (min-width: 60em)": {
      "text-align": "left"
    }
  },
  "tr_l": {
    "@media screen and (min-width: 60em)": {
      "text-align": "right"
    }
  },
  "tc_l": {
    "@media screen and (min-width: 60em)": {
      "text-align": "center"
    }
  },
  "strike_l": {
    "@media screen and (min-width: 60em)": {
      "text-decoration": "line-through"
    }
  },
  "underline_l": {
    "@media screen and (min-width: 60em)": {
      "text-decoration": "underline"
    }
  },
  "no_underline_l": {
    "@media screen and (min-width: 60em)": {
      "text-decoration": "none"
    }
  },
  "ttc_l": {
    "@media screen and (min-width: 60em)": {
      "text-transform": "capitalize"
    }
  },
  "ttl_l": {
    "@media screen and (min-width: 60em)": {
      "text-transform": "lowercase"
    }
  },
  "ttu_l": {
    "@media screen and (min-width: 60em)": {
      "text-transform": "uppercase"
    }
  },
  "ttn_l": {
    "@media screen and (min-width: 60em)": {
      "text-transform": "none"
    }
  },
  "f_6_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "6rem"
    }
  },
  "f_headline_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "6rem"
    }
  },
  "f_5_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "5rem"
    }
  },
  "f_subheadline_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "5rem"
    }
  },
  "f1_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "3rem"
    }
  },
  "f2_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "2.25rem"
    }
  },
  "f3_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "1.5rem"
    }
  },
  "f4_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "1.25rem"
    }
  },
  "f5_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": "1rem"
    }
  },
  "f6_l": {
    "@media screen and (min-width: 60em)": {
      "font-size": ".875rem"
    }
  },
  "measure_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "30em"
    }
  },
  "measure_wide_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "34em"
    }
  },
  "measure_narrow_l": {
    "@media screen and (min-width: 60em)": {
      "max-width": "20em"
    }
  },
  "indent_l": {
    "@media screen and (min-width: 60em)": {
      "text-indent": "1em",
      "margin-top": "0",
      "margin-bottom": "0"
    }
  },
  "small_caps_l": {
    "@media screen and (min-width: 60em)": {
      "font-variant": "small-caps"
    }
  },
  "truncate_l": {
    "@media screen and (min-width: 60em)": {
      "white-space": "nowrap",
      "overflow": "hidden",
      "text-overflow": "ellipsis"
    }
  },
  "v_base_l": {
    "@media screen and (min-width: 60em)": {
      "vertical-align": "baseline"
    }
  },
  "v_mid_l": {
    "@media screen and (min-width: 60em)": {
      "vertical-align": "middle"
    }
  },
  "v_top_l": {
    "@media screen and (min-width: 60em)": {
      "vertical-align": "top"
    }
  },
  "v_btm_l": {
    "@media screen and (min-width: 60em)": {
      "vertical-align": "bottom"
    }
  },
  "clip_l": {
    "@media screen and (min-width: 60em)": {
      "position": "fixed !important",
      "_position": "absolute !important",
      "clip": "rect(1px, 1px, 1px, 1px)"
    }
  },
  "ws_normal_l": {
    "@media screen and (min-width: 60em)": {
      "white-space": "normal"
    }
  },
  "nowrap_l": {
    "@media screen and (min-width: 60em)": {
      "white-space": "nowrap"
    }
  },
  "pre_l": {
    "@media screen and (min-width: 60em)": {
      "white-space": "pre"
    }
  },
  "w1_l": {
    "@media screen and (min-width: 60em)": {
      "width": "1rem"
    }
  },
  "w2_l": {
    "@media screen and (min-width: 60em)": {
      "width": "2rem"
    }
  },
  "w3_l": {
    "@media screen and (min-width: 60em)": {
      "width": "4rem"
    }
  },
  "w4_l": {
    "@media screen and (min-width: 60em)": {
      "width": "8rem"
    }
  },
  "w5_l": {
    "@media screen and (min-width: 60em)": {
      "width": "16rem"
    }
  },
  "w_10_l": {
    "@media screen and (min-width: 60em)": {
      "width": "10%"
    }
  },
  "w_20_l": {
    "@media screen and (min-width: 60em)": {
      "width": "20%"
    }
  },
  "w_25_l": {
    "@media screen and (min-width: 60em)": {
      "width": "25%"
    }
  },
  "w_30_l": {
    "@media screen and (min-width: 60em)": {
      "width": "30%"
    }
  },
  "w_33_l": {
    "@media screen and (min-width: 60em)": {
      "width": "33%"
    }
  },
  "w_34_l": {
    "@media screen and (min-width: 60em)": {
      "width": "34%"
    }
  },
  "w_40_l": {
    "@media screen and (min-width: 60em)": {
      "width": "40%"
    }
  },
  "w_50_l": {
    "@media screen and (min-width: 60em)": {
      "width": "50%"
    }
  },
  "w_60_l": {
    "@media screen and (min-width: 60em)": {
      "width": "60%"
    }
  },
  "w_70_l": {
    "@media screen and (min-width: 60em)": {
      "width": "70%"
    }
  },
  "w_75_l": {
    "@media screen and (min-width: 60em)": {
      "width": "75%"
    }
  },
  "w_80_l": {
    "@media screen and (min-width: 60em)": {
      "width": "80%"
    }
  },
  "w_90_l": {
    "@media screen and (min-width: 60em)": {
      "width": "90%"
    }
  },
  "w_100_l": {
    "@media screen and (min-width: 60em)": {
      "width": "100%"
    }
  },
  "w_third_l": {
    "@media screen and (min-width: 60em)": {
      "width": "calc(100% / 3)"
    }
  },
  "w_two_thirds_l": {
    "@media screen and (min-width: 60em)": {
      "width": "calc(100% / 1.5)"
    }
  },
  "w_auto_l": {
    "@media screen and (min-width: 60em)": {
      "width": "auto"
    }
  },
  ":hover": {
    "transition": "color .15s ease-in"
  },
  "underline_hover": {
    ":hover": {
      "text-decoration": "underline"
    }
  },
  "pointer": {
    ":hover": {
      "cursor": "pointer"
    }
  },
  "hover_black": {
    ":hover": {
      "color": "var(--black)"
    }
  },
  "hover_near_black": {
    ":hover": {
      "color": "var(--near-black)"
    }
  },
  "hover_dark_gray": {
    ":hover": {
      "color": "var(--dark-gray)"
    }
  },
  "hover_mid_gray": {
    ":hover": {
      "color": "var(--mid-gray)"
    }
  },
  "hover_gray": {
    ":hover": {
      "color": "var(--gray)"
    }
  },
  "hover_silver": {
    ":hover": {
      "color": "var(--silver)"
    }
  },
  "hover_light_silver": {
    ":hover": {
      "color": "var(--light-silver)"
    }
  },
  "hover_moon_gray": {
    ":hover": {
      "color": "var(--moon-gray)"
    }
  },
  "hover_light_gray": {
    ":hover": {
      "color": "var(--light-gray)"
    }
  },
  "hover_near_white": {
    ":hover": {
      "color": "var(--near-white)"
    }
  },
  "hover_white": {
    ":hover": {
      "color": "var(--white)"
    }
  },
  "hover_bg_black": {
    ":hover": {
      "background-color": "var(--black)"
    }
  },
  "hover_bg_near_black": {
    ":hover": {
      "background-color": "var(--near-black)"
    }
  },
  "hover_bg_dark_gray": {
    ":hover": {
      "background-color": "var(--dark-gray)"
    }
  },
  "hover_bg_mid_gray": {
    ":hover": {
      "background-color": "var(--mid-gray)"
    }
  },
  "hover_bg_gray": {
    ":hover": {
      "background-color": "var(--gray)"
    }
  },
  "hover_bg_silver": {
    ":hover": {
      "background-color": "var(--silver)"
    }
  },
  "hover_bg_light_silver": {
    ":hover": {
      "background-color": "var(--light-silver)"
    }
  },
  "hover_bg_moon_gray": {
    ":hover": {
      "background-color": "var(--moon-gray)"
    }
  },
  "hover_bg_light_gray": {
    ":hover": {
      "background-color": "var(--light-gray)"
    }
  },
  "hover_bg_near_white": {
    ":hover": {
      "background-color": "var(--near-white)"
    }
  },
  "hover_bg_white": {
    ":hover": {
      "background-color": "var(--white)"
    }
  },
  "hover_bg_transparent": {
    ":hover": {
      "background-color": "var(--transparent)"
    }
  },
  "hover_dark_red": {
    ":hover": {
      "color": "var(--dark-red)"
    }
  },
  "hover_red": {
    ":hover": {
      "color": "var(--red)"
    }
  },
  "hover_light_red": {
    ":hover": {
      "color": "var(--light-red)"
    }
  },
  "hover_orange": {
    ":hover": {
      "color": "var(--orange)"
    }
  },
  "hover_gold": {
    ":hover": {
      "color": "var(--gold)"
    }
  },
  "hover_yellow": {
    ":hover": {
      "color": "var(--yellow)"
    }
  },
  "hover_light_yellow": {
    ":hover": {
      "color": "var(--light-yellow)"
    }
  },
  "hover_purple": {
    ":hover": {
      "color": "var(--purple)"
    }
  },
  "hover_light_purple": {
    ":hover": {
      "color": "var(--light-purple)"
    }
  },
  "hover_dark_pink": {
    ":hover": {
      "color": "var(--dark-pink)"
    }
  },
  "hover_hot_pink": {
    ":hover": {
      "color": "var(--hot-pink)"
    }
  },
  "hover_pink": {
    ":hover": {
      "color": "var(--pink)"
    }
  },
  "hover_light_pink": {
    ":hover": {
      "color": "var(--light-pink)"
    }
  },
  "hover_dark_green": {
    ":hover": {
      "color": "var(--dark-green)"
    }
  },
  "hover_green": {
    ":hover": {
      "color": "var(--green)"
    }
  },
  "hover_light_green": {
    ":hover": {
      "color": "var(--light-green)"
    }
  },
  "hover_navy": {
    ":hover": {
      "color": "var(--navy)"
    }
  },
  "hover_dark_blue": {
    ":hover": {
      "color": "var(--dark-blue)"
    }
  },
  "hover_blue": {
    ":hover": {
      "color": "var(--blue)"
    }
  },
  "hover_light_blue": {
    ":hover": {
      "color": "var(--light-blue)"
    }
  },
  "hover_lightest_blue": {
    ":hover": {
      "color": "var(--lightest-blue)"
    }
  },
  "hover_washed_blue": {
    ":hover": {
      "color": "var(--washed-blue)"
    }
  },
  "hover_washed_green": {
    ":hover": {
      "color": "var(--washed-green)"
    }
  },
  "hover_washed_yellow": {
    ":hover": {
      "color": "var(--washed-yellow)"
    }
  },
  "hover_washed_red": {
    ":hover": {
      "color": "var(--washed-red)"
    }
  },
  "hover_bg_dark_red": {
    ":hover": {
      "background-color": "var(--dark-red)"
    }
  },
  "hover_bg_red": {
    ":hover": {
      "background-color": "var(--red)"
    }
  },
  "hover_bg_light_red": {
    ":hover": {
      "background-color": "var(--light-red)"
    }
  },
  "hover_bg_orange": {
    ":hover": {
      "background-color": "var(--orange)"
    }
  },
  "hover_bg_gold": {
    ":hover": {
      "background-color": "var(--gold)"
    }
  },
  "hover_bg_yellow": {
    ":hover": {
      "background-color": "var(--yellow)"
    }
  },
  "hover_bg_light_yellow": {
    ":hover": {
      "background-color": "var(--light-yellow)"
    }
  },
  "hover_bg_purple": {
    ":hover": {
      "background-color": "var(--purple)"
    }
  },
  "hover_bg_light_purple": {
    ":hover": {
      "background-color": "var(--light-purple)"
    }
  },
  "hover_bg_dark_pink": {
    ":hover": {
      "background-color": "var(--dark-pink)"
    }
  },
  "hover_bg_hot_pink": {
    ":hover": {
      "background-color": "var(--hot-pink)"
    }
  },
  "hover_bg_pink": {
    ":hover": {
      "background-color": "var(--pink)"
    }
  },
  "hover_bg_light_pink": {
    ":hover": {
      "background-color": "var(--light-pink)"
    }
  },
  "hover_bg_dark_green": {
    ":hover": {
      "background-color": "var(--dark-green)"
    }
  },
  "hover_bg_green": {
    ":hover": {
      "background-color": "var(--green)"
    }
  },
  "hover_bg_light_green": {
    ":hover": {
      "background-color": "var(--light-green)"
    }
  },
  "hover_bg_navy": {
    ":hover": {
      "background-color": "var(--navy)"
    }
  },
  "hover_bg_dark_blue": {
    ":hover": {
      "background-color": "var(--dark-blue)"
    }
  },
  "hover_bg_blue": {
    ":hover": {
      "background-color": "var(--blue)"
    }
  },
  "hover_bg_light_blue": {
    ":hover": {
      "background-color": "var(--light-blue)"
    }
  },
  "hover_bg_lightest_blue": {
    ":hover": {
      "background-color": "var(--lightest-blue)"
    }
  },
  "hover_bg_washed_blue": {
    ":hover": {
      "background-color": "var(--washed-blue)"
    }
  },
  "hover_bg_washed_green": {
    ":hover": {
      "background-color": "var(--washed-green)"
    }
  },
  "hover_bg_washed_yellow": {
    ":hover": {
      "background-color": "var(--washed-yellow)"
    }
  },
  "hover_bg_washed_red": {
    ":hover": {
      "background-color": "var(--washed-red)"
    }
  }
}

/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(555);


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _Page = __webpack_require__(556);

var _Page2 = _interopRequireDefault(_Page);

var _Calculator = __webpack_require__(557);

var _Calculator2 = _interopRequireDefault(_Calculator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/pages/index.js?entry';

exports.default = function () {
  return _react2.default.createElement(_Page2.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 5
    }
  }, _react2.default.createElement(_Calculator2.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 6
    }
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbIlBhZ2UiLCJDYWxjdWxhdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsQUFBTzs7OztBQUNQLEFBQU8sQUFFUDs7Ozs7Ozs7a0JBQWUsWUFBQTt5QkFDYixBQUFDOztnQkFBRDtrQkFBQSxBQUNFO0FBREY7QUFBQSxHQUFBLGtCQUNFLEFBQUM7O2dCQUFEO2tCQUZXLEFBQ2IsQUFDRTtBQUFBO0FBQUE7QUFGSiIsImZpbGUiOiJpbmRleC5qcz9lbnRyeSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWx0ZXJuYXRla2V2L0Ryb3Bib3gvUHJvamVjdHMvQ29tbXVuaXR5IEZ1bmRlZC8yLjAvUmVhY3QgVHJhaW5pbmcvMDItY2FsY3VsYXRvci1leGFtcGxlIn0=

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/pages/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/pages/index.js"); } } })();
    (function (Component, route) {
      if (false) return
      if (false) return

      var qs = __webpack_require__(109)
      var params = qs.parse(__resourceQuery.slice(1))
      if (params.entry == null) return

      module.hot.accept()
      Component.__route = route

      if (module.hot.status() === 'idle') return

      var components = next.router.components
      for (var r in components) {
        if (!components.hasOwnProperty(r)) continue

        if (components[r].Component.__route === route) {
          next.router.update(r, Component)
        }
      }
    })(typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__.default : (module.exports.default || module.exports), "/")
  
/* WEBPACK VAR INJECTION */}.call(exports, "?entry"))

/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

var _head = __webpack_require__(247);

var _head2 = _interopRequireDefault(_head);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Page/index.js';


var styles = {
  Page: (0, _extends3.default)({}, _tachyonsJs2.default.flex, _tachyonsJs2.default.justify_center, _tachyonsJs2.default.items_center, {
    fontFamily: 'Open Sans',
    width: '100vw',
    height: '100vh'
  }),
  Body: {
    margin: 0
  }
};

exports.default = function (props) {
  return _react2.default.createElement('div', { className: 'Page', style: styles.Page, __source: {
      fileName: _jsxFileName,
      lineNumber: 19
    }
  }, _react2.default.createElement(_head2.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 20
    }
  }, _react2.default.createElement('body', { style: styles.Body, __source: {
      fileName: _jsxFileName,
      lineNumber: 21
    }
  }), _react2.default.createElement('link', { type: 'text/css', media: 'screen', href: '/static/tachyons.css', rel: 'stylesheet', __source: {
      fileName: _jsxFileName,
      lineNumber: 22
    }
  })), props.children);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvUGFnZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJ0IiwiSGVhZCIsInN0eWxlcyIsIlBhZ2UiLCJmbGV4IiwianVzdGlmeV9jZW50ZXIiLCJpdGVtc19jZW50ZXIiLCJmb250RmFtaWx5Iiwid2lkdGgiLCJoZWlnaHQiLCJCb2R5IiwibWFyZ2luIiwicHJvcHMiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQUFPOzs7O0FBQ1AsQUFBTzs7Ozs7Ozs7O0FBRVAsSUFBTTttQ0FFQyxxQkFETCxBQUNPLE1BQ0YscUJBRkwsQUFFTyxnQkFDRixxQkFITCxBQUdPO2dCQUhQLEFBSWMsQUFDWjtXQUxGLEFBS1MsQUFDUDtZQVBXLEFBQ2IsQUFNVSxBQUVWO0FBSkU7O1lBTEosQUFBZSxBQVNQLEFBQ0ksQUFJWjtBQUxRLEFBQ0o7QUFWVyxBQUNiOztrQkFhYSxVQUFBLEFBQUUsT0FBRjt5QkFDYixjQUFBLFNBQUssV0FBTCxBQUFlLFFBQU8sT0FBUSxPQUE5QixBQUFxQztnQkFBckM7a0JBQUEsQUFDRTtBQURGO0dBQUEsa0JBQ0UsQUFBQzs7Z0JBQUQ7a0JBQUEsQUFDRTtBQURGO0FBQUEsNkNBQ1EsT0FBUSxPQUFkLEFBQXFCO2dCQUFyQjtrQkFERixBQUNFLEFBQ0E7QUFEQTs4Q0FDTSxNQUFOLEFBQVcsWUFBVyxPQUF0QixBQUE0QixVQUFTLE1BQXJDLEFBQTBDLHdCQUF1QixLQUFqRSxBQUFxRTtnQkFBckU7a0JBSEosQUFDRSxBQUVFLEFBRUE7QUFGQTthQUpTLEFBQ2IsQUFLVTtBQU5aIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hbHRlcm5hdGVrZXYvRHJvcGJveC9Qcm9qZWN0cy9Db21tdW5pdHkgRnVuZGVkLzIuMC9SZWFjdCBUcmFpbmluZy8wMi1jYWxjdWxhdG9yLWV4YW1wbGUifQ==

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Page/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Page/index.js"); } } })();

/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = __webpack_require__(99);

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(279);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _Total = __webpack_require__(558);

var _Total2 = _interopRequireDefault(_Total);

var _TotalsHistory = __webpack_require__(560);

var _TotalsHistory2 = _interopRequireDefault(_TotalsHistory);

var _Keyboard = __webpack_require__(562);

var _Keyboard2 = _interopRequireDefault(_Keyboard);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Calculator/index.js';


var styles = {
  Calculator: (0, _extends3.default)({}, _tachyonsJs2.default.flex, _tachyonsJs2.default.flex_column, _tachyonsJs2.default.br4, _tachyonsJs2.default.shadow_2, _tachyonsJs2.default.overflow_hidden, {
    height: 420,
    width: 450,
    backgroundColor: '#FFF',
    border: '1px #CCC solid'
  }),
  Main: (0, _extends3.default)({}, _tachyonsJs2.default.flex)
};

var Calculator = function (_React$Component) {
  (0, _inherits3.default)(Calculator, _React$Component);

  function Calculator(props) {
    (0, _classCallCheck3.default)(this, Calculator);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Calculator.__proto__ || (0, _getPrototypeOf2.default)(Calculator)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      currentValue: 0,
      savedValue: 0,
      lastValue: 0,
      operator: null,
      operated: false,
      valuesHistory: [],
      showHistory: true
    };
    return _this;
  }

  (0, _createClass3.default)(Calculator, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { className: 'Calculator', style: styles.Calculator, __source: {
          fileName: _jsxFileName,
          lineNumber: 122
        }
      }, _react2.default.createElement(_Total2.default, {
        hasToolbar: true,
        showHistory: this.state.showHistory,
        lastValue: this.state.lastValue,
        value: this.state.currentValue,
        operator: this.state.operator, __source: {
          fileName: _jsxFileName,
          lineNumber: 124
        }
      }), _react2.default.createElement('div', { className: 'Main', style: styles.Main, __source: {
          fileName: _jsxFileName,
          lineNumber: 131
        }
      }, _react2.default.createElement(_TotalsHistory2.default, {
        show: this.state.showHistory,
        values: this.state.valuesHistory, __source: {
          fileName: _jsxFileName,
          lineNumber: 132
        }
      }), _react2.default.createElement(_Keyboard2.default, {
        numberClick: this.numberClick,
        operatorClick: this.operatorClick, __source: {
          fileName: _jsxFileName,
          lineNumber: 136
        }
      })));
    }
  }]);

  return Calculator;
}(_react2.default.Component);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.numberClick = function (e, props) {
    if (_this2.state.currentValue == 0) {
      _this2.setState({
        currentValue: '' + props.label
      });
    } else {
      _this2.setState({
        currentValue: '' + _this2.state.currentValue + props.label
      });
    }
  };

  this.operatorClick = function (e, props) {
    if (props.label != '=') {
      if (_this2.state.operator === null) {
        _this2.setState({
          operator: props.label,
          lastValue: _this2.state.currentValue,
          currentValue: 0
        });
      }
    } else {
      var value = void 0,
          valuesHistory = void 0;

      switch (_this2.state.operator) {
        case '+':
          value = Number(_this2.state.currentValue) + Number(_this2.state.lastValue);
          valuesHistory = (0, _assign2.default)([], _this2.state.valuesHistory);
          valuesHistory.unshift(value);

          _this2.setState({
            currentValue: 0,
            lastValue: value,
            operator: null,
            valuesHistory: valuesHistory
          });

          break;
        case '÷':
          value = Number(_this2.state.lastValue) / Number(_this2.state.currentValue);
          valuesHistory = (0, _assign2.default)([], _this2.state.valuesHistory);
          valuesHistory.unshift(value);

          _this2.setState({
            currentValue: 0,
            lastValue: value,
            operator: null,
            valuesHistory: valuesHistory
          });

          break;
        case 'x':
          value = Number(_this2.state.lastValue) * Number(_this2.state.currentValue);
          valuesHistory = (0, _assign2.default)([], _this2.state.valuesHistory);
          valuesHistory.unshift(value);

          _this2.setState({
            currentValue: 0,
            lastValue: value,
            operator: null,
            valuesHistory: valuesHistory
          });

          break;
        case '-':
          value = Number(_this2.state.lastValue) - Number(_this2.state.currentValue);
          valuesHistory = (0, _assign2.default)([], _this2.state.valuesHistory);
          valuesHistory.unshift(value);

          _this2.setState({
            currentValue: 0,
            lastValue: value,
            operator: null,
            valuesHistory: valuesHistory
          });

          break;
      }
    }
  };
};

exports.default = Calculator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvQ2FsY3VsYXRvci9pbmRleC5qcyJdLCJuYW1lcyI6WyJSZWFjdERPTSIsIlRvdGFsIiwiVG90YWxzSGlzdG9yeSIsIktleWJvYXJkIiwidCIsInN0eWxlcyIsIkNhbGN1bGF0b3IiLCJmbGV4IiwiZmxleF9jb2x1bW4iLCJicjQiLCJzaGFkb3dfMiIsIm92ZXJmbG93X2hpZGRlbiIsImhlaWdodCIsIndpZHRoIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiTWFpbiIsInByb3BzIiwic3RhdGUiLCJjdXJyZW50VmFsdWUiLCJzYXZlZFZhbHVlIiwibGFzdFZhbHVlIiwib3BlcmF0b3IiLCJvcGVyYXRlZCIsInZhbHVlc0hpc3RvcnkiLCJzaG93SGlzdG9yeSIsIm51bWJlckNsaWNrIiwib3BlcmF0b3JDbGljayIsIlJlYWN0IiwiQ29tcG9uZW50IiwiZSIsInNldFN0YXRlIiwibGFiZWwiLCJ2YWx1ZSIsIk51bWJlciIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsQUFBTzs7OztBQUNQLEFBQU87Ozs7QUFDUCxBQUFPOzs7O0FBQ1AsQUFBTzs7OztBQUNQLEFBQU87Ozs7Ozs7OztBQUVQLElBQU07eUNBRUMscUJBREwsQUFDTyxNQUNGLHFCQUZMLEFBRU8sYUFDRixxQkFITCxBQUdPLEtBQ0YscUJBSkwsQUFJTyxVQUNGLHFCQUxMLEFBS087WUFMUCxBQU1VLEFBQ1I7V0FQRixBQU9TLEFBQ1A7cUJBUkYsQUFRbUIsQUFDakI7WUFWVyxBQUNiLEFBU1UsQUFFVjtBQUxFO21DQU1HLHFCQWJQLEFBQWUsQUFZYixBQUNPO0FBYk0sQUFDYjs7SUFnQm1CLEE7c0NBRW5COztzQkFBQSxBQUFhLE9BQVE7d0NBQUE7OzhJQUFBLEFBQ1o7OzBCQUNQOztVQUFBLEFBQUs7b0JBQVEsQUFDRyxBQUNkO2tCQUZXLEFBRUMsQUFDWjtpQkFIVyxBQUdBLEFBQ1g7Z0JBSlcsQUFJRCxBQUNWO2dCQUxXLEFBS0QsQUFDVjtxQkFOVyxBQU1JLEFBQ2Y7bUJBVGlCLEFBRW5CLEFBQWEsQUFPRTtBQVBGLEFBQ1g7V0FRSDs7Ozs7NkJBbUZRLEFBQ1A7NkJBQ0UsY0FBQSxTQUFLLFdBQUwsQUFBZSxjQUFhLE9BQVEsT0FBcEMsQUFBMkM7b0JBQTNDO3NCQUFBLEFBRUU7QUFGRjtPQUFBLGtCQUVFLEFBQUM7b0JBQUQsQUFFRTtxQkFBYyxLQUFBLEFBQUssTUFGckIsQUFFMkIsQUFDekI7bUJBQVksS0FBQSxBQUFLLE1BSG5CLEFBR3lCLEFBQ3ZCO2VBQVEsS0FBQSxBQUFLLE1BSmYsQUFJcUIsQUFDbkI7a0JBQVcsS0FBQSxBQUFLLE1BTGxCLEFBS3dCO29CQUx4QjtzQkFGRixBQUVFLEFBT0E7QUFQQTtBQUNFLDBCQU1GLGNBQUEsU0FBSyxXQUFMLEFBQWUsUUFBTyxPQUFRLE9BQTlCLEFBQXFDO29CQUFyQztzQkFBQSxBQUNFO0FBREY7eUJBQ0UsQUFBQztjQUNRLEtBQUEsQUFBSyxNQURkLEFBQ29CLEFBQ2xCO2dCQUFTLEtBQUEsQUFBSyxNQUZoQixBQUVzQjtvQkFGdEI7c0JBREYsQUFDRSxBQUlBO0FBSkE7QUFDRSwwQkFHRixBQUFDO3FCQUNlLEtBRGhCLEFBQ3FCLEFBQ25CO3VCQUFnQixLQUZsQixBQUV1QjtvQkFGdkI7c0JBZk4sQUFDRSxBQVNFLEFBS0UsQUFPUDtBQVBPO0FBQ0U7Ozs7O0VBakg0QixnQixBQUFNOzs7OztPQWU1QyxBLGNBQWMsVUFBQSxBQUFFLEdBQUYsQUFBSyxPQUFXLEFBQzVCO1FBQUksT0FBQSxBQUFLLE1BQUwsQUFBVyxnQkFBZixBQUErQixHQUFJLEFBQ2pDO2FBQUEsQUFBSzsyQkFDZSxNQURwQixBQUFjLEFBQ1ksQUFFM0I7QUFIZSxBQUNaO0FBRkosV0FJTyxBQUNMO2FBQUEsQUFBSzsyQkFDZSxPQUFBLEFBQUssTUFBdkIsQUFBNkIsZUFBaUIsTUFEaEQsQUFBYyxBQUN3QyxBQUV2RDtBQUhlLEFBQ1o7QUFHTDtBOztPQUVELEEsZ0JBQWdCLFVBQUEsQUFBRSxHQUFGLEFBQUssT0FBVyxBQUM5QjtRQUFJLE1BQUEsQUFBTSxTQUFWLEFBQW1CLEtBQU0sQUFDdkI7VUFBSSxPQUFBLEFBQUssTUFBTCxBQUFXLGFBQWYsQUFBNEIsTUFBTyxBQUNqQztlQUFBLEFBQUs7b0JBQ08sTUFERSxBQUNJLEFBQ2hCO3FCQUFXLE9BQUEsQUFBSyxNQUZKLEFBRVUsQUFDdEI7d0JBSEYsQUFBYyxBQUdFLEFBRWpCO0FBTGUsQUFDWjtBQUtMO0FBUkQsV0FRTyxBQUNMO1VBQUksYUFBSjtVQUFXLHFCQUFYLEFBRUE7O2NBQVEsT0FBQSxBQUFLLE1BQWIsQUFBbUIsQUFDakI7YUFBQSxBQUFLLEFBQ0g7a0JBQVEsT0FBUSxPQUFBLEFBQUssTUFBYixBQUFtQixnQkFBaUIsT0FBUSxPQUFBLEFBQUssTUFBekQsQUFBNEMsQUFBbUIsQUFDL0Q7MEJBQWdCLHNCQUFBLEFBQWUsSUFBSSxPQUFBLEFBQUssTUFBeEMsQUFBZ0IsQUFBOEIsQUFDOUM7d0JBQUEsQUFBYyxRQUFkLEFBQXVCLEFBRXZCOztpQkFBQSxBQUFLOzBCQUFVLEFBQ0MsQUFDZDt1QkFGYSxBQUVGLEFBQ1g7c0JBSGEsQUFHSCxBQUNWOzJCQUpGLEFBQWUsQUFJRSxBQUdqQjtBQVBlLEFBQ2I7O0FBT0o7YUFBQSxBQUFLLEFBQ0g7a0JBQVEsT0FBUSxPQUFBLEFBQUssTUFBYixBQUFtQixhQUFjLE9BQVEsT0FBQSxBQUFLLE1BQXRELEFBQXlDLEFBQW1CLEFBQzVEOzBCQUFnQixzQkFBQSxBQUFlLElBQUksT0FBQSxBQUFLLE1BQXhDLEFBQWdCLEFBQThCLEFBQzlDO3dCQUFBLEFBQWMsUUFBZCxBQUF1QixBQUV2Qjs7aUJBQUEsQUFBSzswQkFBVSxBQUNDLEFBQ2Q7dUJBRmEsQUFFRixBQUNYO3NCQUhhLEFBR0gsQUFDVjsyQkFKRixBQUFlLEFBSUUsQUFHakI7QUFQZSxBQUNiOztBQU9KO2FBQUEsQUFBSyxBQUNIO2tCQUFRLE9BQVEsT0FBQSxBQUFLLE1BQWIsQUFBbUIsYUFBYyxPQUFRLE9BQUEsQUFBSyxNQUF0RCxBQUF5QyxBQUFtQixBQUM1RDswQkFBZ0Isc0JBQUEsQUFBZSxJQUFJLE9BQUEsQUFBSyxNQUF4QyxBQUFnQixBQUE4QixBQUM5Qzt3QkFBQSxBQUFjLFFBQWQsQUFBdUIsQUFFdkI7O2lCQUFBLEFBQUs7MEJBQVUsQUFDQyxBQUNkO3VCQUZhLEFBRUYsQUFDWDtzQkFIYSxBQUdILEFBQ1Y7MkJBSkYsQUFBZSxBQUlFLEFBR2pCO0FBUGUsQUFDYjs7QUFPSjthQUFBLEFBQUssQUFDSDtrQkFBUSxPQUFRLE9BQUEsQUFBSyxNQUFiLEFBQW1CLGFBQWMsT0FBUSxPQUFBLEFBQUssTUFBdEQsQUFBeUMsQUFBbUIsQUFDNUQ7MEJBQWdCLHNCQUFBLEFBQWUsSUFBSSxPQUFBLEFBQUssTUFBeEMsQUFBZ0IsQUFBOEIsQUFDOUM7d0JBQUEsQUFBYyxRQUFkLEFBQXVCLEFBRXZCOztpQkFBQSxBQUFLOzBCQUFVLEFBQ0MsQUFDZDt1QkFGYSxBQUVGLEFBQ1g7c0JBSGEsQUFHSCxBQUNWOzJCQUpGLEFBQWUsQUFJRSxBQUdqQjtBQVBlLEFBQ2I7O0FBOUNOLEFBc0REOztBQUNGO0E7OztrQkE5RmtCLEEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsdGVybmF0ZWtldi9Ecm9wYm94L1Byb2plY3RzL0NvbW11bml0eSBGdW5kZWQvMi4wL1JlYWN0IFRyYWluaW5nLzAyLWNhbGN1bGF0b3ItZXhhbXBsZSJ9

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Calculator/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Calculator/index.js"); } } })();

/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

var _reactNumberFormat = __webpack_require__(559);

var _reactNumberFormat2 = _interopRequireDefault(_reactNumberFormat);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Total/index.js';


var Total = function (_React$Component) {
  (0, _inherits3.default)(Total, _React$Component);

  function Total() {
    (0, _classCallCheck3.default)(this, Total);

    return (0, _possibleConstructorReturn3.default)(this, (Total.__proto__ || (0, _getPrototypeOf2.default)(Total)).apply(this, arguments));
  }

  (0, _createClass3.default)(Total, [{
    key: 'render',
    value: function render() {

      var styles = {
        Total: (0, _extends3.default)({}, _tachyonsJs2.default.pa3, _tachyonsJs2.default.tr, _tachyonsJs2.default.f1, _tachyonsJs2.default.b, {
          borderBottom: '1px #CCC solid',
          color: '#738D99',
          backgroundColor: '#F7F7F7'
        })
      };

      return _react2.default.createElement('div', { className: 'Total', style: styles.Total, __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      }, this.props.value === 0 ? _react2.default.createElement(_reactNumberFormat2.default, { thousandSeparator: true, value: this.props.lastValue, displayType: 'text', __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      }) : _react2.default.createElement(_reactNumberFormat2.default, { thousandSeparator: true, displayType: 'text', value: this.props.value, __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      }));
    }
  }]);

  return Total;
}(_react2.default.Component);

exports.default = Total;


Total.defaultProps = {
  value: 0
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvVG90YWwvaW5kZXguanMiXSwibmFtZXMiOlsidCIsIk51bWJlckZvcm1hdCIsIlRvdGFsIiwic3R5bGVzIiwicGEzIiwidHIiLCJmMSIsImIiLCJib3JkZXJCb3R0b20iLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsInByb3BzIiwidmFsdWUiLCJsYXN0VmFsdWUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEFBQU87Ozs7QUFDUCxBQUFPOzs7Ozs7Ozs7SSxBQUVjOzs7Ozs7Ozs7Ozs2QkFRVixBQUVQOztVQUFNOzBDQUVDLHFCQURMLEFBQ08sS0FDRixxQkFGTCxBQUVPLElBQ0YscUJBSEwsQUFHTyxJQUNGLHFCQUpMLEFBSU87d0JBSlAsQUFLZ0IsQUFDZDtpQkFORixBQU1TLEFBQ1A7MkJBUkosQUFBZSxBQUNiLEFBT21CLEFBSXJCO0FBTkk7QUFOVyxBQUNiOzs2QkFZQSxjQUFBLFNBQUssV0FBTCxBQUFlLFNBQVEsT0FBUSxPQUEvQixBQUFzQztvQkFBdEM7c0JBQUEsQUFBZ0Q7QUFBaEQ7T0FBQSxPQUFnRCxBQUFLLE1BQUwsQUFBVyxVQUFYLEFBQXFCLG9CQUFJLEFBQUMsNkNBQWEsbUJBQWQsTUFBZ0MsT0FBTyxLQUFBLEFBQUssTUFBNUMsQUFBa0QsV0FBVyxhQUE3RCxBQUF5RTtvQkFBekU7c0JBQXpCLEFBQXlCO0FBQUE7T0FBQSxvQkFBcUYsQUFBQyw2Q0FBYSxtQkFBZCxNQUFnQyxhQUFoQyxBQUE0QyxRQUFPLE9BQU8sS0FBQSxBQUFLLE1BQS9ELEFBQXFFO29CQUFyRTtzQkFEaEssQUFDRSxBQUE4SixBQUVqSztBQUZpSztPQUFBOzs7OztFQXZCakksZ0IsQUFBTTs7a0JBQXBCLEE7OztBQTRCckIsTUFBQSxBQUFNO1NBQU4sQUFBcUIsQUFDWjtBQURZLEFBQ25CIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hbHRlcm5hdGVrZXYvRHJvcGJveC9Qcm9qZWN0cy9Db21tdW5pdHkgRnVuZGVkLzIuMC9SZWFjdCBUcmFpbmluZy8wMi1jYWxjdWxhdG9yLWV4YW1wbGUifQ==

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Total/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Total/index.js"); } } })();

/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = __webpack_require__(71);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function noop() {}

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

function removeLeadingZero(numStr) {
  //remove leading zeros
  return numStr.replace(/^0+/, '') || '0';
}

/**
 * limit decimal numbers to given precision
 * Not used .fixedTo because that will break with big numbers
 */
function limitToPrecision(numStr, precision) {
  var str = '';
  for (var i = 0; i <= precision - 1; i++) {
    str += numStr[i] || '0';
  }
  return str;
}

/**
 * This method is required to round prop value to given precision.
 * Not used .round or .fixedTo because that will break with big numbers
 */
function roundToPrecision(numStr, precision) {
  var numberParts = numStr.split('.');
  var roundedDecimalParts = parseFloat('0.' + (numberParts[1] || '0')).toFixed(precision).split('.');
  var intPart = numberParts[0].split('').reverse().reduce(function (roundedStr, current, idx) {
    if (roundedStr.length > idx) {
      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);
    }
    return current + roundedStr;
  }, roundedDecimalParts[0]);

  var decimalPart = roundedDecimalParts[1];

  return intPart + (decimalPart ? '.' + decimalPart : '');
}

function omit(obj, keyMaps) {
  var filteredObj = {};
  Object.keys(obj).forEach(function (key) {
    if (!keyMaps[key]) filteredObj[key] = obj[key];
  });
  return filteredObj;
}

var propTypes = {
  thousandSeparator: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.oneOf([true])]),
  decimalSeparator: _propTypes2.default.string,
  decimalPrecision: _propTypes2.default.number,
  displayType: _propTypes2.default.oneOf(['input', 'text']),
  prefix: _propTypes2.default.string,
  suffix: _propTypes2.default.string,
  format: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  mask: _propTypes2.default.string,
  value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  customInput: _propTypes2.default.func,
  allowNegative: _propTypes2.default.bool,
  onKeyDown: _propTypes2.default.func,
  onMouseUp: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  type: _propTypes2.default.oneOf(['text', 'tel']),
  isAllowed: _propTypes2.default.func
};

var defaultProps = {
  displayType: 'input',
  decimalSeparator: '.',
  prefix: '',
  suffix: '',
  allowNegative: true,
  type: 'text',
  onChange: noop,
  onKeyDown: noop,
  onMouseUp: noop,
  isAllowed: function isAllowed() {
    return true;
  }
};

var NumberFormat = function (_React$Component) {
  _inherits(NumberFormat, _React$Component);

  function NumberFormat(props) {
    _classCallCheck(this, NumberFormat);

    var _this = _possibleConstructorReturn(this, (NumberFormat.__proto__ || Object.getPrototypeOf(NumberFormat)).call(this, props));

    var value = _this.optimizeValueProp(props);
    _this.state = {
      value: _this.formatInput(value).formattedValue
    };
    _this.onChange = _this.onChange.bind(_this);
    _this.onKeyDown = _this.onKeyDown.bind(_this);
    _this.onMouseUp = _this.onMouseUp.bind(_this);
    return _this;
  }

  _createClass(NumberFormat, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      this.updateValueIfRequired(prevProps, prevState);
    }
  }, {
    key: 'updateValueIfRequired',
    value: function updateValueIfRequired(prevProps) {
      var props = this.props,
          state = this.state;


      if (prevProps !== props) {
        var stateValue = state.value;

        var value = this.optimizeValueProp(props);
        if (value === undefined) value = stateValue;

        var _formatInput = this.formatInput(value),
            formattedValue = _formatInput.formattedValue;

        if (formattedValue !== stateValue) {
          this.setState({
            value: formattedValue
          });
        }
      }
    }
  }, {
    key: 'getFloatString',
    value: function getFloatString(num, props) {
      props = props || this.props;

      var _getSeparators = this.getSeparators(props),
          decimalSeparator = _getSeparators.decimalSeparator,
          thousandSeparator = _getSeparators.thousandSeparator;

      return (num || '').replace(new RegExp(escapeRegExp(thousandSeparator || ''), 'g'), '').replace(decimalSeparator, '.');
    }
  }, {
    key: 'getFloatValue',
    value: function getFloatValue(num, props) {
      props = props || this.props;
      return parseFloat(this.getFloatString(num, props)) || 0;
    }
  }, {
    key: 'optimizeValueProp',
    value: function optimizeValueProp(props) {
      var _getSeparators2 = this.getSeparators(props),
          decimalSeparator = _getSeparators2.decimalSeparator;

      var decimalPrecision = props.decimalPrecision,
          format = props.format;
      var value = props.value;


      if (format || !(value || value === 0)) return value;

      var isNumber = typeof value === 'number';

      if (isNumber) value = value.toString();

      value = this.removePrefixAndSuffix(isNumber ? value : this.getFloatString(value, props), props);

      //round off value
      if (typeof decimalPrecision === 'number') value = roundToPrecision(value, decimalPrecision);

      //correct decimal separator
      if (decimalSeparator) {
        value = value.replace('.', decimalSeparator);
      }

      //throw error if value has two decimal seperators
      if (value.split(decimalSeparator).length > 2) {
        throw new Error('\n          Wrong input for value props.\n\n          More than one decimalSeparator found\n       ');
      }

      //if decimalPrecision is 0 remove decimalNumbers
      if (decimalPrecision === 0) return value.split(decimalSeparator)[0];

      return value;
    }
  }, {
    key: 'removePrefixAndSuffix',
    value: function removePrefixAndSuffix(val, props) {
      var format = props.format,
          prefix = props.prefix,
          suffix = props.suffix;

      //remove prefix and suffix

      if (!format && val) {
        var isNegative = val[0] === '-';

        //remove negation sign
        if (isNegative) val = val.substring(1, val.length);

        //remove prefix
        val = prefix && val.indexOf(prefix) === 0 ? val.substring(prefix.length, val.length) : val;

        //remove suffix
        var suffixLastIndex = val.lastIndexOf(suffix);
        val = suffix && suffixLastIndex !== -1 && suffixLastIndex === val.length - suffix.length ? val.substring(0, suffixLastIndex) : val;

        //add negation sign back
        if (isNegative) val = '-' + val;
      }

      return val;
    }
  }, {
    key: 'getSeparators',
    value: function getSeparators(props) {
      props = props || this.props;

      var _props = props,
          decimalSeparator = _props.decimalSeparator;
      var _props2 = props,
          thousandSeparator = _props2.thousandSeparator;


      if (thousandSeparator === true) {
        thousandSeparator = ',';
      }

      if (decimalSeparator === thousandSeparator) {
        throw new Error('\n          Decimal separator can\'t be same as thousand separator.\n\n          thousandSeparator: ' + thousandSeparator + ' (thousandSeparator = {true} is same as thousandSeparator = ",")\n          decimalSeparator: ' + decimalSeparator + ' (default value for decimalSeparator is .)\n       ');
      }

      return {
        decimalSeparator: decimalSeparator,
        thousandSeparator: thousandSeparator
      };
    }
  }, {
    key: 'getNumberRegex',
    value: function getNumberRegex(g, ignoreDecimalSeparator) {
      var _props3 = this.props,
          format = _props3.format,
          decimalPrecision = _props3.decimalPrecision;

      var _getSeparators3 = this.getSeparators(),
          decimalSeparator = _getSeparators3.decimalSeparator;

      return new RegExp('\\d' + (decimalSeparator && decimalPrecision !== 0 && !ignoreDecimalSeparator && !format ? '|' + escapeRegExp(decimalSeparator) : ''), g ? 'g' : undefined);
    }
  }, {
    key: 'setCaretPosition',
    value: function setCaretPosition(el, caretPos) {
      el.value = el.value;
      // ^ this is used to not only get "focus", but
      // to make sure we don't have it everything -selected-
      // (it causes an issue in chrome, and having it doesn't hurt any other browser)
      if (el !== null) {
        if (el.createTextRange) {
          var range = el.createTextRange();
          range.move('character', caretPos);
          range.select();
          return true;
        }
        // (el.selectionStart === 0 added for Firefox bug)
        if (el.selectionStart || el.selectionStart === 0) {
          el.focus();
          el.setSelectionRange(caretPos, caretPos);
          return true;
        }

        // fail city, fortunately this never happens (as far as I've tested) :)
        el.focus();
        return false;
      }
    }
  }, {
    key: 'setPatchedCaretPosition',
    value: function setPatchedCaretPosition(el, caretPos, currentValue) {
      var _this2 = this;

      /*
      setting caret position within timeout of 0ms is required for mobile chrome,
      otherwise browser resets the caret position after we set it
      We are also setting it without timeout so that in normal browser we don't see the flickering
      */
      this.setCaretPosition(el, caretPos);
      setTimeout(function () {
        if (el.value === currentValue) _this2.setCaretPosition(el, caretPos);
      }, 0);
    }

    /* This keeps the caret within typing area so people can't type in between prefix or suffix */

  }, {
    key: 'correctCaretPosition',
    value: function correctCaretPosition(value, caretPos) {
      var _props4 = this.props,
          prefix = _props4.prefix,
          suffix = _props4.suffix;

      return Math.min(Math.max(caretPos, prefix.length), value.length - suffix.length);
    }
  }, {
    key: 'formatWithPattern',
    value: function formatWithPattern(str) {
      var _props5 = this.props,
          format = _props5.format,
          mask = _props5.mask;

      if (!format) return str;
      var hashCount = format.split('#').length - 1;
      var hashIdx = 0;
      var frmtdStr = format;

      for (var i = 0, ln = str.length; i < ln; i++) {
        if (i < hashCount) {
          hashIdx = frmtdStr.indexOf('#');
          frmtdStr = frmtdStr.replace('#', str[i]);
        }
      }

      var lastIdx = frmtdStr.lastIndexOf('#');

      if (mask) {
        return frmtdStr.replace(/#/g, mask);
      }
      return frmtdStr.substring(0, hashIdx + 1) + (lastIdx !== -1 ? frmtdStr.substring(lastIdx + 1, frmtdStr.length) : '');
    }
  }, {
    key: 'formatInput',
    value: function formatInput(val) {
      var props = this.props,
          removePrefixAndSuffix = this.removePrefixAndSuffix;
      var prefix = props.prefix,
          suffix = props.suffix,
          mask = props.mask,
          format = props.format,
          allowNegative = props.allowNegative,
          decimalPrecision = props.decimalPrecision;

      var _getSeparators4 = this.getSeparators(),
          thousandSeparator = _getSeparators4.thousandSeparator,
          decimalSeparator = _getSeparators4.decimalSeparator;

      var maskPattern = format && typeof format == 'string' && !!mask;
      var numRegex = this.getNumberRegex(true);
      var hasNegative = void 0,
          removeNegative = void 0;

      //change val to string if its number
      if (typeof val === 'number') val = val + '';

      var negativeRegex = new RegExp('(-)');
      var doubleNegativeRegex = new RegExp('(-)(.)*(-)');

      //check if it has negative numbers
      if (allowNegative && !format) {
        // Check number has '-' value
        hasNegative = negativeRegex.test(val);
        // Check number has 2 or more '-' values
        removeNegative = doubleNegativeRegex.test(val);
      }

      //remove prefix and suffix
      val = removePrefixAndSuffix(val, props);

      var valMatch = val && val.match(numRegex);

      if (!valMatch && removeNegative) {
        return { value: '', formattedValue: '' };
      } else if (!valMatch && hasNegative) {
        return { value: '', formattedValue: '-' };
      } else if (!valMatch) {
        return { value: '', formattedValue: maskPattern ? '' : '' };
      }

      var num = val.match(numRegex).join('');

      var formattedValue = num;

      if (format) {
        if (typeof format == 'string') {
          formattedValue = this.formatWithPattern(formattedValue);
        } else if (typeof format == 'function') {
          formattedValue = format(formattedValue);
        }
      } else {
        var hasDecimalSeparator = formattedValue.indexOf(decimalSeparator) !== -1 || decimalPrecision;

        var parts = formattedValue.split(decimalSeparator);
        var beforeDecimal = parts[0];
        var afterDecimal = parts[1] || '';

        //remove leading zeros from number before decimal
        beforeDecimal = removeLeadingZero(beforeDecimal);

        //apply decimal precision if its defined
        if (decimalPrecision !== undefined) afterDecimal = limitToPrecision(afterDecimal, decimalPrecision);

        if (thousandSeparator) {
          beforeDecimal = beforeDecimal.replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + thousandSeparator);
        }

        //add prefix and suffix
        if (prefix) beforeDecimal = prefix + beforeDecimal;
        if (suffix) afterDecimal = afterDecimal + suffix;

        if (hasNegative && !removeNegative) beforeDecimal = '-' + beforeDecimal;

        formattedValue = beforeDecimal + (hasDecimalSeparator && decimalSeparator || '') + afterDecimal;
      }

      return {
        value: (hasNegative && !removeNegative ? '-' : '') + removePrefixAndSuffix(formattedValue, props).match(numRegex).join(''),
        formattedValue: formattedValue
      };
    }
  }, {
    key: 'getCaretPosition',
    value: function getCaretPosition(inputValue, formattedValue, caretPos) {
      var numRegex = this.getNumberRegex(true);
      var inputNumber = (inputValue.match(numRegex) || []).join('');
      var formattedNumber = (formattedValue.match(numRegex) || []).join('');
      var j = void 0,
          i = void 0;

      j = 0;

      for (i = 0; i < caretPos; i++) {
        var currentInputChar = inputValue[i];
        var currentFormatChar = formattedValue[j] || '';
        //no need to increase new cursor position if formatted value does not have those characters
        //case inputValue = 1a23 and formattedValue =  123
        if (!currentInputChar.match(numRegex) && currentInputChar !== currentFormatChar) continue;

        //When we are striping out leading zeros maintain the new cursor position
        //Case inputValue = 00023 and formattedValue = 23;
        if (currentInputChar === '0' && currentFormatChar.match(numRegex) && currentFormatChar !== '0' && inputNumber.length !== formattedNumber.length) continue;

        //we are not using currentFormatChar because j can change here
        while (currentInputChar !== formattedValue[j] && !(formattedValue[j] || '').match(numRegex) && j < formattedValue.length) {
          j++;
        }j++;
      }

      //correct caret position if its outsize of editable area
      j = this.correctCaretPosition(formattedValue, j);

      return j;
    }
  }, {
    key: 'onChange',
    value: function onChange(e) {
      e.persist();
      var el = e.target;
      var inputValue = el.value;
      var state = this.state,
          props = this.props;
      var isAllowed = props.isAllowed;

      var lastValue = state.value;

      var _formatInput2 = this.formatInput(inputValue),
          formattedValue = _formatInput2.formattedValue,
          value = _formatInput2.value; // eslint-disable-line prefer-const

      /*Max of selectionStart and selectionEnd is taken for the patch of pixel and other mobile device caret bug*/


      var currentCaretPosition = Math.max(el.selectionStart, el.selectionEnd);

      var valueObj = {
        formattedValue: formattedValue,
        value: value,
        floatValue: this.getFloatValue(value)
      };

      if (!isAllowed(valueObj)) {
        formattedValue = lastValue;
      }

      //set the value imperatively, this is required for IE fix
      el.value = formattedValue;

      //get the caret position
      var caretPos = this.getCaretPosition(inputValue, formattedValue, currentCaretPosition);

      //set caret position
      this.setPatchedCaretPosition(el, caretPos, formattedValue);

      //change the state
      if (formattedValue !== lastValue) {
        this.setState({ value: formattedValue }, function () {
          props.onChange(e, valueObj);
        });
      }

      return value;
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var el = e.target;
      var selectionEnd = el.selectionEnd,
          value = el.value;
      var selectionStart = el.selectionStart;
      var _props6 = this.props,
          decimalPrecision = _props6.decimalPrecision,
          prefix = _props6.prefix,
          suffix = _props6.suffix;
      var key = e.key;

      var numRegex = this.getNumberRegex(false, decimalPrecision !== undefined);
      var negativeRegex = new RegExp('-');

      //Handle backspace and delete against non numerical/decimal characters
      if (selectionStart === selectionEnd) {
        var newCaretPosition = selectionStart;

        if (key === 'ArrowLeft' || key === 'ArrowRight') {
          selectionStart += key === 'ArrowLeft' ? -1 : +1;
          newCaretPosition = this.correctCaretPosition(value, selectionStart);
        } else if (key === 'Delete' && !numRegex.test(value[selectionStart]) && !negativeRegex.test(value[selectionStart])) {
          while (!numRegex.test(value[newCaretPosition]) && newCaretPosition < value.length - suffix.length) {
            newCaretPosition++;
          }
        } else if (key === 'Backspace' && !numRegex.test(value[selectionStart - 1]) && !negativeRegex.test(value[selectionStart - 1])) {
          while (!numRegex.test(value[newCaretPosition - 1]) && newCaretPosition > prefix.length) {
            newCaretPosition--;
          }
        }

        if (newCaretPosition !== selectionStart) {
          e.preventDefault();
          this.setPatchedCaretPosition(el, newCaretPosition, value);
        }
      }

      this.props.onKeyDown(e);
    }
  }, {
    key: 'onMouseUp',
    value: function onMouseUp(e) {
      var el = e.target;
      var selectionStart = el.selectionStart,
          selectionEnd = el.selectionEnd,
          value = el.value;


      if (selectionStart === selectionEnd) {
        var caretPostion = this.correctCaretPosition(value, selectionStart);
        if (caretPostion !== selectionStart) {
          this.setPatchedCaretPosition(el, caretPostion, value);
        }
      }

      this.props.onMouseUp(e);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = omit(this.props, propTypes);

      var inputProps = _extends({}, props, {
        type: this.props.type,
        value: this.state.value,
        onChange: this.onChange,
        onKeyDown: this.onKeyDown,
        onMouseUp: this.onMouseUp
      });

      if (this.props.displayType === 'text') {
        return _react2.default.createElement(
          'span',
          props,
          this.state.value
        );
      } else if (this.props.customInput) {
        var CustomInput = this.props.customInput;
        return _react2.default.createElement(CustomInput, inputProps);
      }

      return _react2.default.createElement('input', inputProps);
    }
  }]);

  return NumberFormat;
}(_react2.default.Component);

NumberFormat.propTypes = propTypes;
NumberFormat.defaultProps = defaultProps;

module.exports = NumberFormat;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

var _ListItem = __webpack_require__(561);

var _ListItem2 = _interopRequireDefault(_ListItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/TotalsHistory/index.js';


var styles = {
  TotalsHistory: (0, _extends3.default)({}, _tachyonsJs2.default.flex, _tachyonsJs2.default.flex_column, _tachyonsJs2.default.justify_center, _tachyonsJs2.default.items_center, {
    color: '#738D99',
    flex: 1,
    height: 345,
    width: 100,
    borderRight: '1px #CCC solid',
    backgroundColor: '#F7F7F7'
  }),
  TotalsHistoryList: (0, _extends3.default)({}, _tachyonsJs2.default.flex, _tachyonsJs2.default.flex_column, _tachyonsJs2.default.justify_start, _tachyonsJs2.default.items_start, _tachyonsJs2.default.overflow_scroll, {
    color: '#738D99',
    flex: 1,
    height: 345,
    width: 100,
    borderRight: '1px #CCC solid',
    backgroundColor: '#F7F7F7'
  })
};

var TotalsHistory = function (_React$Component) {
  (0, _inherits3.default)(TotalsHistory, _React$Component);

  function TotalsHistory() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, TotalsHistory);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TotalsHistory.__proto__ || (0, _getPrototypeOf2.default)(TotalsHistory)).call.apply(_ref, [this].concat(args))), _this), _this.showHistory = function () {
      return _this.props.values.map(function (value, index) {
        return _react2.default.createElement(_ListItem2.default, { value: value, __source: {
            fileName: _jsxFileName,
            lineNumber: 39
          }
        });
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(TotalsHistory, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { className: 'TotalsHistory', style: this.props.values.length == 0 ? styles.TotalsHistory : styles.TotalsHistoryList, __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, this.props.values.length === 0 ? _react2.default.createElement('span', { className: 'empty', __source: {
          fileName: _jsxFileName,
          lineNumber: 45
        }
      }, 'No History') : this.showHistory());
    }
  }]);

  return TotalsHistory;
}(_react2.default.Component);

exports.default = TotalsHistory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvVG90YWxzSGlzdG9yeS9pbmRleC5qcyJdLCJuYW1lcyI6WyJ0IiwiTGlzdEl0ZW0iLCJzdHlsZXMiLCJUb3RhbHNIaXN0b3J5IiwiZmxleCIsImZsZXhfY29sdW1uIiwianVzdGlmeV9jZW50ZXIiLCJpdGVtc19jZW50ZXIiLCJjb2xvciIsImhlaWdodCIsIndpZHRoIiwiYm9yZGVyUmlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJUb3RhbHNIaXN0b3J5TGlzdCIsImp1c3RpZnlfc3RhcnQiLCJpdGVtc19zdGFydCIsIm92ZXJmbG93X3Njcm9sbCIsInNob3dIaXN0b3J5IiwicHJvcHMiLCJ2YWx1ZXMiLCJtYXAiLCJ2YWx1ZSIsImluZGV4IiwibGVuZ3RoIiwiUmVhY3QiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxBQUFPOzs7O0FBQ1AsQUFBTzs7Ozs7Ozs7O0FBRVAsSUFBTTs0Q0FFQyxxQkFETCxBQUNPLE1BQ0YscUJBRkwsQUFFTyxhQUNGLHFCQUhMLEFBR08sZ0JBQ0YscUJBSkwsQUFJTztXQUpQLEFBS1MsQUFDUDtVQU5GLEFBTVEsQUFDTjtZQVBGLEFBT1UsQUFDUjtXQVJGLEFBUVMsQUFDUDtpQkFURixBQVNlLEFBQ2I7cUJBWFcsQUFDYixBQVVtQixBQUVuQjtBQVBFO2dEQVFHLHFCQURMLEFBQ08sTUFDRixxQkFGTCxBQUVPLGFBQ0YscUJBSEwsQUFHTyxlQUNGLHFCQUpMLEFBSU8sYUFDRixxQkFMTCxBQUtPO1dBTFAsQUFNUyxBQUNQO1VBUEYsQUFPUSxBQUNOO1lBUkYsQUFRVSxBQUNSO1dBVEYsQUFTUyxBQUNQO2lCQVZGLEFBVWUsQUFDYjtxQkF4QkosQUFBZSxBQWFiLEFBV21CO0FBTGpCO0FBbkJXLEFBQ2I7O0ksQUEyQm1COzs7Ozs7Ozs7Ozs7OzswTkFLbkIsQSxjQUFjLFlBQU0sQUFDbEI7bUJBQU8sQUFBSyxNQUFMLEFBQVcsT0FBWCxBQUFrQixJQUFLLFVBQUEsQUFBRSxPQUFGLEFBQVMsT0FBVDsrQkFDNUIsQUFBQyxvQ0FBUyxPQUFWLEFBQWtCO3NCQUFsQjt3QkFENEIsQUFDNUI7QUFBQTtTQUFBO0FBREYsQUFBTyxBQUdSLE9BSFE7QTs7Ozs7NkJBS0EsQUFDUDs2QkFDRSxjQUFBLFNBQUssV0FBTCxBQUFlLGlCQUFnQixPQUFRLEtBQUEsQUFBSyxNQUFMLEFBQVcsT0FBWCxBQUFrQixVQUFsQixBQUE0QixJQUFLLE9BQWpDLEFBQXdDLGdCQUFnQixPQUEvRixBQUFzRztvQkFBdEc7c0JBQUEsQUFBNEg7QUFBNUg7T0FBQSxPQUE0SCxBQUFLLE1BQUwsQUFBVyxPQUFYLEFBQWtCLFdBQWxCLEFBQTZCLG9CQUFJLGNBQUEsVUFBTSxXQUFOLEFBQWdCO29CQUFoQjtzQkFBQTtBQUFBO09BQUEsRUFBakMsQUFBaUMsZ0JBQTRDLEtBRDNNLEFBQ0UsQUFBeU0sQUFBSyxBQUVqTjs7Ozs7RUFmd0MsZ0JBQU0sQTs7a0JBQTVCLEEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsdGVybmF0ZWtldi9Ecm9wYm94L1Byb2plY3RzL0NvbW11bml0eSBGdW5kZWQvMi4wL1JlYWN0IFRyYWluaW5nLzAyLWNhbGN1bGF0b3ItZXhhbXBsZSJ9

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/TotalsHistory/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/TotalsHistory/index.js"); } } })();

/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/TotalsHistory/ListItem.js';


var styles = {
  ListItem: (0, _extends3.default)({}, _tachyonsJs2.default.pa2, _tachyonsJs2.default.tr, {
    borderBottom: '1px #EFEFEF solid',
    width: 155
  })
};

exports.default = function (_ref) {
  var value = _ref.value;
  return _react2.default.createElement('div', { className: 'ListItem', style: styles.ListItem, __source: {
      fileName: _jsxFileName,
      lineNumber: 13
    }
  }, value);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvVG90YWxzSGlzdG9yeS9MaXN0SXRlbS5qcyJdLCJuYW1lcyI6WyJ0Iiwic3R5bGVzIiwiTGlzdEl0ZW0iLCJwYTIiLCJ0ciIsImJvcmRlckJvdHRvbSIsIndpZHRoIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsQUFBTzs7Ozs7Ozs7O0FBRVAsSUFBTTt1Q0FFQyxxQkFETCxBQUNPLEtBQ0YscUJBRkwsQUFFTztrQkFGUCxBQUdnQixBQUNkO1dBTEosQUFBZSxBQUNiLEFBSVMsQUFJWDtBQUxJO0FBSlcsQUFDYjs7a0JBUWEsZ0JBQUE7TUFBQSxBQUFHLGFBQUgsQUFBRzt5QkFDaEIsY0FBQSxTQUFLLFdBQUwsQUFBZSxZQUFXLE9BQVEsT0FBbEMsQUFBeUM7Z0JBQXpDO2tCQUFBLEFBQXNEO0FBQXREO0dBQUEsRUFEYSxBQUNiO0FBREYiLCJmaWxlIjoiTGlzdEl0ZW0uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsdGVybmF0ZWtldi9Ecm9wYm94L1Byb2plY3RzL0NvbW11bml0eSBGdW5kZWQvMi4wL1JlYWN0IFRyYWluaW5nLzAyLWNhbGN1bGF0b3ItZXhhbXBsZSJ9

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/TotalsHistory/ListItem.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/TotalsHistory/ListItem.js"); } } })();

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _Button = __webpack_require__(563);

var _Button2 = _interopRequireDefault(_Button);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Keyboard/index.js';


var styles = {
  Keyboard: (0, _extends3.default)({
    flex: 1.5
  }, _tachyonsJs2.default.pa1),
  ButtonRow: (0, _extends3.default)({}, _tachyonsJs2.default.flex, {
    width: '100%'
  })
};

var Keyboard = function (_React$Component) {
  (0, _inherits3.default)(Keyboard, _React$Component);

  function Keyboard() {
    (0, _classCallCheck3.default)(this, Keyboard);

    return (0, _possibleConstructorReturn3.default)(this, (Keyboard.__proto__ || (0, _getPrototypeOf2.default)(Keyboard)).apply(this, arguments));
  }

  (0, _createClass3.default)(Keyboard, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { className: 'Keyboard', style: styles.Keyboard, __source: {
          fileName: _jsxFileName,
          lineNumber: 24
        }
      }, _react2.default.createElement('div', { className: 'ButtonRow', style: styles.ButtonRow, __source: {
          fileName: _jsxFileName,
          lineNumber: 26
        }
      }, _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '7', __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '8', __source: {
          fileName: _jsxFileName,
          lineNumber: 28
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '9', __source: {
          fileName: _jsxFileName,
          lineNumber: 29
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.operatorClick, operator: true, flex: 1, label: '\xF7', __source: {
          fileName: _jsxFileName,
          lineNumber: 30
        }
      })), _react2.default.createElement('div', { className: 'ButtonRow', style: styles.ButtonRow, __source: {
          fileName: _jsxFileName,
          lineNumber: 33
        }
      }, _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '4', __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '5', __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '6', __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.operatorClick, operator: true, flex: 1, label: 'x', __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      })), _react2.default.createElement('div', { className: 'ButtonRow', style: styles.ButtonRow, __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '1', __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '2', __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 1, label: '3', __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.operatorClick, operator: true, flex: 1, label: '+', __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      })), _react2.default.createElement('div', { className: 'ButtonRow', style: styles.ButtonRow, __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, _react2.default.createElement(_Button2.default, { onClick: this.props.numberClick, flex: 3.5, label: '0', __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }), _react2.default.createElement(_Button2.default, { onClick: this.props.operatorClick, operator: true, flex: 1, label: '-', __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      })), _react2.default.createElement('div', { className: 'ButtonRow', style: styles.ButtonRow, __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, _react2.default.createElement(_Button2.default, { onClick: this.props.operatorClick, operator: true, flex: 4, label: '=', __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      })));
    }
  }]);

  return Keyboard;
}(_react2.default.Component);

exports.default = Keyboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvS2V5Ym9hcmQvaW5kZXguanMiXSwibmFtZXMiOlsiQnV0dG9uIiwidCIsInN0eWxlcyIsIktleWJvYXJkIiwiZmxleCIsInBhMSIsIkJ1dHRvblJvdyIsIndpZHRoIiwicHJvcHMiLCJudW1iZXJDbGljayIsIm9wZXJhdG9yQ2xpY2siLCJSZWFjdCIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEFBQU87Ozs7QUFDUCxBQUFPOzs7Ozs7Ozs7QUFFUCxJQUFNOztVQUNKLEFBQ1E7QUFBTixLQUNHLHFCQUhRLEFBQ2IsQUFFTyxBQUVQO3dDQUNLLHFCQURMLEFBQ087V0FOVCxBQUFlLEFBS2IsQUFFUztBQUFQO0FBUFcsQUFDYjs7SUFVbUIsQTs7Ozs7Ozs7Ozs7NkJBT1YsQUFDUDs2QkFDRSxjQUFBLFNBQUssV0FBTCxBQUFlLFlBQVcsT0FBUSxPQUFsQyxBQUF5QztvQkFBekM7c0JBQUEsQUFFRTtBQUZGO09BQUEsa0JBRUUsY0FBQSxTQUFLLFdBQUwsQUFBZSxhQUFZLE9BQVEsT0FBbkMsQUFBMEM7b0JBQTFDO3NCQUFBLEFBQ0U7QUFERjt5QkFDRSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGFBQWMsTUFBM0MsQUFBa0QsR0FBSSxPQUF0RCxBQUE0RDtvQkFBNUQ7c0JBREYsQUFDRSxBQUNBO0FBREE7MEJBQ0EsQUFBQyxrQ0FBTyxTQUFVLEtBQUEsQUFBSyxNQUF2QixBQUE2QixhQUFjLE1BQTNDLEFBQWtELEdBQUksT0FBdEQsQUFBNEQ7b0JBQTVEO3NCQUZGLEFBRUUsQUFDQTtBQURBOzBCQUNBLEFBQUMsa0NBQU8sU0FBVSxLQUFBLEFBQUssTUFBdkIsQUFBNkIsYUFBYyxNQUEzQyxBQUFrRCxHQUFJLE9BQXRELEFBQTREO29CQUE1RDtzQkFIRixBQUdFLEFBQ0E7QUFEQTswQkFDQSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGVBQWdCLFVBQTdDLE1BQXNELE1BQXRELEFBQTZELEdBQUksT0FBakUsQUFBdUU7b0JBQXZFO3NCQU5KLEFBRUUsQUFJRSxBQUdGO0FBSEU7MkJBR0YsY0FBQSxTQUFLLFdBQUwsQUFBZSxhQUFZLE9BQVEsT0FBbkMsQUFBMEM7b0JBQTFDO3NCQUFBLEFBQ0U7QUFERjt5QkFDRSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGFBQWMsTUFBM0MsQUFBa0QsR0FBSSxPQUF0RCxBQUE0RDtvQkFBNUQ7c0JBREYsQUFDRSxBQUNBO0FBREE7MEJBQ0EsQUFBQyxrQ0FBTyxTQUFVLEtBQUEsQUFBSyxNQUF2QixBQUE2QixhQUFjLE1BQTNDLEFBQWtELEdBQUksT0FBdEQsQUFBNEQ7b0JBQTVEO3NCQUZGLEFBRUUsQUFDQTtBQURBOzBCQUNBLEFBQUMsa0NBQU8sU0FBVSxLQUFBLEFBQUssTUFBdkIsQUFBNkIsYUFBYyxNQUEzQyxBQUFrRCxHQUFJLE9BQXRELEFBQTREO29CQUE1RDtzQkFIRixBQUdFLEFBQ0E7QUFEQTswQkFDQSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGVBQWdCLFVBQTdDLE1BQXNELE1BQXRELEFBQTZELEdBQUksT0FBakUsQUFBdUU7b0JBQXZFO3NCQWJKLEFBU0UsQUFJRSxBQUdGO0FBSEU7MkJBR0YsY0FBQSxTQUFLLFdBQUwsQUFBZSxhQUFZLE9BQVEsT0FBbkMsQUFBMEM7b0JBQTFDO3NCQUFBLEFBQ0U7QUFERjt5QkFDRSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGFBQWMsTUFBM0MsQUFBa0QsR0FBSSxPQUF0RCxBQUE0RDtvQkFBNUQ7c0JBREYsQUFDRSxBQUNBO0FBREE7MEJBQ0EsQUFBQyxrQ0FBTyxTQUFVLEtBQUEsQUFBSyxNQUF2QixBQUE2QixhQUFjLE1BQTNDLEFBQWtELEdBQUksT0FBdEQsQUFBNEQ7b0JBQTVEO3NCQUZGLEFBRUUsQUFDQTtBQURBOzBCQUNBLEFBQUMsa0NBQU8sU0FBVSxLQUFBLEFBQUssTUFBdkIsQUFBNkIsYUFBYyxNQUEzQyxBQUFrRCxHQUFJLE9BQXRELEFBQTREO29CQUE1RDtzQkFIRixBQUdFLEFBQ0E7QUFEQTswQkFDQSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGVBQWdCLFVBQTdDLE1BQXNELE1BQXRELEFBQTZELEdBQUksT0FBakUsQUFBdUU7b0JBQXZFO3NCQXBCSixBQWdCRSxBQUlFLEFBR0Y7QUFIRTsyQkFHRixjQUFBLFNBQUssV0FBTCxBQUFlLGFBQVksT0FBUSxPQUFuQyxBQUEwQztvQkFBMUM7c0JBQUEsQUFDRTtBQURGO3lCQUNFLEFBQUMsa0NBQU8sU0FBVSxLQUFBLEFBQUssTUFBdkIsQUFBNkIsYUFBYyxNQUEzQyxBQUFrRCxLQUFNLE9BQXhELEFBQThEO29CQUE5RDtzQkFERixBQUNFLEFBQ0E7QUFEQTswQkFDQSxBQUFDLGtDQUFPLFNBQVUsS0FBQSxBQUFLLE1BQXZCLEFBQTZCLGVBQWdCLFVBQTdDLE1BQXNELE1BQXRELEFBQTZELEdBQUksT0FBakUsQUFBdUU7b0JBQXZFO3NCQXpCSixBQXVCRSxBQUVFLEFBRUY7QUFGRTsyQkFFRixjQUFBLFNBQUssV0FBTCxBQUFlLGFBQVksT0FBUSxPQUFuQyxBQUEwQztvQkFBMUM7c0JBQUEsQUFDRTtBQURGO3lCQUNFLEFBQUMsa0NBQU8sU0FBVSxLQUFBLEFBQUssTUFBdkIsQUFBNkIsZUFBZ0IsVUFBN0MsTUFBc0QsTUFBdEQsQUFBNkQsR0FBSSxPQUFqRSxBQUF1RTtvQkFBdkU7c0JBN0JOLEFBQ0UsQUEyQkUsQUFDRSxBQUlQO0FBSk87Ozs7OztFQXJDNEIsZ0JBQU0sQTs7a0JBQXZCLEEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsdGVybmF0ZWtldi9Ecm9wYm94L1Byb2plY3RzL0NvbW11bml0eSBGdW5kZWQvMi4wL1JlYWN0IFRyYWluaW5nLzAyLWNhbGN1bGF0b3ItZXhhbXBsZSJ9

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Keyboard/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Keyboard/index.js"); } } })();

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(134);

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = __webpack_require__(54);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(30);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(31);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(55);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(59);

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = __webpack_require__(27);

var _react2 = _interopRequireDefault(_react);

var _tachyonsJs = __webpack_require__(553);

var _tachyonsJs2 = _interopRequireDefault(_tachyonsJs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Button/index.js';


var Button = function (_React$Component) {
  (0, _inherits3.default)(Button, _React$Component);

  function Button() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Button);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Button.__proto__ || (0, _getPrototypeOf2.default)(Button)).call.apply(_ref, [this].concat(args))), _this), _this.onClick = function (e) {
      _this.props.onClick(e, _this.props);
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Button, [{
    key: 'render',
    value: function render() {
      var styles = {
        Button: (0, _extends3.default)({}, _tachyonsJs2.default.dib, _tachyonsJs2.default.br2, _tachyonsJs2.default.pt2, _tachyonsJs2.default.pb2, _tachyonsJs2.default.f1, _tachyonsJs2.default.ma1, _tachyonsJs2.default.outline_0, {
          width: 25 * this.props.flex + '%',
          'cursor': 'pointer',
          color: this.props.operator ? '#FFF' : '#738D99',
          backgroundColor: this.props.operator ? '#F5A623' : '#FFF',
          border: this.props.operator ? 'transparent' : '1px #A5BEC9 solid'
        })
      };

      return _react2.default.createElement('button', { onClick: this.onClick, className: 'Button', style: styles.Button, __source: {
          fileName: _jsxFileName,
          lineNumber: 34
        }
      }, this.props.label);
    }
  }]);

  return Button;
}(_react2.default.Component);

exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvQnV0dG9uL2luZGV4LmpzIl0sIm5hbWVzIjpbInQiLCJCdXR0b24iLCJvbkNsaWNrIiwiZSIsInByb3BzIiwic3R5bGVzIiwiZGliIiwiYnIyIiwicHQyIiwicGIyIiwiZjEiLCJtYTEiLCJvdXRsaW5lXzAiLCJ3aWR0aCIsImZsZXgiLCJjb2xvciIsIm9wZXJhdG9yIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwibGFiZWwiLCJSZWFjdCIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEFBQU87Ozs7Ozs7OztJLEFBR2M7Ozs7Ozs7Ozs7Ozs7OzRNLEFBT25CLFVBQVUsVUFBQSxBQUFFLEdBQU8sQUFDakI7WUFBQSxBQUFLLE1BQUwsQUFBVyxRQUFYLEFBQW9CLEdBQUcsTUFBdkIsQUFBNEIsQUFDN0I7QTs7Ozs7NkJBRVEsQUFDUDtVQUFNOzJDQUVDLHFCQURMLEFBQ08sS0FDRixxQkFGTCxBQUVPLEtBQ0YscUJBSEwsQUFHTyxLQUNGLHFCQUpMLEFBSU8sS0FDRixxQkFMTCxBQUtPLElBQ0YscUJBTkwsQUFNTyxLQUNGLHFCQVBMLEFBT087aUJBQ00sS0FBSyxLQUFBLEFBQUssTUFBckIsQUFBMkIsT0FSN0IsQUFTRTtvQkFURixBQVNZLEFBQ1Y7aUJBQU8sS0FBQSxBQUFLLE1BQUwsQUFBVyxXQUFYLEFBQXNCLFNBVi9CLEFBVXdDLEFBQ3RDOzJCQUFpQixLQUFBLEFBQUssTUFBTCxBQUFXLFdBQVgsQUFBc0IsWUFYekMsQUFXcUQsQUFDbkQ7a0JBQVEsS0FBQSxBQUFLLE1BQUwsQUFBVyxXQUFYLEFBQXNCLGdCQWJsQyxBQUFlLEFBQ2IsQUFZZ0QsQUFJbEQ7QUFSSTtBQVRXLEFBQ2I7OzZCQWlCQSxjQUFBLFlBQVEsU0FBVSxLQUFsQixBQUF1QixTQUFVLFdBQWpDLEFBQTJDLFVBQVMsT0FBUSxPQUE1RCxBQUFtRTtvQkFBbkU7c0JBQUEsQUFBOEU7QUFBOUU7T0FBQSxPQUE4RSxBQUFLLE1BRHJGLEFBQ0UsQUFBeUYsQUFFNUY7Ozs7O0VBaENpQyxnQkFBTSxBOztrQkFBckIsQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWx0ZXJuYXRla2V2L0Ryb3Bib3gvUHJvamVjdHMvQ29tbXVuaXR5IEZ1bmRlZC8yLjAvUmVhY3QgVHJhaW5pbmcvMDItY2FsY3VsYXRvci1leGFtcGxlIn0=

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Button/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/alternatekev/Dropbox/Projects/Community Funded/2.0/React Training/02-calculator-example/components/Button/index.js"); } } })();

/***/ })
],[554]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlcy9wYWdlcy9pbmRleC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanM/ZjA5MmVmOSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2suanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3JlYWN0UHJvZEludmFyaWFudC5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXIuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9yZWFjdC5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/MGQ3N2Q5OCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzPzBkNzdkOTgiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW5EZWZpbmVQcm9wZXJ0eS5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcz8wZDc3ZDk4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9sb3dQcmlvcml0eVdhcm5pbmcuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdC5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eU9iamVjdC5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlLWxpYnMtYnJvd3Nlci9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0QmFzZUNsYXNzZXMuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRTeW1ib2wuanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanM/ZGQ3ZTJiNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudFZhbGlkYXRvci5qcz9kZDdlMmI3Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzP2RkN2UyYjciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi91dGlscy5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldC5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeS5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZyb20uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9lbmNvZGUuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q2hpbGRyZW4uanM/YjE0OTY2OSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzP2IxNDk2NjkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9LZXlFc2NhcGVVdGlscy5qcz9iMTQ5NjY5Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NoZWNrUmVhY3RUeXBlU3BlYy5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFZlcnNpb24uanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL2NyZWF0ZUNsYXNzLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jbGFzcy9mYWN0b3J5LmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9vbmx5Q2hpbGQuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Rhc2suanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3BlcmZvcm0uanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24uanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5wcm9taXNlLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pbnZva2UuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc2V0LmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zZXQub2YuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC5mcm9tLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL2hlYWQuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9zaWRlLWVmZmVjdC5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZm9jdXNOb2RlLmpzP2JlZGVlZTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V2ZW50TGlzdGVuZXIuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9wZXJmb3JtYW5jZU5vdy5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9wZXJmb3JtYW5jZS5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY3JlYXRlQXJyYXlGcm9tTWl4ZWQuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0TWFya3VwV3JhcC5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jYW1lbGl6ZS5qcz9iZWRlZWUyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanM/YmVkZWVlMiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaHlwaGVuYXRlLmpzP2RiZTEwOGEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzP2RiZTEwOGEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXROZXh0RGVidWdJRC5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanM/ZGJlMTA4YSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanM/ZGJlMTA4YSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGFjaHlvbnMtanMvaW5kZXguanM/ZGJlMTA4YSIsIndlYnBhY2s6Ly8vLi9wYWdlcz9kYmUxMDhhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvUGFnZS9pbmRleC5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvQ2FsY3VsYXRvci9pbmRleC5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvVG90YWwvaW5kZXguanM/ZGJlMTA4YSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbnVtYmVyLWZvcm1hdC9saWIvbnVtYmVyX2Zvcm1hdC5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvVG90YWxzSGlzdG9yeS9pbmRleC5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvVG90YWxzSGlzdG9yeS9MaXN0SXRlbS5qcz9kYmUxMDhhIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvS2V5Ym9hcmQvaW5kZXguanM/ZGJlMTA4YSIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL0J1dHRvbi9pbmRleC5qcz9kYmUxMDhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYga2V5IGluIGV4cG9ydHMpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFN5bWJvbCcpO1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xuXG52YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24sIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0O1xuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdrZXknKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0O1xuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHdhcm5BYm91dEFjY2Vzc2luZ0tleSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duKSB7XG4gICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG4gIHdhcm5BYm91dEFjY2Vzc2luZ0tleS5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ0tleSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcbiAgd2FybkFib3V0QWNjZXNzaW5nUmVmLmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgUmVhY3QgZWxlbWVudC4gVGhpcyBubyBsb25nZXIgYWRoZXJlcyB0b1xuICogdGhlIGNsYXNzIHBhdHRlcm4sIHNvIGRvIG5vdCB1c2UgbmV3IHRvIGNhbGwgaXQuIEFsc28sIG5vIGluc3RhbmNlb2YgY2hlY2tcbiAqIHdpbGwgd29yay4gSW5zdGVhZCB0ZXN0ICQkdHlwZW9mIGZpZWxkIGFnYWluc3QgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIHRvIGNoZWNrXG4gKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHsqfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IHNlbGYgQSAqdGVtcG9yYXJ5KiBoZWxwZXIgdG8gZGV0ZWN0IHBsYWNlcyB3aGVyZSBgdGhpc2AgaXNcbiAqIGRpZmZlcmVudCBmcm9tIHRoZSBgb3duZXJgIHdoZW4gUmVhY3QuY3JlYXRlRWxlbWVudCBpcyBjYWxsZWQsIHNvIHRoYXQgd2VcbiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93XG4gKiBmdW5jdGlvbnMsIGFuZCBhcyBsb25nIGFzIGB0aGlzYCBhbmQgb3duZXIgYXJlIHRoZSBzYW1lLCB0aGVyZSB3aWxsIGJlIG5vXG4gKiBjaGFuZ2UgaW4gYmVoYXZpb3IuXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSlcbiAqIGluZGljYXRpbmcgZmlsZW5hbWUsIGxpbmUgbnVtYmVyLCBhbmQvb3Igb3RoZXIgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0geyp9IG93bmVyXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3cgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IEVsZW1lbnRcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuXG4gICAgLy8gQnVpbHQtaW4gcHJvcGVydGllcyB0aGF0IGJlbG9uZyBvbiB0aGUgZWxlbWVudFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiByZWYsXG4gICAgcHJvcHM6IHByb3BzLFxuXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGlzIGN1cnJlbnRseSBtdXRhdGl2ZS4gV2UgcHV0IGl0IG9uXG4gICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC5cbiAgICAvLyBUaGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgV2Vha01hcCBvbmNlIHRoZXkgYXJlIGltcGxlbWVudGVkIGluXG4gICAgLy8gY29tbW9ubHkgdXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMuXG4gICAgZWxlbWVudC5fc3RvcmUgPSB7fTtcblxuICAgIC8vIFRvIG1ha2UgY29tcGFyaW5nIFJlYWN0RWxlbWVudHMgZWFzaWVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSBtYWtlXG4gICAgLy8gdGhlIHZhbGlkYXRpb24gZmxhZyBub24tZW51bWVyYWJsZSAod2hlcmUgcG9zc2libGUsIHdoaWNoIHNob3VsZFxuICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrXG4gICAgLy8gaWdub3JlcyBpdC5cbiAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50Ll9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgLy8gc2VsZiBhbmQgc291cmNlIGFyZSBERVYgb25seSBwcm9wZXJ0aWVzLlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc2VsZicsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNlbGZcbiAgICAgIH0pO1xuICAgICAgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAgIC8vIGVxdWFsIGZvciB0ZXN0aW5nIHB1cnBvc2VzIGFuZCB0aGVyZWZvcmUgd2UgaGlkZSBpdCBmcm9tIGVudW1lcmF0aW9uLlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc291cmNlJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc291cmNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICBlbGVtZW50Ll9zZWxmID0gc2VsZjtcbiAgICAgIGVsZW1lbnQuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlZWxlbWVudFxuICovXG5SZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcbiAgdmFyIHNlbGYgPSBudWxsO1xuICB2YXIgc291cmNlID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICB9XG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICBzZWxmID0gY29uZmlnLl9fc2VsZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NlbGY7XG4gICAgc291cmNlID0gY29uZmlnLl9fc291cmNlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc291cmNlO1xuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkQXJyYXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLiQkdHlwZW9mID09PSAndW5kZWZpbmVkJyB8fCBwcm9wcy4kJHR5cGVvZiAhPT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgUmVhY3RFbGVtZW50cyBvZiBhIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlZmFjdG9yeVxuICovXG5SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHZhciBmYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgLy8gRXhwb3NlIHRoZSB0eXBlIG9uIHRoZSBmYWN0b3J5IGFuZCB0aGUgcHJvdG90eXBlIHNvIHRoYXQgaXQgY2FuIGJlXG4gIC8vIGVhc2lseSBhY2Nlc3NlZCBvbiBlbGVtZW50cy4gRS5nLiBgPEZvbyAvPi50eXBlID09PSBGb29gLlxuICAvLyBUaGlzIHNob3VsZCBub3QgYmUgbmFtZWQgYGNvbnN0cnVjdG9yYCBzaW5jZSB0aGlzIG1heSBub3QgYmUgdGhlIGZ1bmN0aW9uXG4gIC8vIHRoYXQgY3JlYXRlZCB0aGUgZWxlbWVudCwgYW5kIGl0IG1heSBub3QgZXZlbiBiZSBhIGNvbnN0cnVjdG9yLlxuICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5ID0gZnVuY3Rpb24gKG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuXG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuLyoqXG4gKiBDbG9uZSBhbmQgcmV0dXJuIGEgbmV3IFJlYWN0RWxlbWVudCB1c2luZyBlbGVtZW50IGFzIHRoZSBzdGFydGluZyBwb2ludC5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jbG9uZWVsZW1lbnRcbiAqL1xuUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBPcmlnaW5hbCBwcm9wcyBhcmUgY29waWVkXG4gIHZhciBwcm9wcyA9IF9hc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG4gIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgLy8gU291cmNlIGlzIHByZXNlcnZlZCBzaW5jZSBjbG9uZUVsZW1lbnQgaXMgdW5saWtlbHkgdG8gYmUgdGFyZ2V0ZWQgYnkgYVxuICAvLyB0cmFuc3BpbGVyLCBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyBwcm9iYWJseSBhIGJldHRlciBpbmRpY2F0b3Igb2YgdGhlXG4gIC8vIHRydWUgb3duZXIuXG4gIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG5cbiAgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgLy8gU2lsZW50bHkgc3RlYWwgdGhlIHJlZiBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIH1cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIG92ZXJyaWRlIGV4aXN0aW5nIHByb3BzXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICBpZiAoZWxlbWVudC50eXBlICYmIGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgIGRlZmF1bHRQcm9wcyA9IGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgfVxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbn07XG5cbi8qKlxuICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5pc3ZhbGlkZWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBjb21wb25lbnQuXG4gKiBAZmluYWxcbiAqL1xuUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIGlzTmF0aXZlKGZuKSB7XG4gIC8vIEJhc2VkIG9uIGlzTmF0aXZlKCkgZnJvbSBMb2Rhc2hcbiAgdmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICsgZnVuY1RvU3RyaW5nXG4gIC8vIFRha2UgYW4gZXhhbXBsZSBuYXRpdmUgZnVuY3Rpb24gc291cmNlIGZvciBjb21wYXJpc29uXG4gIC5jYWxsKGhhc093blByb3BlcnR5XG4gIC8vIFN0cmlwIHJlZ2V4IGNoYXJhY3RlcnMgc28gd2UgY2FuIHVzZSBpdCBmb3IgcmVnZXhcbiAgKS5yZXBsYWNlKC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZywgJ1xcXFwkJidcbiAgLy8gUmVtb3ZlIGhhc093blByb3BlcnR5IGZyb20gdGhlIHRlbXBsYXRlIHRvIG1ha2UgaXQgZ2VuZXJpY1xuICApLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnKTtcbiAgdHJ5IHtcbiAgICB2YXIgc291cmNlID0gZnVuY1RvU3RyaW5nLmNhbGwoZm4pO1xuICAgIHJldHVybiByZUlzTmF0aXZlLnRlc3Qoc291cmNlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbnZhciBjYW5Vc2VDb2xsZWN0aW9ucyA9XG4vLyBBcnJheS5mcm9tXG50eXBlb2YgQXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJyAmJlxuLy8gTWFwXG50eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIGlzTmF0aXZlKE1hcCkgJiZcbi8vIE1hcC5wcm90b3R5cGUua2V5c1xuTWFwLnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmtleXMgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoTWFwLnByb3RvdHlwZS5rZXlzKSAmJlxuLy8gU2V0XG50eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIGlzTmF0aXZlKFNldCkgJiZcbi8vIFNldC5wcm90b3R5cGUua2V5c1xuU2V0LnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmtleXMgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoU2V0LnByb3RvdHlwZS5rZXlzKTtcblxudmFyIHNldEl0ZW07XG52YXIgZ2V0SXRlbTtcbnZhciByZW1vdmVJdGVtO1xudmFyIGdldEl0ZW1JRHM7XG52YXIgYWRkUm9vdDtcbnZhciByZW1vdmVSb290O1xudmFyIGdldFJvb3RJRHM7XG5cbmlmIChjYW5Vc2VDb2xsZWN0aW9ucykge1xuICB2YXIgaXRlbU1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHJvb3RJRFNldCA9IG5ldyBTZXQoKTtcblxuICBzZXRJdGVtID0gZnVuY3Rpb24gKGlkLCBpdGVtKSB7XG4gICAgaXRlbU1hcC5zZXQoaWQsIGl0ZW0pO1xuICB9O1xuICBnZXRJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuIGl0ZW1NYXAuZ2V0KGlkKTtcbiAgfTtcbiAgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIGl0ZW1NYXBbJ2RlbGV0ZSddKGlkKTtcbiAgfTtcbiAgZ2V0SXRlbUlEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShpdGVtTWFwLmtleXMoKSk7XG4gIH07XG5cbiAgYWRkUm9vdCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJvb3RJRFNldC5hZGQoaWQpO1xuICB9O1xuICByZW1vdmVSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcm9vdElEU2V0WydkZWxldGUnXShpZCk7XG4gIH07XG4gIGdldFJvb3RJRHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocm9vdElEU2V0LmtleXMoKSk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgaXRlbUJ5S2V5ID0ge307XG4gIHZhciByb290QnlLZXkgPSB7fTtcblxuICAvLyBVc2Ugbm9uLW51bWVyaWMga2V5cyB0byBwcmV2ZW50IFY4IHBlcmZvcm1hbmNlIGlzc3VlczpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzIzMlxuICB2YXIgZ2V0S2V5RnJvbUlEID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcmV0dXJuICcuJyArIGlkO1xuICB9O1xuICB2YXIgZ2V0SURGcm9tS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBwYXJzZUludChrZXkuc3Vic3RyKDEpLCAxMCk7XG4gIH07XG5cbiAgc2V0SXRlbSA9IGZ1bmN0aW9uIChpZCwgaXRlbSkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIGl0ZW1CeUtleVtrZXldID0gaXRlbTtcbiAgfTtcbiAgZ2V0SXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIHJldHVybiBpdGVtQnlLZXlba2V5XTtcbiAgfTtcbiAgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXlGcm9tSUQoaWQpO1xuICAgIGRlbGV0ZSBpdGVtQnlLZXlba2V5XTtcbiAgfTtcbiAgZ2V0SXRlbUlEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbUJ5S2V5KS5tYXAoZ2V0SURGcm9tS2V5KTtcbiAgfTtcblxuICBhZGRSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgcm9vdEJ5S2V5W2tleV0gPSB0cnVlO1xuICB9O1xuICByZW1vdmVSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgZGVsZXRlIHJvb3RCeUtleVtrZXldO1xuICB9O1xuICBnZXRSb290SURzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyb290QnlLZXkpLm1hcChnZXRJREZyb21LZXkpO1xuICB9O1xufVxuXG52YXIgdW5tb3VudGVkSURzID0gW107XG5cbmZ1bmN0aW9uIHB1cmdlRGVlcChpZCkge1xuICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICBpZiAoaXRlbSkge1xuICAgIHZhciBjaGlsZElEcyA9IGl0ZW0uY2hpbGRJRHM7XG5cbiAgICByZW1vdmVJdGVtKGlkKTtcbiAgICBjaGlsZElEcy5mb3JFYWNoKHB1cmdlRGVlcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSkge1xuICByZXR1cm4gJ1xcbiAgICBpbiAnICsgKG5hbWUgfHwgJ1Vua25vd24nKSArIChzb3VyY2UgPyAnIChhdCAnICsgc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKSArICc6JyArIHNvdXJjZS5saW5lTnVtYmVyICsgJyknIDogb3duZXJOYW1lID8gJyAoY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJyknIDogJycpO1xufVxuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gJyNlbXB0eSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlbGVtZW50ID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAnI3RleHQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQudHlwZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lIHx8IGVsZW1lbnQudHlwZS5uYW1lIHx8ICdVbmtub3duJztcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXNjcmliZUlEKGlkKSB7XG4gIHZhciBuYW1lID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShpZCk7XG4gIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICB2YXIgb3duZXJOYW1lO1xuICBpZiAob3duZXJJRCkge1xuICAgIG93bmVyTmFtZSA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUob3duZXJJRCk7XG4gIH1cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCwgJ1JlYWN0Q29tcG9uZW50VHJlZUhvb2s6IE1pc3NpbmcgUmVhY3QgZWxlbWVudCBmb3IgZGVidWdJRCAlcyB3aGVuICcgKyAnYnVpbGRpbmcgc3RhY2snLCBpZCkgOiB2b2lkIDA7XG4gIHJldHVybiBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIGVsZW1lbnQgJiYgZWxlbWVudC5fc291cmNlLCBvd25lck5hbWUpO1xufVxuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHtcbiAgb25TZXRDaGlsZHJlbjogZnVuY3Rpb24gKGlkLCBuZXh0Q2hpbGRJRHMpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgICFpdGVtID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0l0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0JykgOiBfcHJvZEludmFyaWFudCgnMTQ0JykgOiB2b2lkIDA7XG4gICAgaXRlbS5jaGlsZElEcyA9IG5leHRDaGlsZElEcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV4dENoaWxkSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dENoaWxkSUQgPSBuZXh0Q2hpbGRJRHNbaV07XG4gICAgICB2YXIgbmV4dENoaWxkID0gZ2V0SXRlbShuZXh0Q2hpbGRJRCk7XG4gICAgICAhbmV4dENoaWxkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGhvb2sgZXZlbnRzIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBfcHJvZEludmFyaWFudCgnMTQwJykgOiB2b2lkIDA7XG4gICAgICAhKG5leHRDaGlsZC5jaGlsZElEcyAhPSBudWxsIHx8IHR5cGVvZiBuZXh0Q2hpbGQuZWxlbWVudCAhPT0gJ29iamVjdCcgfHwgbmV4dENoaWxkLmVsZW1lbnQgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25TZXRDaGlsZHJlbigpIHRvIGZpcmUgZm9yIGEgY29udGFpbmVyIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDEnKSA6IHZvaWQgMDtcbiAgICAgICFuZXh0Q2hpbGQuaXNNb3VudGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIG9uTW91bnRDb21wb25lbnQoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLicpIDogX3Byb2RJbnZhcmlhbnQoJzcxJykgOiB2b2lkIDA7XG4gICAgICBpZiAobmV4dENoaWxkLnBhcmVudElEID09IG51bGwpIHtcbiAgICAgICAgbmV4dENoaWxkLnBhcmVudElEID0gaWQ7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSBidXQgbW91bnRpbmcgYSBuZXcgcm9vdCBkdXJpbmcgaW5cbiAgICAgICAgLy8gY29tcG9uZW50V2lsbE1vdW50IGN1cnJlbnRseSBjYXVzZXMgbm90LXlldC1tb3VudGVkIGNvbXBvbmVudHMgdG9cbiAgICAgICAgLy8gYmUgcHVyZ2VkIGZyb20gb3VyIHRyZWUgZGF0YSBzbyB0aGVpciBwYXJlbnQgaWQgaXMgbWlzc2luZy5cbiAgICAgIH1cbiAgICAgICEobmV4dENoaWxkLnBhcmVudElEID09PSBpZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25CZWZvcmVNb3VudENvbXBvbmVudCgpIHBhcmVudCBhbmQgb25TZXRDaGlsZHJlbigpIHRvIGJlIGNvbnNpc3RlbnQgKCVzIGhhcyBwYXJlbnRzICVzIGFuZCAlcykuJywgbmV4dENoaWxkSUQsIG5leHRDaGlsZC5wYXJlbnRJRCwgaWQpIDogX3Byb2RJbnZhcmlhbnQoJzE0MicsIG5leHRDaGlsZElELCBuZXh0Q2hpbGQucGFyZW50SUQsIGlkKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0sXG4gIG9uQmVmb3JlTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCwgZWxlbWVudCwgcGFyZW50SUQpIHtcbiAgICB2YXIgaXRlbSA9IHtcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBwYXJlbnRJRDogcGFyZW50SUQsXG4gICAgICB0ZXh0OiBudWxsLFxuICAgICAgY2hpbGRJRHM6IFtdLFxuICAgICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAgIHVwZGF0ZUNvdW50OiAwXG4gICAgfTtcbiAgICBzZXRJdGVtKGlkLCBpdGVtKTtcbiAgfSxcbiAgb25CZWZvcmVVcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCwgZWxlbWVudCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmlzTW91bnRlZCkge1xuICAgICAgLy8gV2UgbWF5IGVuZCB1cCBoZXJlIGFzIGEgcmVzdWx0IG9mIHNldFN0YXRlKCkgaW4gY29tcG9uZW50V2lsbFVubW91bnQoKS5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaWdub3JlIHRoZSBlbGVtZW50LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLmVsZW1lbnQgPSBlbGVtZW50O1xuICB9LFxuICBvbk1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgICFpdGVtID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0l0ZW0gbXVzdCBoYXZlIGJlZW4gc2V0JykgOiBfcHJvZEludmFyaWFudCgnMTQ0JykgOiB2b2lkIDA7XG4gICAgaXRlbS5pc01vdW50ZWQgPSB0cnVlO1xuICAgIHZhciBpc1Jvb3QgPSBpdGVtLnBhcmVudElEID09PSAwO1xuICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgIGFkZFJvb3QoaWQpO1xuICAgIH1cbiAgfSxcbiAgb25VcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgaWYgKCFpdGVtIHx8ICFpdGVtLmlzTW91bnRlZCkge1xuICAgICAgLy8gV2UgbWF5IGVuZCB1cCBoZXJlIGFzIGEgcmVzdWx0IG9mIHNldFN0YXRlKCkgaW4gY29tcG9uZW50V2lsbFVubW91bnQoKS5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgaWdub3JlIHRoZSBlbGVtZW50LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtLnVwZGF0ZUNvdW50Kys7XG4gIH0sXG4gIG9uVW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiBpdCBleGlzdHMuXG4gICAgICAvLyBgaXRlbWAgbWlnaHQgbm90IGV4aXN0IGlmIGl0IGlzIGluc2lkZSBhbiBlcnJvciBib3VuZGFyeSwgYW5kIGEgc2libGluZ1xuICAgICAgLy8gZXJyb3IgYm91bmRhcnkgY2hpbGQgdGhyZXcgd2hpbGUgbW91bnRpbmcuIFRoZW4gdGhpcyBpbnN0YW5jZSBuZXZlclxuICAgICAgLy8gZ290IGEgY2hhbmNlIHRvIG1vdW50LCBidXQgaXQgc3RpbGwgZ2V0cyBhbiB1bm1vdW50aW5nIGV2ZW50IGR1cmluZ1xuICAgICAgLy8gdGhlIGVycm9yIGJvdW5kYXJ5IGNsZWFudXAuXG4gICAgICBpdGVtLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdmFyIGlzUm9vdCA9IGl0ZW0ucGFyZW50SUQgPT09IDA7XG4gICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgIHJlbW92ZVJvb3QoaWQpO1xuICAgICAgfVxuICAgIH1cbiAgICB1bm1vdW50ZWRJRHMucHVzaChpZCk7XG4gIH0sXG4gIHB1cmdlVW5tb3VudGVkQ29tcG9uZW50czogZnVuY3Rpb24gKCkge1xuICAgIGlmIChSZWFjdENvbXBvbmVudFRyZWVIb29rLl9wcmV2ZW50UHVyZ2luZykge1xuICAgICAgLy8gU2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdGVzdGluZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVubW91bnRlZElEcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdW5tb3VudGVkSURzW2ldO1xuICAgICAgcHVyZ2VEZWVwKGlkKTtcbiAgICB9XG4gICAgdW5tb3VudGVkSURzLmxlbmd0aCA9IDA7XG4gIH0sXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uaXNNb3VudGVkIDogZmFsc2U7XG4gIH0sXG4gIGdldEN1cnJlbnRTdGFja0FkZGVuZHVtOiBmdW5jdGlvbiAodG9wRWxlbWVudCkge1xuICAgIHZhciBpbmZvID0gJyc7XG4gICAgaWYgKHRvcEVsZW1lbnQpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0RGlzcGxheU5hbWUodG9wRWxlbWVudCk7XG4gICAgICB2YXIgb3duZXIgPSB0b3BFbGVtZW50Ll9vd25lcjtcbiAgICAgIGluZm8gKz0gZGVzY3JpYmVDb21wb25lbnRGcmFtZShuYW1lLCB0b3BFbGVtZW50Ll9zb3VyY2UsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSk7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRPd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgdmFyIGlkID0gY3VycmVudE93bmVyICYmIGN1cnJlbnRPd25lci5fZGVidWdJRDtcblxuICAgIGluZm8gKz0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChpZCk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0sXG4gIGdldFN0YWNrQWRkZW5kdW1CeUlEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaW5mbyA9ICcnO1xuICAgIHdoaWxlIChpZCkge1xuICAgICAgaW5mbyArPSBkZXNjcmliZUlEKGlkKTtcbiAgICAgIGlkID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRQYXJlbnRJRChpZCk7XG4gICAgfVxuICAgIHJldHVybiBpbmZvO1xuICB9LFxuICBnZXRDaGlsZElEczogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uY2hpbGRJRHMgOiBbXTtcbiAgfSxcbiAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RGlzcGxheU5hbWUoZWxlbWVudCk7XG4gIH0sXG4gIGdldEVsZW1lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmVsZW1lbnQgOiBudWxsO1xuICB9LFxuICBnZXRPd25lcklEOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RWxlbWVudChpZCk7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50Ll9vd25lcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50Ll9vd25lci5fZGVidWdJRDtcbiAgfSxcbiAgZ2V0UGFyZW50SUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnBhcmVudElEIDogbnVsbDtcbiAgfSxcbiAgZ2V0U291cmNlOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHZhciBlbGVtZW50ID0gaXRlbSA/IGl0ZW0uZWxlbWVudCA6IG51bGw7XG4gICAgdmFyIHNvdXJjZSA9IGVsZW1lbnQgIT0gbnVsbCA/IGVsZW1lbnQuX3NvdXJjZSA6IG51bGw7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfSxcbiAgZ2V0VGV4dDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gJycgKyBlbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG4gIGdldFVwZGF0ZUNvdW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS51cGRhdGVDb3VudCA6IDA7XG4gIH0sXG5cblxuICBnZXRSb290SURzOiBnZXRSb290SURzLFxuICBnZXRSZWdpc3RlcmVkSURzOiBnZXRJdGVtSURzLFxuXG4gIHB1c2hOb25TdGFuZGFyZFdhcm5pbmdTdGFjazogZnVuY3Rpb24gKGlzQ3JlYXRpbmdFbGVtZW50LCBjdXJyZW50U291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlLnJlYWN0U3RhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgY3VycmVudE93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB2YXIgaWQgPSBjdXJyZW50T3duZXIgJiYgY3VycmVudE93bmVyLl9kZWJ1Z0lEO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0NyZWF0aW5nRWxlbWVudCkge1xuICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBpZCA/IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUoaWQpIDogbnVsbCxcbiAgICAgICAgICBmaWxlTmFtZTogY3VycmVudFNvdXJjZSA/IGN1cnJlbnRTb3VyY2UuZmlsZU5hbWUgOiBudWxsLFxuICAgICAgICAgIGxpbmVOdW1iZXI6IGN1cnJlbnRTb3VyY2UgPyBjdXJyZW50U291cmNlLmxpbmVOdW1iZXIgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaWQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKGlkKTtcbiAgICAgICAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXJJRCA/IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUob3duZXJJRCkgOiBudWxsO1xuICAgICAgICB2YXIgc291cmNlID0gZWxlbWVudCAmJiBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgIG5hbWU6IG93bmVyTmFtZSxcbiAgICAgICAgICBmaWxlTmFtZTogc291cmNlID8gc291cmNlLmZpbGVOYW1lIDogbnVsbCxcbiAgICAgICAgICBsaW5lTnVtYmVyOiBzb3VyY2UgPyBzb3VyY2UubGluZU51bWJlciA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGlkID0gcGFyZW50SUQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBJbnRlcm5hbCBzdGF0ZSBpcyBtZXNzZWQgdXAuXG4gICAgICAvLyBTdG9wIGJ1aWxkaW5nIHRoZSBzdGFjayAoaXQncyBqdXN0IGEgbmljZSB0byBoYXZlKS5cbiAgICB9XG5cbiAgICBjb25zb2xlLnJlYWN0U3RhY2soc3RhY2spO1xuICB9LFxuICBwb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjazogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgY29uc29sZS5yZWFjdFN0YWNrRW5kICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUucmVhY3RTdGFja0VuZCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2suanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFdBUk5JTkc6IERPIE5PVCBtYW51YWxseSByZXF1aXJlIHRoaXMgbW9kdWxlLlxuICogVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBgaW52YXJpYW50KC4uLilgIHVzZWQgYnkgdGhlIGVycm9yIGNvZGUgc3lzdGVtXG4gKiBhbmQgd2lsbCBfb25seV8gYmUgcmVxdWlyZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgYmFiZWwgcGFzcy5cbiAqIEl0IGFsd2F5cyB0aHJvd3MuXG4gKi9cblxuZnVuY3Rpb24gcmVhY3RQcm9kSW52YXJpYW50KGNvZGUpIHtcbiAgdmFyIGFyZ0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIG1lc3NhZ2UgPSAnTWluaWZpZWQgUmVhY3QgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArICdodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD0nICsgY29kZTtcblxuICBmb3IgKHZhciBhcmdJZHggPSAwOyBhcmdJZHggPCBhcmdDb3VudDsgYXJnSWR4KyspIHtcbiAgICBtZXNzYWdlICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2FyZ0lkeCArIDFdKTtcbiAgfVxuXG4gIG1lc3NhZ2UgKz0gJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQnICsgJyBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nO1xuXG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IHJlYWN0UHJvZEludmFyaWFudCdzIG93biBmcmFtZVxuXG4gIHRocm93IGVycm9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0UHJvZEludmFyaWFudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvcmVhY3RQcm9kSW52YXJpYW50LmpzXG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBvd25lci5cbiAqXG4gKiBUaGUgY3VycmVudCBvd25lciBpcyB0aGUgY29tcG9uZW50IHdobyBzaG91bGQgb3duIGFueSBjb21wb25lbnRzIHRoYXQgYXJlXG4gKiBjdXJyZW50bHkgYmVpbmcgY29uc3RydWN0ZWQuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q3VycmVudE93bmVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvcmVhY3QuanNcbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanNcbi8vIG1vZHVsZSBpZCA9IDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHRyeSB7XG4gICAgLy8gJEZsb3dGaXhNZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7fSB9KTtcbiAgICBjYW5EZWZpbmVQcm9wZXJ0eSA9IHRydWU7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICAvLyBJRSB3aWxsIGZhaWwgb24gZGVmaW5lUHJvcGVydHlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbkRlZmluZVByb3BlcnR5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9jYW5EZWZpbmVQcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuLy8gbW9kdWxlIGlkID0gNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanNcbi8vIG1vZHVsZSBpZCA9IDUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qc1xuLy8gbW9kdWxlIGlkID0gNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanNcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBGb3JrZWQgZnJvbSBmYmpzL3dhcm5pbmc6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL2U2NmJhMjBhZDViZTQzM2ViNTQ0MjNmMmIwOTdkODI5MzI0ZDlkZTYvcGFja2FnZXMvZmJqcy9zcmMvX19mb3Jrc19fL3dhcm5pbmcuanNcbiAqXG4gKiBPbmx5IGNoYW5nZSBpcyB3ZSB1c2UgY29uc29sZS53YXJuIGluc3RlYWQgb2YgY29uc29sZS5lcnJvcixcbiAqIGFuZCBkbyBub3RoaW5nIHdoZW4gJ2NvbnNvbGUnIGlzIG5vdCBzdXBwb3J0ZWQuXG4gKiBUaGlzIHJlYWxseSBzaW1wbGlmaWVzIHRoZSBjb2RlLlxuICogLS0tXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIGxvd1ByaW9yaXR5V2FybmluZyA9IGZ1bmN0aW9uICgpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvd1ByaW9yaXR5V2FybmluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvbG93UHJpb3JpdHlXYXJuaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0QmFzZUNsYXNzZXMgPSByZXF1aXJlKCcuL1JlYWN0QmFzZUNsYXNzZXMnKTtcbnZhciBSZWFjdENoaWxkcmVuID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkcmVuJyk7XG52YXIgUmVhY3RET01GYWN0b3JpZXMgPSByZXF1aXJlKCcuL1JlYWN0RE9NRmFjdG9yaWVzJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXMnKTtcbnZhciBSZWFjdFZlcnNpb24gPSByZXF1aXJlKCcuL1JlYWN0VmVyc2lvbicpO1xuXG52YXIgY3JlYXRlUmVhY3RDbGFzcyA9IHJlcXVpcmUoJy4vY3JlYXRlQ2xhc3MnKTtcbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKCcuL29ubHlDaGlsZCcpO1xuXG52YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50O1xudmFyIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcbnZhciBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgbG93UHJpb3JpdHlXYXJuaW5nID0gcmVxdWlyZSgnLi9sb3dQcmlvcml0eVdhcm5pbmcnKTtcbiAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xuICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcbiAgdmFyIGRpZFdhcm5Qcm9wVHlwZXNEZXByZWNhdGVkID0gZmFsc2U7XG4gIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudDtcbiAgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xuICBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2xvbmVFbGVtZW50O1xufVxuXG52YXIgX19zcHJlYWQgPSBfYXNzaWduO1xudmFyIGNyZWF0ZU1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gIHJldHVybiBtaXhpbjtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciB3YXJuZWRGb3JTcHJlYWQgPSBmYWxzZTtcbiAgdmFyIHdhcm5lZEZvckNyZWF0ZU1peGluID0gZmFsc2U7XG4gIF9fc3ByZWFkID0gZnVuY3Rpb24gKCkge1xuICAgIGxvd1ByaW9yaXR5V2FybmluZyh3YXJuZWRGb3JTcHJlYWQsICdSZWFjdC5fX3NwcmVhZCBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIFVzZSAnICsgJ09iamVjdC5hc3NpZ24gZGlyZWN0bHkgb3IgYW5vdGhlciBoZWxwZXIgZnVuY3Rpb24gd2l0aCBzaW1pbGFyICcgKyAnc2VtYW50aWNzLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIHlvdXIgY29tcGlsZXIuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtc3ByZWFkLWRlcHJlY2F0aW9uIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgd2FybmVkRm9yU3ByZWFkID0gdHJ1ZTtcbiAgICByZXR1cm4gX2Fzc2lnbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIGNyZWF0ZU1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgbG93UHJpb3JpdHlXYXJuaW5nKHdhcm5lZEZvckNyZWF0ZU1peGluLCAnUmVhY3QuY3JlYXRlTWl4aW4gaXMgZGVwcmVjYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLiAnICsgJ0luIFJlYWN0IHYxNi4wLCBpdCB3aWxsIGJlIHJlbW92ZWQuICcgKyAnWW91IGNhbiB1c2UgdGhpcyBtaXhpbiBkaXJlY3RseSBpbnN0ZWFkLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL2NyZWF0ZW1peGluLXdhcy1uZXZlci1pbXBsZW1lbnRlZCBmb3IgbW9yZSBpbmZvLicpO1xuICAgIHdhcm5lZEZvckNyZWF0ZU1peGluID0gdHJ1ZTtcbiAgICByZXR1cm4gbWl4aW47XG4gIH07XG59XG5cbnZhciBSZWFjdCA9IHtcbiAgLy8gTW9kZXJuXG5cbiAgQ2hpbGRyZW46IHtcbiAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICB0b0FycmF5OiBSZWFjdENoaWxkcmVuLnRvQXJyYXksXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG5cbiAgQ29tcG9uZW50OiBSZWFjdEJhc2VDbGFzc2VzLkNvbXBvbmVudCxcbiAgUHVyZUNvbXBvbmVudDogUmVhY3RCYXNlQ2xhc3Nlcy5QdXJlQ29tcG9uZW50LFxuXG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gIGNsb25lRWxlbWVudDogY2xvbmVFbGVtZW50LFxuICBpc1ZhbGlkRWxlbWVudDogUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50LFxuXG4gIC8vIENsYXNzaWNcblxuICBQcm9wVHlwZXM6IFJlYWN0UHJvcFR5cGVzLFxuICBjcmVhdGVDbGFzczogY3JlYXRlUmVhY3RDbGFzcyxcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeSxcbiAgY3JlYXRlTWl4aW46IGNyZWF0ZU1peGluLFxuXG4gIC8vIFRoaXMgbG9va3MgRE9NIHNwZWNpZmljIGJ1dCB0aGVzZSBhcmUgYWN0dWFsbHkgaXNvbW9ycGhpYyBoZWxwZXJzXG4gIC8vIHNpbmNlIHRoZXkgYXJlIGp1c3QgZ2VuZXJhdGluZyBET00gc3RyaW5ncy5cbiAgRE9NOiBSZWFjdERPTUZhY3RvcmllcyxcblxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG5cbiAgLy8gRGVwcmVjYXRlZCBob29rIGZvciBKU1ggc3ByZWFkLCBkb24ndCB1c2UgdGhpcyBmb3IgYW55dGhpbmcuXG4gIF9fc3ByZWFkOiBfX3NwcmVhZFxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHdhcm5lZEZvckNyZWF0ZUNsYXNzID0gZmFsc2U7XG4gIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdCwgJ1Byb3BUeXBlcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb3dQcmlvcml0eVdhcm5pbmcoZGlkV2FyblByb3BUeXBlc0RlcHJlY2F0ZWQsICdBY2Nlc3NpbmcgUHJvcFR5cGVzIHZpYSB0aGUgbWFpbiBSZWFjdCBwYWNrYWdlIGlzIGRlcHJlY2F0ZWQsJyArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAgUmVhY3QgdjE2LjAuJyArICcgVXNlIHRoZSBsYXRlc3QgYXZhaWxhYmxlIHYxNS4qIHByb3AtdHlwZXMgcGFja2FnZSBmcm9tIG5wbSBpbnN0ZWFkLicgKyAnIEZvciBpbmZvIG9uIHVzYWdlLCBjb21wYXRpYmlsaXR5LCBtaWdyYXRpb24gYW5kIG1vcmUsIHNlZSAnICsgJ2h0dHBzOi8vZmIubWUvcHJvcC10eXBlcy1kb2NzJyk7XG4gICAgICAgIGRpZFdhcm5Qcm9wVHlwZXNEZXByZWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0LCAnY3JlYXRlQ2xhc3MnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nKHdhcm5lZEZvckNyZWF0ZUNsYXNzLCAnQWNjZXNzaW5nIGNyZWF0ZUNsYXNzIHZpYSB0aGUgbWFpbiBSZWFjdCBwYWNrYWdlIGlzIGRlcHJlY2F0ZWQsJyArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCB2MTYuMC4nICsgXCIgVXNlIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcyBpbnN0ZWFkLiBJZiB5b3UncmUgbm90IHlldCBcIiArICdyZWFkeSB0byBtaWdyYXRlLCBjcmVhdGUtcmVhY3QtY2xhc3MgdjE1LiogaXMgYXZhaWxhYmxlICcgKyAnb24gbnBtIGFzIGEgdGVtcG9yYXJ5LCBkcm9wLWluIHJlcGxhY2VtZW50LiAnICsgJ0ZvciBtb3JlIGluZm8gc2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtY3JlYXRlLWNsYXNzJyk7XG4gICAgICAgIHdhcm5lZEZvckNyZWF0ZUNsYXNzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlYWN0Q2xhc3M7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBSZWFjdC5ET00gZmFjdG9yaWVzIGFyZSBkZXByZWNhdGVkLiBXcmFwIHRoZXNlIG1ldGhvZHMgc28gdGhhdFxuICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgUmVhY3QuRE9NIG5hbWVzcGFjZSBhbmQgYWxlcnQgdXNlcnMgdG8gc3dpdGNoXG4gIC8vIHRvIHRoZSBgcmVhY3QtZG9tLWZhY3Rvcmllc2AgcGFja2FnZS5cbiAgUmVhY3QuRE9NID0ge307XG4gIHZhciB3YXJuZWRGb3JGYWN0b3JpZXMgPSBmYWxzZTtcbiAgT2JqZWN0LmtleXMoUmVhY3RET01GYWN0b3JpZXMpLmZvckVhY2goZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBSZWFjdC5ET01bZmFjdG9yeV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXdhcm5lZEZvckZhY3Rvcmllcykge1xuICAgICAgICBsb3dQcmlvcml0eVdhcm5pbmcoZmFsc2UsICdBY2Nlc3NpbmcgZmFjdG9yaWVzIGxpa2UgUmVhY3QuRE9NLiVzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYxNi4wKy4gVXNlIHRoZSAnICsgJ3JlYWN0LWRvbS1mYWN0b3JpZXMgcGFja2FnZSBpbnN0ZWFkLiAnICsgJyBWZXJzaW9uIDEuMCBwcm92aWRlcyBhIGRyb3AtaW4gcmVwbGFjZW1lbnQuJyArICcgRm9yIG1vcmUgaW5mbywgc2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtZG9tLWZhY3RvcmllcycsIGZhY3RvcnkpO1xuICAgICAgICB3YXJuZWRGb3JGYWN0b3JpZXMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0RE9NRmFjdG9yaWVzW2ZhY3RvcnldLmFwcGx5KFJlYWN0RE9NRmFjdG9yaWVzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdC5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9ub2RlLWxpYnMtYnJvd3Nlci9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgaWYgKHNhZmUgJiYgdGFyZ2V0W2tleV0pIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgZWxzZSBoaWRlKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH0gcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzXG4vLyBtb2R1bGUgaWQgPSA3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuLy8gbW9kdWxlIGlkID0gODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4vLyBtb2R1bGUgaWQgPSA4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuXG52YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIGxvd1ByaW9yaXR5V2FybmluZyA9IHJlcXVpcmUoJy4vbG93UHJpb3JpdHlXYXJuaW5nJyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5SZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4nKSA6IF9wcm9kSW52YXJpYW50KCc4NScpIDogdm9pZCAwO1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG4vKipcbiAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICpcbiAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICpcbiAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB1cGRhdGUgaXMgY29tcGxldGUuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyk7XG4gIGlmIChjYWxsYmFjaykge1xuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xuICB9XG59O1xuXG4vKipcbiAqIERlcHJlY2F0ZWQgQVBJcy4gVGhlc2UgQVBJcyB1c2VkIHRvIGV4aXN0IG9uIGNsYXNzaWMgUmVhY3QgY2xhc3NlcyBidXQgc2luY2VcbiAqIHdlIHdvdWxkIGxpa2UgdG8gZGVwcmVjYXRlIHRoZW0sIHdlJ3JlIG5vdCBnb2luZyB0byBtb3ZlIHRoZW0gb3ZlciB0byB0aGlzXG4gKiBtb2Rlcm4gYmFzZSBjbGFzcy4gSW5zdGVhZCwgd2UgZGVmaW5lIGEgZ2V0dGVyIHRoYXQgd2FybnMgaWYgaXQncyBhY2Nlc3NlZC5cbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIG1ldGhvZE5hbWUsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGZvciAodmFyIGZuTmFtZSBpbiBkZXByZWNhdGVkQVBJcykge1xuICAgIGlmIChkZXByZWNhdGVkQVBJcy5oYXNPd25Qcm9wZXJ0eShmbk5hbWUpKSB7XG4gICAgICBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcoZm5OYW1lLCBkZXByZWNhdGVkQVBJc1tmbk5hbWVdKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBCYXNlIGNsYXNzIGhlbHBlcnMgZm9yIHRoZSB1cGRhdGluZyBzdGF0ZSBvZiBhIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gUmVhY3RQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIC8vIER1cGxpY2F0ZWQgZnJvbSBSZWFjdENvbXBvbmVudC5cbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgLy8gV2UgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCB1cGRhdGVyIGJ1dCB0aGUgcmVhbCBvbmUgZ2V0cyBpbmplY3RlZCBieSB0aGVcbiAgLy8gcmVuZGVyZXIuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cbkNvbXBvbmVudER1bW15LnByb3RvdHlwZSA9IFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZTtcblJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50RHVtbXkoKTtcblJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWFjdFB1cmVDb21wb25lbnQ7XG4vLyBBdm9pZCBhbiBleHRyYSBwcm90b3R5cGUganVtcCBmb3IgdGhlc2UgbWV0aG9kcy5cbl9hc3NpZ24oUmVhY3RQdXJlQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RDb21wb25lbnQucHJvdG90eXBlKTtcblJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgUHVyZUNvbXBvbmVudDogUmVhY3RQdXJlQ29tcG9uZW50XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdEJhc2VDbGFzc2VzLmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIGNvbnN0cnVjdG9yICYmIChjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBjb25zdHJ1Y3Rvci5uYW1lKSB8fCAnUmVhY3RDbGFzcycpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgc3RhdGUuIFRoaXMgb25seSBleGlzdHMgYmVjYXVzZSBfcGVuZGluZ1N0YXRlIGlzXG4gICAqIGludGVybmFsLiBUaGlzIHByb3ZpZGVzIGEgbWVyZ2luZyBzdHJhdGVneSB0aGF0IGlzIG5vdCBhdmFpbGFibGUgdG8gZGVlcFxuICAgKiBwcm9wZXJ0aWVzIHdoaWNoIGlzIGNvbmZ1c2luZy4gVE9ETzogRXhwb3NlIHBlbmRpbmdTdGF0ZSBvciBkb24ndCB1c2UgaXRcbiAgICogZHVyaW5nIHRoZSBtZXJnZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlLmpzXG4vLyBtb2R1bGUgaWQgPSA4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50IHR5cGUuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sWydmb3InXSAmJiBTeW1ib2xbJ2ZvciddKCdyZWFjdC5lbGVtZW50JykgfHwgMHhlYWM3O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50U3ltYm9sLmpzXG4vLyBtb2R1bGUgaWQgPSA4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuXG52YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7IC8vIEJlZm9yZSBTeW1ib2wgc3BlYy5cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gKlxuICogQmUgc3VyZSB0byBpbnZva2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGl0ZXJhYmxlIGFzIGNvbnRleHQ6XG4gKlxuICogICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihteUl0ZXJhYmxlKTtcbiAqICAgICBpZiAoaXRlcmF0b3JGbikge1xuICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICogICAgICAgLi4uXG4gKiAgICAgfVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gbWF5YmVJdGVyYWJsZVxuICogQHJldHVybiB7P2Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgdmFyIGl0ZXJhdG9yRm4gPSBtYXliZUl0ZXJhYmxlICYmIChJVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtJVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJdGVyYXRvckZuO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXRJdGVyYXRvckZuLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKipcbiAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG4gKiB3aGljaCB2YWxpZGF0ZXMgdGhlIHByb3BzIHBhc3NlZCB0byB0aGUgZWxlbWVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICogdXNlZCBvbmx5IGluIERFViBhbmQgY291bGQgYmUgcmVwbGFjZWQgYnkgYSBzdGF0aWMgdHlwZSBjaGVja2VyIGZvciBsYW5ndWFnZXNcbiAqIHRoYXQgc3VwcG9ydCBpdC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcblxudmFyIGNoZWNrUmVhY3RUeXBlU3BlYyA9IHJlcXVpcmUoJy4vY2hlY2tSZWFjdFR5cGVTcGVjJyk7XG5cbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSByZXF1aXJlKCcuL2xvd1ByaW9yaXR5V2FybmluZycpO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShlbGVtZW50UHJvcHMpIHtcbiAgaWYgKGVsZW1lbnRQcm9wcyAhPT0gbnVsbCAmJiBlbGVtZW50UHJvcHMgIT09IHVuZGVmaW5lZCAmJiBlbGVtZW50UHJvcHMuX19zb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBzb3VyY2UgPSBlbGVtZW50UHJvcHMuX19zb3VyY2U7XG4gICAgdmFyIGZpbGVOYW1lID0gc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcbiAgICB2YXIgbGluZU51bWJlciA9IHNvdXJjZS5saW5lTnVtYmVyO1xuICAgIHJldHVybiAnIENoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKSB7XG4gIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgaWYgKCFpbmZvKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGluZm8gPSAnIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPCcgKyBwYXJlbnROYW1lICsgJz4uJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZm87XG59XG5cbi8qKlxuICogV2FybiBpZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgYW4gZXhwbGljaXQga2V5IGFzc2lnbmVkIHRvIGl0LlxuICogVGhpcyBlbGVtZW50IGlzIGluIGFuIGFycmF5LiBUaGUgYXJyYXkgY291bGQgZ3JvdyBhbmQgc2hyaW5rIG9yIGJlXG4gKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG9cbiAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LiBFcnJvciBzdGF0dXNlcyBhcmUgY2FjaGVkIHNvIGEgd2FybmluZ1xuICogd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICBpZiAoIWVsZW1lbnQuX3N0b3JlIHx8IGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cbiAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nLnVuaXF1ZUtleSB8fCAob3duZXJIYXNLZXlVc2VXYXJuaW5nLnVuaXF1ZUtleSA9IHt9KTtcblxuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9IGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSk7XG4gIGlmIChtZW1vaXplcltjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgIHJldHVybjtcbiAgfVxuICBtZW1vaXplcltjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7XG5cbiAgLy8gVXN1YWxseSB0aGUgY3VycmVudCBvd25lciBpcyB0aGUgb2ZmZW5kZXIsIGJ1dCBpZiBpdCBhY2NlcHRzIGNoaWxkcmVuIGFzIGFcbiAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAvLyBhc3NpZ25pbmcgaXQgYSBrZXkuXG4gIHZhciBjaGlsZE93bmVyID0gJyc7XG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuX293bmVyICYmIGVsZW1lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgLy8gR2l2ZSB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgY2hpbGRPd25lciA9ICcgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gJyArIGVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJztcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4lcycsIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8sIGNoaWxkT3duZXIsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oZWxlbWVudCkpIDogdm9pZCAwO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgIC8vIEVudHJ5IGl0ZXJhdG9ycyBwcm92aWRlIGltcGxpY2l0IGtleXMuXG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gZWxlbWVudCwgdmFsaWRhdGUgdGhhdCBpdHMgcHJvcHMgZm9sbG93IHRoZSBwcm9wVHlwZXMgZGVmaW5pdGlvbixcbiAqIHByb3ZpZGVkIGJ5IHRoZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENsYXNzID0gZWxlbWVudC50eXBlO1xuICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZTtcbiAgaWYgKGNvbXBvbmVudENsYXNzLnByb3BUeXBlcykge1xuICAgIGNoZWNrUmVhY3RUeXBlU3BlYyhjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZWxlbWVudCwgbnVsbCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gIH1cbn1cblxudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcbiAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciB2YWxpZFR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbic7XG4gICAgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLlxuICAgIGlmICghdmFsaWRUeXBlKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBpbmZvID0gJyc7XG4gICAgICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXModHlwZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbi5cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzb3VyY2VJbmZvID0gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0ocHJvcHMpO1xuICAgICAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgICAgIGluZm8gKz0gc291cmNlSW5mbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5mbyArPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKCk7XG5cbiAgICAgICAgdmFyIGN1cnJlbnRTb3VyY2UgPSBwcm9wcyAhPT0gbnVsbCAmJiBwcm9wcyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLl9fc291cmNlICE9PSB1bmRlZmluZWQgPyBwcm9wcy5fX3NvdXJjZSA6IG51bGw7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sucHVzaE5vblN0YW5kYXJkV2FybmluZ1N0YWNrKHRydWUsIGN1cnJlbnRTb3VyY2UpO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZSA9PSBudWxsID8gdHlwZSA6IHR5cGVvZiB0eXBlLCBpbmZvKSA6IHZvaWQgMDtcbiAgICAgICAgUmVhY3RDb21wb25lbnRUcmVlSG9vay5wb3BOb25TdGFuZGFyZFdhcm5pbmdTdGFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG4gICAgLy8gVE9ETzogRHJvcCB0aGlzIHdoZW4gdGhlc2UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50LlxuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIC8vIFNraXAga2V5IHdhcm5pbmcgaWYgdGhlIHR5cGUgaXNuJ3QgdmFsaWQgc2luY2Ugb3VyIGtleSB2YWxpZGF0aW9uIGxvZ2ljXG4gICAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmcgZXJyb3JzLlxuICAgIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC5cbiAgICAvLyAoUmVuZGVyaW5nIHdpbGwgdGhyb3cgd2l0aCBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgYXMgc29vbiBhcyB0aGUgdHlwZSBpc1xuICAgIC8vIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcbiAgICBpZiAodmFsaWRUeXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIHR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgY3JlYXRlRmFjdG9yeTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgdmFsaWRhdGVkRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gICAgLy8gTGVnYWN5IGhvb2sgVE9ETzogV2FybiBpZiB0aGlzIGlzIGFjY2Vzc2VkXG4gICAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbGlkYXRlZEZhY3RvcnksICd0eXBlJywge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbG93UHJpb3JpdHlXYXJuaW5nKGZhbHNlLCAnRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgJyArICdiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LicpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgICAgICAgICB2YWx1ZTogdHlwZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xuICB9LFxuXG4gIGNsb25lRWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gICAgfVxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudFZhbGlkYXRvcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICAgIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gICAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5zdGFjayA9ICcnO1xuICB9XG4gIC8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cbiAgUHJvcFR5cGVFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlID0ge307XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHNlY3JldCAhPT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgICAgICAgICAvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2VcbiAgICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICdVc2UgYFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpYCB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIE9sZCBiZWhhdmlvciBmb3IgcGVvcGxlIHVzaW5nIFJlYWN0LlByb3BUeXBlc1xuICAgICAgICAgIHZhciBjYWNoZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnOicgKyBwcm9wTmFtZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldICYmXG4gICAgICAgICAgICAvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IDwgM1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiAnICtcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGZvciB0aGUgYCVzYCBwcm9wIG9uIGAlc2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgJ2FuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICAgJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJyArXG4gICAgICAgICAgICAgICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nLFxuICAgICAgICAgICAgICBwcm9wRnVsbE5hbWUsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZVtjYWNoZUtleV0gPSB0cnVlO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgJyArICgnaW4gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYG51bGxgLicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCBpbiAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC4nKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICAgIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG4gICAgICAgIC8vIGNoZWNrLCBidXQgd2UgY2FuIG9mZmVyIGEgbW9yZSBwcmVjaXNlIGVycm9yIG1lc3NhZ2UgaGVyZSByYXRoZXIgdGhhblxuICAgICAgICAvLyAnb2YgdHlwZSBgb2JqZWN0YCcuXG4gICAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJlY2lzZVR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2AnICsgZXhwZWN0ZWRUeXBlICsgJ2AuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJywgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXMocHJvcFZhbHVlLCBleHBlY3RlZFZhbHVlc1tpXSkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAocHJvcFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnSW52YWxpZCBhcmd1bWVudCBzdXBwbGlkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICVzIGF0IGluZGV4ICVzLicsXG4gICAgICAgICAgZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKGNoZWNrZXIpLFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBwcm9wVmFsdWUpIHtcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgcmV0dXJuICFwcm9wVmFsdWU7XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BWYWx1ZS5ldmVyeShpc05vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKHByb3BWYWx1ZSk7XG4gICAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKHByb3BWYWx1ZSk7XG4gICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IHByb3BWYWx1ZS5lbnRyaWVzKSB7XG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIGlmICghaXNOb2RlKHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTm9kZShlbnRyeVsxXSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTeW1ib2wocHJvcFR5cGUsIHByb3BWYWx1ZSkge1xuICAgIC8vIE5hdGl2ZSBTeW1ib2wuXG4gICAgaWYgKHByb3BUeXBlID09PSAnc3ltYm9sJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSA9PT0gJ1N5bWJvbCdcbiAgICBpZiAocHJvcFZhbHVlWydAQHRvU3RyaW5nVGFnJ10gPT09ICdTeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayBmb3Igbm9uLXNwZWMgY29tcGxpYW50IFN5bWJvbHMgd2hpY2ggYXJlIHBvbHlmaWxsZWQuXG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgcHJvcFZhbHVlIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuXG4gIGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvYmplY3QnIGZvciB0eXBlb2YgYSBSZWdFeHAuIFdlJ2xsIG5vcm1hbGl6ZSB0aGlzIGhlcmUgc28gdGhhdCAvYmxhL1xuICAgICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuXG4gICAgICByZXR1cm4gJ29iamVjdCc7XG4gICAgfVxuICAgIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdzeW1ib2wnO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gIC8vIFNlZSBgY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXJgLlxuICBmdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcFZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gJycgKyBwcm9wVmFsdWU7XG4gICAgfVxuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIHN0cmluZyB0aGF0IGlzIHBvc3RmaXhlZCB0byBhIHdhcm5pbmcgYWJvdXQgYW4gaW52YWxpZCB0eXBlLlxuICAvLyBGb3IgZXhhbXBsZSwgXCJ1bmRlZmluZWRcIiBvciBcIm9mIHR5cGUgYXJyYXlcIlxuICBmdW5jdGlvbiBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcodmFsdWUpIHtcbiAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiAnYW4gJyArIHR5cGU7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgY2FzZSAncmVnZXhwJzpcbiAgICAgICAgcmV0dXJuICdhICcgKyB0eXBlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICAgIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgcmV0dXJuIEFOT05ZTU9VUztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBjaGVja1Byb3BUeXBlcztcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubG9hZEdldEluaXRpYWxQcm9wcyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcicpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNUb0dlbmVyYXRvcjIpO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduJyk7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbnZhciBsb2FkR2V0SW5pdGlhbFByb3BzID0gZXhwb3J0cy5sb2FkR2V0SW5pdGlhbFByb3BzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3JlZiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZShDb21wb25lbnQsIGN0eCkge1xuICAgIHZhciBwcm9wcywgY29tcE5hbWUsIG1lc3NhZ2U7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgaWYgKENvbXBvbmVudC5nZXRJbml0aWFsUHJvcHMpIHtcbiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCB7fSk7XG5cbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDtcbiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQuZ2V0SW5pdGlhbFByb3BzKGN0eCk7XG5cbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBwcm9wcyA9IF9jb250ZXh0LnNlbnQ7XG5cbiAgICAgICAgICAgIGlmICghKCFwcm9wcyAmJiAoIWN0eC5yZXMgfHwgIWN0eC5yZXMuZmluaXNoZWQpKSkge1xuICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbXBOYW1lID0gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnXCInICsgY29tcE5hbWUgKyAnLmdldEluaXRpYWxQcm9wcygpXCIgc2hvdWxkIHJlc29sdmUgdG8gYW4gb2JqZWN0LiBCdXQgZm91bmQgXCInICsgcHJvcHMgKyAnXCIgaW5zdGVhZC4nO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgcHJvcHMpO1xuXG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICB9KSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGxvYWRHZXRJbml0aWFsUHJvcHMoX3gyLCBfeDMpIHtcbiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSgpO1xuXG5leHBvcnRzLndhcm4gPSB3YXJuO1xuZXhwb3J0cy5leGVjT25jZSA9IGV4ZWNPbmNlO1xuZXhwb3J0cy5kZXByZWNhdGVkID0gZGVwcmVjYXRlZDtcbmV4cG9ydHMucHJpbnRBbmRFeGl0ID0gcHJpbnRBbmRFeGl0O1xuZXhwb3J0cy5nZXREaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lO1xuZXhwb3J0cy5nZXRMb2NhdGlvbk9yaWdpbiA9IGdldExvY2F0aW9uT3JpZ2luO1xuZXhwb3J0cy5nZXRVUkwgPSBnZXRVUkw7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHdhcm4obWVzc2FnZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhlY09uY2UoZm4pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgdXNlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICghdXNlZCkge1xuICAgICAgdXNlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseShfdGhpcywgYXJncyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKGZuLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSByZXR1cm4gZm47XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICB2YXIgbmV3Rm4gPSBmdW5jdGlvbiBuZXdGbigpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG5cbiAgLy8gY29weSBhbGwgcHJvcGVydGllc1xuICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkobmV3Rm4sIGZuKTtcblxuICByZXR1cm4gbmV3Rm47XG59XG5cbmZ1bmN0aW9uIHByaW50QW5kRXhpdChtZXNzYWdlKSB7XG4gIHZhciBjb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuXG4gIGlmIChjb2RlID09PSAwKSB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuXG4gIHByb2Nlc3MuZXhpdChjb2RlKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ1Vua25vd24nO1xufVxuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbk9yaWdpbigpIHtcbiAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICBwcm90b2NvbCA9IF93aW5kb3ckbG9jYXRpb24ucHJvdG9jb2wsXG4gICAgICBob3N0bmFtZSA9IF93aW5kb3ckbG9jYXRpb24uaG9zdG5hbWUsXG4gICAgICBwb3J0ID0gX3dpbmRvdyRsb2NhdGlvbi5wb3J0O1xuXG4gIHJldHVybiBwcm90b2NvbCArICcvLycgKyBob3N0bmFtZSArIChwb3J0ID8gJzonICsgcG9ydCA6ICcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0VVJMKCkge1xuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4gIHZhciBvcmlnaW4gPSBnZXRMb2NhdGlvbk9yaWdpbigpO1xuICByZXR1cm4gaHJlZi5zdWJzdHJpbmcob3JpZ2luLmxlbmd0aCk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMTAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zZXRcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Zyb20gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9hcnJheS9mcm9tXCIpO1xuXG52YXIgX2Zyb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnJvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICgwLCBfZnJvbTIuZGVmYXVsdCkoYXJyKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDEwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gUmVhY3QgMTUuNSByZWZlcmVuY2VzIHRoaXMgbW9kdWxlLCBhbmQgYXNzdW1lcyBQcm9wVHlwZXMgYXJlIHN0aWxsIGNhbGxhYmxlIGluIHByb2R1Y3Rpb24uXG4vLyBUaGVyZWZvcmUgd2UgcmUtZXhwb3J0IGRldmVsb3BtZW50LW9ubHkgdmVyc2lvbiB3aXRoIGFsbCB0aGUgUHJvcFR5cGVzIGNoZWNrcyBoZXJlLlxuLy8gSG93ZXZlciBpZiBvbmUgaXMgbWlncmF0aW5nIHRvIHRoZSBgcHJvcC10eXBlc2AgbnBtIGxpYnJhcnksIHRoZXkgd2lsbCBnbyB0aHJvdWdoIHRoZVxuLy8gYGluZGV4LmpzYCBlbnRyeSBwb2ludCwgYW5kIGl0IHdpbGwgYnJhbmNoIGRlcGVuZGluZyBvbiB0aGUgZW52aXJvbm1lbnQuXG52YXIgZmFjdG9yeSA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQpIHtcbiAgLy8gSXQgaXMgc3RpbGwgYWxsb3dlZCBpbiAxNS41LlxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IGZhbHNlO1xuICByZXR1cm4gZmFjdG9yeShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3Byb21pc2VcIik7XG5cbnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdlbiA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBzdGVwKGtleSwgYXJnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIF9wcm9taXNlMi5kZWZhdWx0LnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc3RlcChcInRocm93XCIsIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXAoXCJuZXh0XCIpO1xuICAgIH0pO1xuICB9O1xufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mcm9tO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanNcbi8vIG1vZHVsZSBpZCA9IDExN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9hc3NpZ24yLmRlZmF1bHQgfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDIgNSIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gMTM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMTQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIGlmIChpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgaWYgKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgkcmVwbGFjZXIpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDE0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpIHtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLnR3b0FyZ3VtZW50UG9vbGVyO1xudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcjtcblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCAnJCYvJyk7XG59XG5cbi8qKlxuICogUG9vbGVkQ2xhc3MgcmVwcmVzZW50aW5nIHRoZSBib29ra2VlcGluZyBhc3NvY2lhdGVkIHdpdGggcGVyZm9ybWluZyBhIGNoaWxkXG4gKiB0cmF2ZXJzYWwuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgRm9yRWFjaEJvb2tLZWVwaW5nXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gZm9yRWFjaEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gdHJhdmVyc2FsIHdpdGguXG4gKiBAcGFyYW0gez8qfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gY29udGV4dCB3aXRoLlxuICovXG5mdW5jdGlvbiBGb3JFYWNoQm9va0tlZXBpbmcoZm9yRWFjaEZ1bmN0aW9uLCBmb3JFYWNoQ29udGV4dCkge1xuICB0aGlzLmZ1bmMgPSBmb3JFYWNoRnVuY3Rpb247XG4gIHRoaXMuY29udGV4dCA9IGZvckVhY2hDb250ZXh0O1xuICB0aGlzLmNvdW50ID0gMDtcbn1cbkZvckVhY2hCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5mdW5jID0gbnVsbDtcbiAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgdGhpcy5jb3VudCA9IDA7XG59O1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZywgdHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQoYm9va0tlZXBpbmcsIGNoaWxkLCBuYW1lKSB7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG4gIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLmZvcmVhY2hcbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmNcbiAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBGb3JFYWNoQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIG1hcHBpbmcuIEFsbG93cyBhdm9pZGluZyBiaW5kaW5nIGNhbGxiYWNrcy5cbiAqXG4gKiBAY29uc3RydWN0b3IgTWFwQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7ISp9IG1hcFJlc3VsdCBPYmplY3QgY29udGFpbmluZyB0aGUgb3JkZXJlZCBtYXAgb2YgcmVzdWx0cy5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBtYXBGdW5jdGlvbiBGdW5jdGlvbiB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IG1hcENvbnRleHQgQ29udGV4dCB0byBwZXJmb3JtIG1hcHBpbmcgd2l0aC5cbiAqL1xuZnVuY3Rpb24gTWFwQm9va0tlZXBpbmcobWFwUmVzdWx0LCBrZXlQcmVmaXgsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIHRoaXMucmVzdWx0ID0gbWFwUmVzdWx0O1xuICB0aGlzLmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgdGhpcy5mdW5jID0gbWFwRnVuY3Rpb247XG4gIHRoaXMuY29udGV4dCA9IG1hcENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuTWFwQm9va0tlZXBpbmcucHJvdG90eXBlLmRlc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVzdWx0ID0gbnVsbDtcbiAgdGhpcy5rZXlQcmVmaXggPSBudWxsO1xuICB0aGlzLmZ1bmMgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNvdW50ID0gMDtcbn07XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oTWFwQm9va0tlZXBpbmcsIGZvdXJBcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQoYm9va0tlZXBpbmcsIGNoaWxkLCBjaGlsZEtleSkge1xuICB2YXIgcmVzdWx0ID0gYm9va0tlZXBpbmcucmVzdWx0LFxuICAgICAga2V5UHJlZml4ID0gYm9va0tlZXBpbmcua2V5UHJlZml4LFxuICAgICAgZnVuYyA9IGJvb2tLZWVwaW5nLmZ1bmMsXG4gICAgICBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcblxuXG4gIHZhciBtYXBwZWRDaGlsZCA9IGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG4gIGlmIChBcnJheS5pc0FycmF5KG1hcHBlZENoaWxkKSkge1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobWFwcGVkQ2hpbGQpKSB7XG4gICAgICBtYXBwZWRDaGlsZCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsXG4gICAgICAvLyBLZWVwIGJvdGggdGhlIChtYXBwZWQpIGFuZCBvbGQga2V5cyBpZiB0aGV5IGRpZmZlciwganVzdCBhc1xuICAgICAgLy8gdHJhdmVyc2VBbGxDaGlsZHJlbiB1c2VkIHRvIGRvIGZvciBvYmplY3RzIGFzIGNoaWxkcmVuXG4gICAgICBrZXlQcmVmaXggKyAobWFwcGVkQ2hpbGQua2V5ICYmICghY2hpbGQgfHwgY2hpbGQua2V5ICE9PSBtYXBwZWRDaGlsZC5rZXkpID8gZXNjYXBlVXNlclByb3ZpZGVkS2V5KG1hcHBlZENoaWxkLmtleSkgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCBhcnJheSwgcHJlZml4LCBmdW5jLCBjb250ZXh0KSB7XG4gIHZhciBlc2NhcGVkUHJlZml4ID0gJyc7XG4gIGlmIChwcmVmaXggIT0gbnVsbCkge1xuICAgIGVzY2FwZWRQcmVmaXggPSBlc2NhcGVVc2VyUHJvdmlkZWRLZXkocHJlZml4KSArICcvJztcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gTWFwQm9va0tlZXBpbmcuZ2V0UG9vbGVkKGFycmF5LCBlc2NhcGVkUHJlZml4LCBmdW5jLCBjb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIE1hcHMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5tYXBcbiAqXG4gKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmdW5jIFRoZSBtYXAgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgbWFwRnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuYywgY29udGV4dCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzXG4gKiBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5jb3VudFxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIGNoaWxkcmVuIG9iamVjdCAodHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gKSBhbmRcbiAqIHJldHVybiBhbiBhcnJheSB3aXRoIGFwcHJvcHJpYXRlbHkgcmUta2V5ZWQgY2hpbGRyZW4uXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLnRvYXJyYXlcbiAqL1xuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDogbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCxcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDaGlsZHJlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvUmVhY3RDaGlsZHJlbi5qc1xuLy8gbW9kdWxlIGlkID0gMTU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2ZcbiAqIGFyZ3VtZW50cy4gQSBjb21wbGV0ZWx5IGdlbmVyaWMgcG9vbGVyIGlzIGVhc3kgdG8gaW1wbGVtZW50LCBidXQgd291bGRcbiAqIHJlcXVpcmUgYWNjZXNzaW5nIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIEluIGVhY2ggb2YgdGhlc2UsIGB0aGlzYCByZWZlcnMgdG9cbiAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cbiAqIGhlcmUsIG9yIGluIHRoZWlyIG93biBmaWxlcy5cbiAqL1xudmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGNvcHlGaWVsZHNGcm9tKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGNvcHlGaWVsZHNGcm9tKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhjb3B5RmllbGRzRnJvbSk7XG4gIH1cbn07XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICB9XG59O1xuXG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0KSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IF9wcm9kSW52YXJpYW50KCcyNScpIDogdm9pZCAwO1xuICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gIH1cbn07XG5cbnZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xudmFyIERFRkFVTFRfUE9PTEVSID0gb25lQXJndW1lbnRQb29sZXI7XG5cbi8qKlxuICogQXVnbWVudHMgYENvcHlDb25zdHJ1Y3RvcmAgdG8gYmUgYSBwb29sYWJsZSBjbGFzcywgYXVnbWVudGluZyBvbmx5IHRoZSBjbGFzc1xuICogaXRzZWxmIChzdGF0aWNhbGx5KSBub3QgYWRkaW5nIGFueSBwcm90b3R5cGljYWwgZmllbGRzLiBBbnkgQ29weUNvbnN0cnVjdG9yXG4gKiB5b3UgZ2l2ZSB0aGlzIG1heSBoYXZlIGEgYHBvb2xTaXplYCBwcm9wZXJ0eSwgYW5kIHdpbGwgbG9vayBmb3IgYVxuICogcHJvdG90eXBpY2FsIGBkZXN0cnVjdG9yYCBvbiBpbnN0YW5jZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb29sZXIgQ3VzdG9taXphYmxlIHBvb2xlci5cbiAqL1xudmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uIChDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICAvLyBDYXN0aW5nIGFzIGFueSBzbyB0aGF0IGZsb3cgaWdub3JlcyB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uIGFuZCB0cnVzdHNcbiAgLy8gaXQgdG8gbWF0Y2ggdGhlIHR5cGUgd2UgZGVjbGFyZWRcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZvdXJBcmd1bWVudFBvb2xlcjogZm91ckFyZ3VtZW50UG9vbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qc1xuLy8gbW9kdWxlIGlkID0gMTU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50U3ltYm9sJyk7XG5cbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgS2V5RXNjYXBlVXRpbHMgPSByZXF1aXJlKCcuL0tleUVzY2FwZVV0aWxzJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFNFUEFSQVRPUiA9ICcuJztcbnZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG5cbi8qKlxuICogVGhpcyBpcyBpbmxpbmVkIGZyb20gUmVhY3RFbGVtZW50IHNpbmNlIHRoaXMgZmlsZSBpcyBzaGFyZWQgYmV0d2VlblxuICogaXNvbW9ycGhpYyBhbmQgcmVuZGVyZXJzLiBXZSBjb3VsZCBleHRyYWN0IHRoaXMgdG8gYVxuICpcbiAqL1xuXG4vKipcbiAqIFRPRE86IFRlc3QgdGhhdCBhIHNpbmdsZSBjaGlsZCBhbmQgYW4gYXJyYXkgd2l0aCBvbmUgaXRlbSBoYXZlIHRoZSBzYW1lIGtleVxuICogcGF0dGVybi5cbiAqL1xuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEga2V5IHN0cmluZyB0aGF0IGlkZW50aWZpZXMgYSBjb21wb25lbnQgd2l0aGluIGEgc2V0LlxuICpcbiAqIEBwYXJhbSB7Kn0gY29tcG9uZW50IEEgY29tcG9uZW50IHRoYXQgY291bGQgY29udGFpbiBhIG1hbnVhbCBrZXkuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggdGhhdCBpcyB1c2VkIGlmIGEgbWFudWFsIGtleSBpcyBub3QgcHJvdmlkZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudEtleShjb21wb25lbnQsIGluZGV4KSB7XG4gIC8vIERvIHNvbWUgdHlwZWNoZWNraW5nIGhlcmUgc2luY2Ugd2UgY2FsbCB0aGlzIGJsaW5kbHkuIFdlIHdhbnQgdG8gZW5zdXJlXG4gIC8vIHRoYXQgd2UgZG9uJ3QgYmxvY2sgcG90ZW50aWFsIGZ1dHVyZSBFUyBBUElzLlxuICBpZiAoY29tcG9uZW50ICYmIHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnICYmIGNvbXBvbmVudC5rZXkgIT0gbnVsbCkge1xuICAgIC8vIEV4cGxpY2l0IGtleVxuICAgIHJldHVybiBLZXlFc2NhcGVVdGlscy5lc2NhcGUoY29tcG9uZW50LmtleSk7XG4gIH1cbiAgLy8gSW1wbGljaXQga2V5IGRldGVybWluZWQgYnkgdGhlIGluZGV4IGluIHRoZSBzZXRcbiAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVNvRmFyIE5hbWUgb2YgdGhlIGtleSBwYXRoIHNvIGZhci5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2l0aCBlYWNoIGNoaWxkIGZvdW5kLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IFVzZWQgdG8gcGFzcyBpbmZvcm1hdGlvbiB0aHJvdWdob3V0IHRoZSB0cmF2ZXJzYWxcbiAqIHByb2Nlc3MuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sIG5hbWVTb0ZhciwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcblxuICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgLy8gQWxsIG9mIHRoZSBhYm92ZSBhcmUgcGVyY2VpdmVkIGFzIG51bGwuXG4gICAgY2hpbGRyZW4gPSBudWxsO1xuICB9XG5cbiAgaWYgKGNoaWxkcmVuID09PSBudWxsIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8XG4gIC8vIFRoZSBmb2xsb3dpbmcgaXMgaW5saW5lZCBmcm9tIFJlYWN0RWxlbWVudC4gVGhpcyBtZWFucyB3ZSBjYW4gb3B0aW1pemVcbiAgLy8gc29tZSBjaGVja3MuIFJlYWN0IEZpYmVyIGFsc28gaW5saW5lcyB0aGlzIGxvZ2ljIGZvciBzaW1pbGFyIHB1cnBvc2VzLlxuICB0eXBlID09PSAnb2JqZWN0JyAmJiBjaGlsZHJlbi4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LCBjaGlsZHJlbixcbiAgICAvLyBJZiBpdCdzIHRoZSBvbmx5IGNoaWxkLCB0cmVhdCB0aGUgbmFtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBhbiBhcnJheVxuICAgIC8vIHNvIHRoYXQgaXQncyBjb25zaXN0ZW50IGlmIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gZ3Jvd3MuXG4gICAgbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIpO1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgdmFyIGNoaWxkO1xuICB2YXIgbmV4dE5hbWU7XG4gIHZhciBzdWJ0cmVlQ291bnQgPSAwOyAvLyBDb3VudCBvZiBjaGlsZHJlbiBmb3VuZCBpbiB0aGUgY3VycmVudCBzdWJ0cmVlLlxuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SIDogbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpKTtcbiAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pO1xuICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwoY2hpbGRyZW4pO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gY2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICB2YXIgaWkgPSAwO1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgY2hpbGQgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGlpKyspO1xuICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtID0gJyc7XG4gICAgICAgICAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciBtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgaWYgKG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lKSB7XG4gICAgICAgICAgICAgIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0gPSAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUgKyAnYC4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkaWRXYXJuQWJvdXRNYXBzLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gJyArICdleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSAnICsgJ3NlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLiVzJywgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSkgOiB2b2lkIDA7XG4gICAgICAgICAgZGlkV2FybkFib3V0TWFwcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgY2hpbGQgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBLZXlFc2NhcGVVdGlscy5lc2NhcGUoZW50cnlbMF0pICsgU1VCU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCAwKTtcbiAgICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBhZGRlbmR1bSA9ICcnO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgYWRkZW5kdW0gPSAnIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkIG9yIHdyYXAgdGhlIG9iamVjdCB1c2luZyBjcmVhdGVGcmFnbWVudChvYmplY3QpIGZyb20gdGhlICcgKyAnUmVhY3QgYWRkLW9ucy4nO1xuICAgICAgICBpZiAoY2hpbGRyZW4uX2lzUmVhY3RFbGVtZW50KSB7XG4gICAgICAgICAgYWRkZW5kdW0gPSBcIiBJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgXCIgKyAndmVyc2lvbiBvZiBSZWFjdC4gTWFrZSBzdXJlIHRvIHVzZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0Lic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO1xuICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBhZGRlbmR1bSArPSAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW5TdHJpbmcgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ09iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzJywgY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nLCBhZGRlbmR1bSkgOiBfcHJvZEludmFyaWFudCgnMzEnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VidHJlZUNvdW50O1xufVxuXG4vKipcbiAqIFRyYXZlcnNlcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsIGJ1dFxuICogbWlnaHQgYWxzbyBiZSBzcGVjaWZpZWQgdGhyb3VnaCBhdHRyaWJ1dGVzOlxuICpcbiAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbiwgLi4uKWBcbiAqIC0gYHRyYXZlcnNlQWxsQ2hpbGRyZW4odGhpcy5wcm9wcy5sZWZ0UGFuZWxDaGlsZHJlbiwgLi4uKWBcbiAqXG4gKiBUaGUgYHRyYXZlcnNlQ29udGV4dGAgaXMgYW4gb3B0aW9uYWwgYXJndW1lbnQgdGhhdCBpcyBwYXNzZWQgdGhyb3VnaCB0aGVcbiAqIGVudGlyZSB0cmF2ZXJzYWwuIEl0IGNhbiBiZSB1c2VkIHRvIHN0b3JlIGFjY3VtdWxhdGlvbnMgb3IgYW55dGhpbmcgZWxzZSB0aGF0XG4gKiB0aGUgY2FsbGJhY2sgbWlnaHQgZmluZCByZWxldmFudC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIG9iamVjdC5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBUbyBpbnZva2UgdXBvbiB0cmF2ZXJzaW5nIGVhY2ggY2hpbGQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgQ29udGV4dCBmb3IgdHJhdmVyc2FsLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgJycsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyYXZlcnNlQWxsQ2hpbGRyZW47XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL3RyYXZlcnNlQWxsQ2hpbGRyZW4uanNcbi8vIG1vZHVsZSBpZCA9IDE1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBFc2NhcGUgYW5kIHdyYXAga2V5IHNvIGl0IGlzIHNhZmUgdG8gdXNlIGFzIGEgcmVhY3RpZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdG8gYmUgZXNjYXBlZC5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGVzY2FwZWQga2V5LlxuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShrZXkpIHtcbiAgdmFyIGVzY2FwZVJlZ2V4ID0gL1s9Ol0vZztcbiAgdmFyIGVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0nOiAnPTAnLFxuICAgICc6JzogJz0yJ1xuICB9O1xuICB2YXIgZXNjYXBlZFN0cmluZyA9ICgnJyArIGtleSkucmVwbGFjZShlc2NhcGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcblxuICByZXR1cm4gJyQnICsgZXNjYXBlZFN0cmluZztcbn1cblxuLyoqXG4gKiBVbmVzY2FwZSBhbmQgdW53cmFwIGtleSBmb3IgaHVtYW4tcmVhZGFibGUgZGlzcGxheVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdG8gdW5lc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSB1bmVzY2FwZWQga2V5LlxuICovXG5mdW5jdGlvbiB1bmVzY2FwZShrZXkpIHtcbiAgdmFyIHVuZXNjYXBlUmVnZXggPSAvKD0wfD0yKS9nO1xuICB2YXIgdW5lc2NhcGVyTG9va3VwID0ge1xuICAgICc9MCc6ICc9JyxcbiAgICAnPTInOiAnOidcbiAgfTtcbiAgdmFyIGtleVN1YnN0cmluZyA9IGtleVswXSA9PT0gJy4nICYmIGtleVsxXSA9PT0gJyQnID8ga2V5LnN1YnN0cmluZygyKSA6IGtleS5zdWJzdHJpbmcoMSk7XG5cbiAgcmV0dXJuICgnJyArIGtleVN1YnN0cmluZykucmVwbGFjZSh1bmVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gdW5lc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgfSk7XG59XG5cbnZhciBLZXlFc2NhcGVVdGlscyA9IHtcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHVuZXNjYXBlOiB1bmVzY2FwZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBLZXlFc2NhcGVVdGlscztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvS2V5RXNjYXBlVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZhY3RvcnkgdGhhdCBjcmVhdGVzIEhUTUwgdGFnIGVsZW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBjcmVhdGVET01GYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3Rvcnk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcbiAgY3JlYXRlRE9NRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXBwaW5nIGZyb20gc3VwcG9ydGVkIEhUTUwgdGFncyB0byBgUmVhY3RET01Db21wb25lbnRgIGNsYXNzZXMuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgUmVhY3RET01GYWN0b3JpZXMgPSB7XG4gIGE6IGNyZWF0ZURPTUZhY3RvcnkoJ2EnKSxcbiAgYWJicjogY3JlYXRlRE9NRmFjdG9yeSgnYWJicicpLFxuICBhZGRyZXNzOiBjcmVhdGVET01GYWN0b3J5KCdhZGRyZXNzJyksXG4gIGFyZWE6IGNyZWF0ZURPTUZhY3RvcnkoJ2FyZWEnKSxcbiAgYXJ0aWNsZTogY3JlYXRlRE9NRmFjdG9yeSgnYXJ0aWNsZScpLFxuICBhc2lkZTogY3JlYXRlRE9NRmFjdG9yeSgnYXNpZGUnKSxcbiAgYXVkaW86IGNyZWF0ZURPTUZhY3RvcnkoJ2F1ZGlvJyksXG4gIGI6IGNyZWF0ZURPTUZhY3RvcnkoJ2InKSxcbiAgYmFzZTogY3JlYXRlRE9NRmFjdG9yeSgnYmFzZScpLFxuICBiZGk6IGNyZWF0ZURPTUZhY3RvcnkoJ2JkaScpLFxuICBiZG86IGNyZWF0ZURPTUZhY3RvcnkoJ2JkbycpLFxuICBiaWc6IGNyZWF0ZURPTUZhY3RvcnkoJ2JpZycpLFxuICBibG9ja3F1b3RlOiBjcmVhdGVET01GYWN0b3J5KCdibG9ja3F1b3RlJyksXG4gIGJvZHk6IGNyZWF0ZURPTUZhY3RvcnkoJ2JvZHknKSxcbiAgYnI6IGNyZWF0ZURPTUZhY3RvcnkoJ2JyJyksXG4gIGJ1dHRvbjogY3JlYXRlRE9NRmFjdG9yeSgnYnV0dG9uJyksXG4gIGNhbnZhczogY3JlYXRlRE9NRmFjdG9yeSgnY2FudmFzJyksXG4gIGNhcHRpb246IGNyZWF0ZURPTUZhY3RvcnkoJ2NhcHRpb24nKSxcbiAgY2l0ZTogY3JlYXRlRE9NRmFjdG9yeSgnY2l0ZScpLFxuICBjb2RlOiBjcmVhdGVET01GYWN0b3J5KCdjb2RlJyksXG4gIGNvbDogY3JlYXRlRE9NRmFjdG9yeSgnY29sJyksXG4gIGNvbGdyb3VwOiBjcmVhdGVET01GYWN0b3J5KCdjb2xncm91cCcpLFxuICBkYXRhOiBjcmVhdGVET01GYWN0b3J5KCdkYXRhJyksXG4gIGRhdGFsaXN0OiBjcmVhdGVET01GYWN0b3J5KCdkYXRhbGlzdCcpLFxuICBkZDogY3JlYXRlRE9NRmFjdG9yeSgnZGQnKSxcbiAgZGVsOiBjcmVhdGVET01GYWN0b3J5KCdkZWwnKSxcbiAgZGV0YWlsczogY3JlYXRlRE9NRmFjdG9yeSgnZGV0YWlscycpLFxuICBkZm46IGNyZWF0ZURPTUZhY3RvcnkoJ2RmbicpLFxuICBkaWFsb2c6IGNyZWF0ZURPTUZhY3RvcnkoJ2RpYWxvZycpLFxuICBkaXY6IGNyZWF0ZURPTUZhY3RvcnkoJ2RpdicpLFxuICBkbDogY3JlYXRlRE9NRmFjdG9yeSgnZGwnKSxcbiAgZHQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2R0JyksXG4gIGVtOiBjcmVhdGVET01GYWN0b3J5KCdlbScpLFxuICBlbWJlZDogY3JlYXRlRE9NRmFjdG9yeSgnZW1iZWQnKSxcbiAgZmllbGRzZXQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2ZpZWxkc2V0JyksXG4gIGZpZ2NhcHRpb246IGNyZWF0ZURPTUZhY3RvcnkoJ2ZpZ2NhcHRpb24nKSxcbiAgZmlndXJlOiBjcmVhdGVET01GYWN0b3J5KCdmaWd1cmUnKSxcbiAgZm9vdGVyOiBjcmVhdGVET01GYWN0b3J5KCdmb290ZXInKSxcbiAgZm9ybTogY3JlYXRlRE9NRmFjdG9yeSgnZm9ybScpLFxuICBoMTogY3JlYXRlRE9NRmFjdG9yeSgnaDEnKSxcbiAgaDI6IGNyZWF0ZURPTUZhY3RvcnkoJ2gyJyksXG4gIGgzOiBjcmVhdGVET01GYWN0b3J5KCdoMycpLFxuICBoNDogY3JlYXRlRE9NRmFjdG9yeSgnaDQnKSxcbiAgaDU6IGNyZWF0ZURPTUZhY3RvcnkoJ2g1JyksXG4gIGg2OiBjcmVhdGVET01GYWN0b3J5KCdoNicpLFxuICBoZWFkOiBjcmVhdGVET01GYWN0b3J5KCdoZWFkJyksXG4gIGhlYWRlcjogY3JlYXRlRE9NRmFjdG9yeSgnaGVhZGVyJyksXG4gIGhncm91cDogY3JlYXRlRE9NRmFjdG9yeSgnaGdyb3VwJyksXG4gIGhyOiBjcmVhdGVET01GYWN0b3J5KCdocicpLFxuICBodG1sOiBjcmVhdGVET01GYWN0b3J5KCdodG1sJyksXG4gIGk6IGNyZWF0ZURPTUZhY3RvcnkoJ2knKSxcbiAgaWZyYW1lOiBjcmVhdGVET01GYWN0b3J5KCdpZnJhbWUnKSxcbiAgaW1nOiBjcmVhdGVET01GYWN0b3J5KCdpbWcnKSxcbiAgaW5wdXQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2lucHV0JyksXG4gIGluczogY3JlYXRlRE9NRmFjdG9yeSgnaW5zJyksXG4gIGtiZDogY3JlYXRlRE9NRmFjdG9yeSgna2JkJyksXG4gIGtleWdlbjogY3JlYXRlRE9NRmFjdG9yeSgna2V5Z2VuJyksXG4gIGxhYmVsOiBjcmVhdGVET01GYWN0b3J5KCdsYWJlbCcpLFxuICBsZWdlbmQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2xlZ2VuZCcpLFxuICBsaTogY3JlYXRlRE9NRmFjdG9yeSgnbGknKSxcbiAgbGluazogY3JlYXRlRE9NRmFjdG9yeSgnbGluaycpLFxuICBtYWluOiBjcmVhdGVET01GYWN0b3J5KCdtYWluJyksXG4gIG1hcDogY3JlYXRlRE9NRmFjdG9yeSgnbWFwJyksXG4gIG1hcms6IGNyZWF0ZURPTUZhY3RvcnkoJ21hcmsnKSxcbiAgbWVudTogY3JlYXRlRE9NRmFjdG9yeSgnbWVudScpLFxuICBtZW51aXRlbTogY3JlYXRlRE9NRmFjdG9yeSgnbWVudWl0ZW0nKSxcbiAgbWV0YTogY3JlYXRlRE9NRmFjdG9yeSgnbWV0YScpLFxuICBtZXRlcjogY3JlYXRlRE9NRmFjdG9yeSgnbWV0ZXInKSxcbiAgbmF2OiBjcmVhdGVET01GYWN0b3J5KCduYXYnKSxcbiAgbm9zY3JpcHQ6IGNyZWF0ZURPTUZhY3RvcnkoJ25vc2NyaXB0JyksXG4gIG9iamVjdDogY3JlYXRlRE9NRmFjdG9yeSgnb2JqZWN0JyksXG4gIG9sOiBjcmVhdGVET01GYWN0b3J5KCdvbCcpLFxuICBvcHRncm91cDogY3JlYXRlRE9NRmFjdG9yeSgnb3B0Z3JvdXAnKSxcbiAgb3B0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdvcHRpb24nKSxcbiAgb3V0cHV0OiBjcmVhdGVET01GYWN0b3J5KCdvdXRwdXQnKSxcbiAgcDogY3JlYXRlRE9NRmFjdG9yeSgncCcpLFxuICBwYXJhbTogY3JlYXRlRE9NRmFjdG9yeSgncGFyYW0nKSxcbiAgcGljdHVyZTogY3JlYXRlRE9NRmFjdG9yeSgncGljdHVyZScpLFxuICBwcmU6IGNyZWF0ZURPTUZhY3RvcnkoJ3ByZScpLFxuICBwcm9ncmVzczogY3JlYXRlRE9NRmFjdG9yeSgncHJvZ3Jlc3MnKSxcbiAgcTogY3JlYXRlRE9NRmFjdG9yeSgncScpLFxuICBycDogY3JlYXRlRE9NRmFjdG9yeSgncnAnKSxcbiAgcnQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3J0JyksXG4gIHJ1Ynk6IGNyZWF0ZURPTUZhY3RvcnkoJ3J1YnknKSxcbiAgczogY3JlYXRlRE9NRmFjdG9yeSgncycpLFxuICBzYW1wOiBjcmVhdGVET01GYWN0b3J5KCdzYW1wJyksXG4gIHNjcmlwdDogY3JlYXRlRE9NRmFjdG9yeSgnc2NyaXB0JyksXG4gIHNlY3Rpb246IGNyZWF0ZURPTUZhY3RvcnkoJ3NlY3Rpb24nKSxcbiAgc2VsZWN0OiBjcmVhdGVET01GYWN0b3J5KCdzZWxlY3QnKSxcbiAgc21hbGw6IGNyZWF0ZURPTUZhY3RvcnkoJ3NtYWxsJyksXG4gIHNvdXJjZTogY3JlYXRlRE9NRmFjdG9yeSgnc291cmNlJyksXG4gIHNwYW46IGNyZWF0ZURPTUZhY3RvcnkoJ3NwYW4nKSxcbiAgc3Ryb25nOiBjcmVhdGVET01GYWN0b3J5KCdzdHJvbmcnKSxcbiAgc3R5bGU6IGNyZWF0ZURPTUZhY3RvcnkoJ3N0eWxlJyksXG4gIHN1YjogY3JlYXRlRE9NRmFjdG9yeSgnc3ViJyksXG4gIHN1bW1hcnk6IGNyZWF0ZURPTUZhY3RvcnkoJ3N1bW1hcnknKSxcbiAgc3VwOiBjcmVhdGVET01GYWN0b3J5KCdzdXAnKSxcbiAgdGFibGU6IGNyZWF0ZURPTUZhY3RvcnkoJ3RhYmxlJyksXG4gIHRib2R5OiBjcmVhdGVET01GYWN0b3J5KCd0Ym9keScpLFxuICB0ZDogY3JlYXRlRE9NRmFjdG9yeSgndGQnKSxcbiAgdGV4dGFyZWE6IGNyZWF0ZURPTUZhY3RvcnkoJ3RleHRhcmVhJyksXG4gIHRmb290OiBjcmVhdGVET01GYWN0b3J5KCd0Zm9vdCcpLFxuICB0aDogY3JlYXRlRE9NRmFjdG9yeSgndGgnKSxcbiAgdGhlYWQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3RoZWFkJyksXG4gIHRpbWU6IGNyZWF0ZURPTUZhY3RvcnkoJ3RpbWUnKSxcbiAgdGl0bGU6IGNyZWF0ZURPTUZhY3RvcnkoJ3RpdGxlJyksXG4gIHRyOiBjcmVhdGVET01GYWN0b3J5KCd0cicpLFxuICB0cmFjazogY3JlYXRlRE9NRmFjdG9yeSgndHJhY2snKSxcbiAgdTogY3JlYXRlRE9NRmFjdG9yeSgndScpLFxuICB1bDogY3JlYXRlRE9NRmFjdG9yeSgndWwnKSxcbiAgJ3Zhcic6IGNyZWF0ZURPTUZhY3RvcnkoJ3ZhcicpLFxuICB2aWRlbzogY3JlYXRlRE9NRmFjdG9yeSgndmlkZW8nKSxcbiAgd2JyOiBjcmVhdGVET01GYWN0b3J5KCd3YnInKSxcblxuICAvLyBTVkdcbiAgY2lyY2xlOiBjcmVhdGVET01GYWN0b3J5KCdjaXJjbGUnKSxcbiAgY2xpcFBhdGg6IGNyZWF0ZURPTUZhY3RvcnkoJ2NsaXBQYXRoJyksXG4gIGRlZnM6IGNyZWF0ZURPTUZhY3RvcnkoJ2RlZnMnKSxcbiAgZWxsaXBzZTogY3JlYXRlRE9NRmFjdG9yeSgnZWxsaXBzZScpLFxuICBnOiBjcmVhdGVET01GYWN0b3J5KCdnJyksXG4gIGltYWdlOiBjcmVhdGVET01GYWN0b3J5KCdpbWFnZScpLFxuICBsaW5lOiBjcmVhdGVET01GYWN0b3J5KCdsaW5lJyksXG4gIGxpbmVhckdyYWRpZW50OiBjcmVhdGVET01GYWN0b3J5KCdsaW5lYXJHcmFkaWVudCcpLFxuICBtYXNrOiBjcmVhdGVET01GYWN0b3J5KCdtYXNrJyksXG4gIHBhdGg6IGNyZWF0ZURPTUZhY3RvcnkoJ3BhdGgnKSxcbiAgcGF0dGVybjogY3JlYXRlRE9NRmFjdG9yeSgncGF0dGVybicpLFxuICBwb2x5Z29uOiBjcmVhdGVET01GYWN0b3J5KCdwb2x5Z29uJyksXG4gIHBvbHlsaW5lOiBjcmVhdGVET01GYWN0b3J5KCdwb2x5bGluZScpLFxuICByYWRpYWxHcmFkaWVudDogY3JlYXRlRE9NRmFjdG9yeSgncmFkaWFsR3JhZGllbnQnKSxcbiAgcmVjdDogY3JlYXRlRE9NRmFjdG9yeSgncmVjdCcpLFxuICBzdG9wOiBjcmVhdGVET01GYWN0b3J5KCdzdG9wJyksXG4gIHN2ZzogY3JlYXRlRE9NRmFjdG9yeSgnc3ZnJyksXG4gIHRleHQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3RleHQnKSxcbiAgdHNwYW46IGNyZWF0ZURPTUZhY3RvcnkoJ3RzcGFuJylcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GYWN0b3JpZXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0RE9NRmFjdG9yaWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vaztcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gIC8vIFRlbXBvcmFyeSBoYWNrLlxuICAvLyBJbmxpbmUgcmVxdWlyZXMgZG9uJ3Qgd29yayB3ZWxsIHdpdGggSmVzdDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjQwXG4gIC8vIFJlbW92ZSB0aGUgaW5saW5lIHJlcXVpcmVzIHdoZW4gd2UgZG9uJ3QgbmVlZCB0aGVtIGFueW1vcmU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcxNzhcbiAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xufVxuXG52YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P29iamVjdH0gZWxlbWVudCBUaGUgUmVhY3QgZWxlbWVudCB0aGF0IGlzIGJlaW5nIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHs/bnVtYmVyfSBkZWJ1Z0lEIFRoZSBSZWFjdCBjb21wb25lbnQgaW5zdGFuY2UgdGhhdCBpcyBiZWluZyB0eXBlLWNoZWNrZWRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUmVhY3RUeXBlU3BlYyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGVsZW1lbnQsIGRlYnVnSUQpIHtcbiAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgIGlmICh0eXBlU3BlY3MuaGFzT3duUHJvcGVydHkodHlwZVNwZWNOYW1lKSkge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICEodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIFJlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgdHlwZVNwZWNOYW1lKSA6IF9wcm9kSW52YXJpYW50KCc4NCcsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCB0eXBlU3BlY05hbWUpIDogdm9pZCAwO1xuICAgICAgICBlcnJvciA9IHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcywgdHlwZVNwZWNOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgbnVsbCwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgIH1cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFlcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEVycm9yLCAnJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHR5cGVTcGVjTmFtZSwgdHlwZW9mIGVycm9yKSA6IHZvaWQgMDtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBjb21wb25lbnRTdGFja0luZm8gPSAnJztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICghUmVhY3RDb21wb25lbnRUcmVlSG9vaykge1xuICAgICAgICAgICAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGVidWdJRCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29tcG9uZW50U3RhY2tJbmZvID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChkZWJ1Z0lEKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrSW5mbyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgJXMgdHlwZTogJXMlcycsIGxvY2F0aW9uLCBlcnJvci5tZXNzYWdlLCBjb21wb25lbnRTdGFja0luZm8pIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUmVhY3RUeXBlU3BlYztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY2hlY2tSZWFjdFR5cGVTcGVjLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICBwcm9wOiAncHJvcCcsXG4gICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpLFxuICAgIGlzVmFsaWRFbGVtZW50ID0gX3JlcXVpcmUuaXNWYWxpZEVsZW1lbnQ7XG5cbnZhciBmYWN0b3J5ID0gcmVxdWlyZSgncHJvcC10eXBlcy9mYWN0b3J5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShpc1ZhbGlkRWxlbWVudCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKHR5cGVTcGVjcy5oYXNPd25Qcm9wZXJ0eSh0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAgIGludmFyaWFudCh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgbG9jYXRpb24sIHR5cGVTcGVjTmFtZSk7XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvcik7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgICAgdmFyIHN0YWNrID0gZ2V0U3RhY2sgPyBnZXRTdGFjaygpIDogJyc7XG5cbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgc3RhY2sgIT0gbnVsbCA/IHN0YWNrIDogJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2tQcm9wVHlwZXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICcxNS42LjInO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9SZWFjdFZlcnNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDE2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vUmVhY3RCYXNlQ2xhc3NlcycpLFxuICAgIENvbXBvbmVudCA9IF9yZXF1aXJlLkNvbXBvbmVudDtcblxudmFyIF9yZXF1aXJlMiA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50JyksXG4gICAgaXNWYWxpZEVsZW1lbnQgPSBfcmVxdWlyZTIuaXNWYWxpZEVsZW1lbnQ7XG5cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3ROb29wVXBkYXRlUXVldWUnKTtcbnZhciBmYWN0b3J5ID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzL2ZhY3RvcnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQsIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9saWIvY3JlYXRlQ2xhc3MuanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG59XG5cbnZhciBNSVhJTlNfS0VZID0gJ21peGlucyc7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBhbGxvdyB0aGUgY3JlYXRpb24gb2YgYW5vbnltb3VzIGZ1bmN0aW9ucyB3aGljaCBkbyBub3Rcbi8vIGhhdmUgLm5hbWUgc2V0IHRvIHRoZSBuYW1lIG9mIHRoZSB2YXJpYWJsZSBiZWluZyBhc3NpZ25lZCB0by5cbmZ1bmN0aW9uIGlkZW50aXR5KGZuKSB7XG4gIHJldHVybiBmbjtcbn1cblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufSBlbHNlIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcbn1cblxuZnVuY3Rpb24gZmFjdG9yeShSZWFjdENvbXBvbmVudCwgaXNWYWxpZEVsZW1lbnQsIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlKSB7XG4gIC8qKlxuICAgKiBQb2xpY2llcyB0aGF0IGRlc2NyaWJlIG1ldGhvZHMgaW4gYFJlYWN0Q2xhc3NJbnRlcmZhY2VgLlxuICAgKi9cblxuICB2YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuICAvKipcbiAgICogQ29tcG9zaXRlIGNvbXBvbmVudHMgYXJlIGhpZ2hlci1sZXZlbCBjb21wb25lbnRzIHRoYXQgY29tcG9zZSBvdGhlciBjb21wb3NpdGVcbiAgICogb3IgaG9zdCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBUbyBjcmVhdGUgYSBuZXcgdHlwZSBvZiBgUmVhY3RDbGFzc2AsIHBhc3MgYSBzcGVjaWZpY2F0aW9uIG9mXG4gICAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAgICogc3BlY2lmaWNhdGlvbiBpcyB0aGF0IHlvdSBpbXBsZW1lbnQgYSBgcmVuZGVyYCBtZXRob2QuXG4gICAqXG4gICAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICogICAgICAgcmV0dXJuIDxkaXY+SGVsbG8gV29ybGQ8L2Rpdj47XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAgICogc3BlY2lhbCBtZWFuaW5nIChlLmcuIGByZW5kZXJgKS4gU2VlIGBSZWFjdENsYXNzSW50ZXJmYWNlYCBmb3JcbiAgICogbW9yZSB0aGUgY29tcHJlaGVuc2l2ZSBwcm90b2NvbC4gQW55IG90aGVyIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgaW4gdGhlXG4gICAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAgICpcbiAgICogQGludGVyZmFjZSBSZWFjdENsYXNzSW50ZXJmYWNlXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7YXJyYXl9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgbWl4aW5zOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0aGF0IHNob3VsZCBiZSBkZWZpbmVkIG9uXG4gICAgICogdGhlIGNvbXBvbmVudCdzIGNvbnN0cnVjdG9yIGluc3RlYWQgb2YgaXRzIHByb3RvdHlwZSAoc3RhdGljIG1ldGhvZHMpLlxuICAgICAqXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBzdGF0aWNzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgcHJvcFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogRGVmaW5pdGlvbiBvZiBjb250ZXh0IHR5cGVzIHRoaXMgY29tcG9uZW50IHNldHMgZm9yIGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY2hpbGRDb250ZXh0VHlwZXM6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IERlZmluaXRpb24gbWV0aG9kcyA9PT09XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBWYWx1ZXMgaW4gdGhlIG1hcHBpbmcgd2lsbCBiZSBzZXQgb25cbiAgICAgKiBgdGhpcy5wcm9wc2AgaWYgdGhhdCBwcm9wIGlzIG5vdCBzcGVjaWZpZWQgKGkuZS4gdXNpbmcgYW4gYGluYCBjaGVjaykuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIGJlZm9yZSBgZ2V0SW5pdGlhbFN0YXRlYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCByZWx5XG4gICAgICogb24gYHRoaXMuc3RhdGVgIG9yIHVzZSBgdGhpcy5zZXRTdGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFByb3BzOiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAqIGFzIHRoZSBpbml0aWFsIHZhbHVlIG9mIGB0aGlzLnN0YXRlYC5cbiAgICAgKlxuICAgICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICBpc09uOiBmYWxzZSxcbiAgICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiAnREVGSU5FX01BTllfTUVSR0VEJyxcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge29iamVjdH1cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBnZXRDaGlsZENvbnRleHQ6ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuXG4gICAgLyoqXG4gICAgICogVXNlcyBwcm9wcyBmcm9tIGB0aGlzLnByb3BzYCBhbmQgc3RhdGUgZnJvbSBgdGhpcy5zdGF0ZWAgdG8gcmVuZGVyIHRoZVxuICAgICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogTm8gZ3VhcmFudGVlcyBhcmUgbWFkZSBhYm91dCB3aGVuIG9yIGhvdyBvZnRlbiB0aGlzIG1ldGhvZCBpcyBpbnZva2VkLCBzb1xuICAgICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgICAqXG4gICAgICogICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICAgKiAgICAgcmV0dXJuIDxkaXY+SGVsbG8sIHtuYW1lfSE8L2Rpdj47XG4gICAgICogICB9XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAgICAgKiBAcmVxdWlyZWRcbiAgICAgKi9cbiAgICByZW5kZXI6ICdERUZJTkVfT05DRScsXG5cbiAgICAvLyA9PT09IERlbGVnYXRlIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IGNyZWF0ZWQgYW5kIGFib3V0IHRvIGJlIG1vdW50ZWQuXG4gICAgICogVGhpcyBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMsIGJ1dCBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyBvciBkYXRhIGNyZWF0ZWRcbiAgICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBIb3dldmVyLCB0aGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCB0aGUgRE9NIG5vZGUgaXMgaW4gdGhlIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICAgKiBiZWVuIG1vdW50ZWQgKGluaXRpYWxpemVkIGFuZCByZW5kZXJlZCkgZm9yIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgcmVjZWl2ZXMgbmV3IHByb3BzLlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gcmVhY3QgdG8gYSBwcm9wIHRyYW5zaXRpb24gYnkgdXBkYXRpbmcgdGhlXG4gICAgICogc3RhdGUgdXNpbmcgYHRoaXMuc2V0U3RhdGVgLiBDdXJyZW50IHByb3BzIGFyZSBhY2Nlc3NlZCB2aWEgYHRoaXMucHJvcHNgLlxuICAgICAqXG4gICAgICogICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgICogICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAgICogICAgIH0pO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogTk9URTogVGhlcmUgaXMgbm8gZXF1aXZhbGVudCBgY29tcG9uZW50V2lsbFJlY2VpdmVTdGF0ZWAuIEFuIGluY29taW5nIHByb3BcbiAgICAgKiB0cmFuc2l0aW9uIG1heSBjYXVzZSBhIHN0YXRlIGNoYW5nZSwgYnV0IHRoZSBvcHBvc2l0ZSBpcyBub3QgdHJ1ZS4gSWYgeW91XG4gICAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogJ0RFRklORV9NQU5ZJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hpbGUgZGVjaWRpbmcgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgdXBkYXRlZCBhcyBhIHJlc3VsdCBvZlxuICAgICAqIHJlY2VpdmluZyBuZXcgcHJvcHMsIHN0YXRlIGFuZC9vciBjb250ZXh0LlxuICAgICAqXG4gICAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gYHJldHVybiBmYWxzZWAgd2hlbiB5b3UncmUgY2VydGFpbiB0aGF0IHRoZVxuICAgICAqIHRyYW5zaXRpb24gdG8gdGhlIG5ldyBwcm9wcy9zdGF0ZS9jb250ZXh0IHdpbGwgbm90IHJlcXVpcmUgYSBjb21wb25lbnRcbiAgICAgKiB1cGRhdGUuXG4gICAgICpcbiAgICAgKiAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgICAqICAgICAgICFlcXVhbChuZXh0U3RhdGUsIHRoaXMuc3RhdGUpIHx8XG4gICAgICogICAgICAgIWVxdWFsKG5leHRDb250ZXh0LCB0aGlzLmNvbnRleHQpO1xuICAgICAqICAgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGNvbXBvbmVudCBzaG91bGQgdXBkYXRlLlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqL1xuICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZTogJ0RFRklORV9PTkNFJyxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIHVwZGF0ZSBkdWUgdG8gYSB0cmFuc2l0aW9uIGZyb21cbiAgICAgKiBgdGhpcy5wcm9wc2AsIGB0aGlzLnN0YXRlYCBhbmQgYHRoaXMuY29udGV4dGAgdG8gYG5leHRQcm9wc2AsIGBuZXh0U3RhdGVgXG4gICAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBwZXJmb3JtIHByZXBhcmF0aW9uIGJlZm9yZSBhbiB1cGRhdGUgb2NjdXJzLlxuICAgICAqXG4gICAgICogTk9URTogWW91ICoqY2Fubm90KiogdXNlIGB0aGlzLnNldFN0YXRlKClgIGluIHRoaXMgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dFxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKi9cbiAgICBjb21wb25lbnRXaWxsVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQncyBET00gcmVwcmVzZW50YXRpb24gaGFzIGJlZW4gdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIG9wZXJhdGUgb24gdGhlIERPTSB3aGVuIHRoZSBjb21wb25lbnQgaGFzXG4gICAgICogYmVlbiB1cGRhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHByZXZQcm9wc1xuICAgICAqIEBwYXJhbSB7P29iamVjdH0gcHJldlN0YXRlXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcm9vdE5vZGUgRE9NIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICAgKiBpdHMgRE9NIHJlcHJlc2VudGF0aW9uIGRlc3Ryb3llZC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICAgKlxuICAgICAqIE5PVEU6IFRoZXJlIGlzIG5vIGBjb21wb25lbnREaWRVbm1vdW50YCBzaW5jZSB5b3VyIGNvbXBvbmVudCB3aWxsIGhhdmUgYmVlblxuICAgICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgICAqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICovXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgICAvLyA9PT09IEFkdmFuY2VkIG1ldGhvZHMgPT09PVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY29tcG9uZW50J3MgY3VycmVudGx5IG1vdW50ZWQgRE9NIHJlcHJlc2VudGF0aW9uLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAgICogU29waGlzdGljYXRlZCBjbGllbnRzIG1heSB3aXNoIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAgICogQGludGVybmFsXG4gICAgICogQG92ZXJyaWRhYmxlXG4gICAgICovXG4gICAgdXBkYXRlQ29tcG9uZW50OiAnT1ZFUlJJREVfQkFTRSdcbiAgfTtcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICAgKlxuICAgKiBBbHRob3VnaCB0aGVzZSBhcmUgZGVjbGFyZWQgbGlrZSBpbnN0YW5jZSBwcm9wZXJ0aWVzIGluIHRoZSBzcGVjaWZpY2F0aW9uXG4gICAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAgICogYW5kIGFyZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3RvciBpbnN0ZWFkIG9mIHRoZSBwcm90b3R5cGUuIERlc3BpdGVcbiAgICogYmVpbmcgc3RhdGljLCB0aGV5IG11c3QgYmUgZGVmaW5lZCBvdXRzaWRlIG9mIHRoZSBcInN0YXRpY3NcIiBrZXkgdW5kZXJcbiAgICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICAgKi9cbiAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICBkaXNwbGF5TmFtZTogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGRpc3BsYXlOYW1lKSB7XG4gICAgICBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIH0sXG4gICAgbWl4aW5zOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgbWl4aW5zKSB7XG4gICAgICBpZiAobWl4aW5zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIG1peGluc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsICdjaGlsZENvbnRleHQnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLFxuICAgICAgICBjaGlsZENvbnRleHRUeXBlc1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMsICdjb250ZXh0Jyk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKFxuICAgICAgICB7fSxcbiAgICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLFxuICAgICAgICBjb250ZXh0VHlwZXNcbiAgICAgICk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICAgKiBhdXRvbWF0aWMgbWVyZ2luZy5cbiAgICAgKi9cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBnZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oXG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLFxuICAgICAgICAgIGdldERlZmF1bHRQcm9wc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIHByb3BUeXBlcywgJ3Byb3AnKTtcbiAgICAgIH1cbiAgICAgIENvbnN0cnVjdG9yLnByb3BUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLnByb3BUeXBlcywgcHJvcFR5cGVzKTtcbiAgICB9LFxuICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcyk7XG4gICAgfSxcbiAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiB0eXBlRGVmKSB7XG4gICAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIF9pbnZhcmlhbnQgc28gY29tcG9uZW50c1xuICAgICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG9ubHkgaW4gX19ERVZfX1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICB0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICtcbiAgICAgICAgICAgICAgJ1JlYWN0LlByb3BUeXBlcy4nLFxuICAgICAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q2xhc3MnLFxuICAgICAgICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLFxuICAgICAgICAgICAgcHJvcE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV1cbiAgICAgIDogbnVsbDtcblxuICAgIC8vIERpc2FsbG93IG92ZXJyaWRpbmcgb2YgYmFzZSBjbGFzcyBtZXRob2RzIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gICAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgX2ludmFyaWFudChcbiAgICAgICAgc3BlY1BvbGljeSA9PT0gJ09WRVJSSURFX0JBU0UnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlICcgK1xuICAgICAgICAgICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICtcbiAgICAgICAgICAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRGlzYWxsb3cgZGVmaW5pbmcgbWV0aG9kcyBtb3JlIHRoYW4gb25jZSB1bmxlc3MgZXhwbGljaXRseSBhbGxvd2VkLlxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknIHx8IHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuICAgICAgICAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICtcbiAgICAgICAgICAnYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlICcgK1xuICAgICAgICAgICd0byBhIG1peGluLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1peGluIGhlbHBlciB3aGljaCBoYW5kbGVzIHBvbGljeSB2YWxpZGF0aW9uIGFuZCByZXNlcnZlZFxuICAgKiBzcGVjaWZpY2F0aW9uIGtleXMgd2hlbiBidWlsZGluZyBSZWFjdCBjbGFzc2VzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciB0eXBlb2ZTcGVjID0gdHlwZW9mIHNwZWM7XG4gICAgICAgIHZhciBpc01peGluVmFsaWQgPSB0eXBlb2ZTcGVjID09PSAnb2JqZWN0JyAmJiBzcGVjICE9PSBudWxsO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGlzTWl4aW5WYWxpZCxcbiAgICAgICAgICAgIFwiJXM6IFlvdSdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsIFwiICtcbiAgICAgICAgICAgICAgJ29yIG5vdCBhbiBvYmplY3QuIENoZWNrIHRoZSBtaXhpbnMgaW5jbHVkZWQgYnkgdGhlIGNvbXBvbmVudCwgJyArXG4gICAgICAgICAgICAgICdhcyB3ZWxsIGFzIGFueSBtaXhpbnMgdGhleSBpbmNsdWRlIHRoZW1zZWx2ZXMuICcgK1xuICAgICAgICAgICAgICAnRXhwZWN0ZWQgb2JqZWN0IGJ1dCBnb3QgJXMuJyxcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJyxcbiAgICAgICAgICAgIHNwZWMgPT09IG51bGwgPyBudWxsIDogdHlwZW9mU3BlY1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9pbnZhcmlhbnQoXG4gICAgICB0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJyxcbiAgICAgIFwiUmVhY3RDbGFzczogWW91J3JlIGF0dGVtcHRpbmcgdG8gXCIgK1xuICAgICAgICAndXNlIGEgY29tcG9uZW50IGNsYXNzIG9yIGZ1bmN0aW9uIGFzIGEgbWl4aW4uIEluc3RlYWQsIGp1c3QgdXNlIGEgJyArXG4gICAgICAgICdyZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcbiAgICBfaW52YXJpYW50KFxuICAgICAgIWlzVmFsaWRFbGVtZW50KHNwZWMpLFxuICAgICAgXCJSZWFjdENsYXNzOiBZb3UncmUgYXR0ZW1wdGluZyB0byBcIiArXG4gICAgICAgICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nXG4gICAgKTtcblxuICAgIHZhciBwcm90byA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuXG4gICAgLy8gQnkgaGFuZGxpbmcgbWl4aW5zIGJlZm9yZSBhbnkgb3RoZXIgcHJvcGVydGllcywgd2UgZW5zdXJlIHRoZSBzYW1lXG4gICAgLy8gY2hhaW5pbmcgb3JkZXIgaXMgYXBwbGllZCB0byBtZXRob2RzIHdpdGggREVGSU5FX01BTlkgcG9saWN5LCB3aGV0aGVyXG4gICAgLy8gbWl4aW5zIGFyZSBsaXN0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZXNlIG1ldGhvZHMgaW4gdGhlIHNwZWMuXG4gICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHNwZWMpIHtcbiAgICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWUgPT09IE1JWElOU19LRVkpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlLlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICAgIHZhciBpc0FscmVhZHlEZWZpbmVkID0gcHJvdG8uaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKGlzQWxyZWFkeURlZmluZWQsIG5hbWUpO1xuXG4gICAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgbWVtYmVyIG1ldGhvZHMgc2hvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGJvdW5kOlxuICAgICAgICAvLyAxLiBFeHBlY3RlZCBSZWFjdENsYXNzIG1ldGhvZHMgKGluIHRoZSBcImludGVyZmFjZVwiKS5cbiAgICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgICB2YXIgaXNSZWFjdENsYXNzTWV0aG9kID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9XG4gICAgICAgICAgaXNGdW5jdGlvbiAmJlxuICAgICAgICAgICFpc1JlYWN0Q2xhc3NNZXRob2QgJiZcbiAgICAgICAgICAhaXNBbHJlYWR5RGVmaW5lZCAmJlxuICAgICAgICAgIHNwZWMuYXV0b2JpbmQgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmIChzaG91bGRBdXRvQmluZCkge1xuICAgICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdO1xuXG4gICAgICAgICAgICAvLyBUaGVzZSBjYXNlcyBzaG91bGQgYWxyZWFkeSBiZSBjYXVnaHQgYnkgdmFsaWRhdGVNZXRob2RPdmVycmlkZS5cbiAgICAgICAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICAgICAgIGlzUmVhY3RDbGFzc01ldGhvZCAmJlxuICAgICAgICAgICAgICAgIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJyB8fFxuICAgICAgICAgICAgICAgICAgc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJyksXG4gICAgICAgICAgICAgICdSZWFjdENsYXNzOiBVbmV4cGVjdGVkIHNwZWMgcG9saWN5ICVzIGZvciBrZXkgJXMgJyArXG4gICAgICAgICAgICAgICAgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLFxuICAgICAgICAgICAgICBzcGVjUG9saWN5LFxuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBGb3IgbWV0aG9kcyB3aGljaCBhcmUgZGVmaW5lZCBtb3JlIHRoYW4gb25jZSwgY2FsbCB0aGUgZXhpc3RpbmdcbiAgICAgICAgICAgIC8vIG1ldGhvZHMgYmVmb3JlIGNhbGxpbmcgdGhlIG5ldyBwcm9wZXJ0eSwgbWVyZ2luZyBpZiBhcHByb3ByaWF0ZS5cbiAgICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJykge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWScpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIEFkZCB2ZXJib3NlIGRpc3BsYXlOYW1lIHRvIHRoZSBmdW5jdGlvbiwgd2hpY2ggaGVscHMgd2hlbiBsb29raW5nXG4gICAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiBzcGVjLmRpc3BsYXlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgaWYgKCFzdGF0aWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIG5hbWUgaW4gc3RhdGljcykge1xuICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAgIF9pbnZhcmlhbnQoXG4gICAgICAgICFpc1Jlc2VydmVkLFxuICAgICAgICAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgK1xuICAgICAgICAgICdwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgJyArXG4gICAgICAgICAgJ2FzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgJyArXG4gICAgICAgICAgJ2NvbnN0cnVjdG9yLicsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG5cbiAgICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICAhaXNJbmhlcml0ZWQsXG4gICAgICAgICdSZWFjdENsYXNzOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lICcgK1xuICAgICAgICAgICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICtcbiAgICAgICAgICAnZHVlIHRvIGEgbWl4aW4uJyxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcbiAgICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIHR3byBvYmplY3RzLCBidXQgdGhyb3cgaWYgYm90aCBjb250YWluIHRoZSBzYW1lIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9uZSBUaGUgZmlyc3Qgb2JqZWN0LCB3aGljaCBpcyBtdXRhdGVkLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHdvIFRoZSBzZWNvbmQgb2JqZWN0XG4gICAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLCB0d28pIHtcbiAgICBfaW52YXJpYW50KFxuICAgICAgb25lICYmIHR3byAmJiB0eXBlb2Ygb25lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHdvID09PSAnb2JqZWN0JyxcbiAgICAgICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IENhbm5vdCBtZXJnZSBub24tb2JqZWN0cy4nXG4gICAgKTtcblxuICAgIGZvciAodmFyIGtleSBpbiB0d28pIHtcbiAgICAgIGlmICh0d28uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBfaW52YXJpYW50KFxuICAgICAgICAgIG9uZVtrZXldID09PSB1bmRlZmluZWQsXG4gICAgICAgICAgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogJyArXG4gICAgICAgICAgICAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArXG4gICAgICAgICAgICAnbWF5IGJlIGR1ZSB0byBhIG1peGluOyBpbiBwYXJ0aWN1bGFyLCB0aGlzIG1heSBiZSBjYXVzZWQgYnkgdHdvICcgK1xuICAgICAgICAgICAgJ2dldEluaXRpYWxTdGF0ZSgpIG9yIGdldERlZmF1bHRQcm9wcygpIG1ldGhvZHMgcmV0dXJuaW5nIG9iamVjdHMgJyArXG4gICAgICAgICAgICAnd2l0aCBjbGFzaGluZyBrZXlzLicsXG4gICAgICAgICAga2V5XG4gICAgICAgICk7XG4gICAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvbmU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBtZXJnZXMgdGhlaXIgcmV0dXJuIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihvbmUsIHR3bykge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRSZXN1bHQoKSB7XG4gICAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdmFyIGIgPSB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9IGVsc2UgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIHZhciBjID0ge307XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGEpO1xuICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICAgIHJldHVybiBjO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBpZ25vcmVzIHRoZWlyIHJldHVybiB2YWxlcy5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25lIEZ1bmN0aW9uIHRvIGludm9rZSBmaXJzdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGEgbWV0aG9kIHRvIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gbWV0aG9kIE1ldGhvZCB0byBiZSBib3VuZC5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBib3VuZCBtZXRob2QuXG4gICAqL1xuICBmdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpIHtcbiAgICB2YXIgYm91bmRNZXRob2QgPSBtZXRob2QuYmluZChjb21wb25lbnQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50LmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lO1xuICAgICAgdmFyIF9iaW5kID0gYm91bmRNZXRob2QuYmluZDtcbiAgICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSxcbiAgICAgICAgICAgIF9rZXkgPSAxO1xuICAgICAgICAgIF9rZXkgPCBfbGVuO1xuICAgICAgICAgIF9rZXkrK1xuICAgICAgICApIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZXIgaXMgdHJ5aW5nIHRvIGJpbmQoKSBhbiBhdXRvYm91bmQgbWV0aG9kOyB3ZSBlZmZlY3RpdmVseSB3aWxsXG4gICAgICAgIC8vIGlnbm9yZSB0aGUgdmFsdWUgb2YgXCJ0aGlzXCIgdGhhdCB0aGUgdXNlciBpcyB0cnlpbmcgdG8gdXNlLCBzb1xuICAgICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdiaW5kKCk6IFJlYWN0IGNvbXBvbmVudCBtZXRob2RzIG1heSBvbmx5IGJlIGJvdW5kIHRvIHRoZSAnICtcbiAgICAgICAgICAgICAgICAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArXG4gICAgICAgICAgICAgICAgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgK1xuICAgICAgICAgICAgICAgICd3YXksIHNvIHlvdSBjYW4gc2FmZWx5IHJlbW92ZSB0aGlzIGNhbGwuIFNlZSAlcycsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVib3VuZE1ldGhvZCA9IF9iaW5kLmFwcGx5KGJvdW5kTWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZEFyZ3VtZW50cyA9IGFyZ3M7XG4gICAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGJvdW5kTWV0aG9kO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGFsbCBhdXRvLWJvdW5kIG1ldGhvZHMgaW4gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZHMoY29tcG9uZW50KSB7XG4gICAgdmFyIHBhaXJzID0gY29tcG9uZW50Ll9fcmVhY3RBdXRvQmluZFBhaXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHZhciBhdXRvQmluZEtleSA9IHBhaXJzW2ldO1xuICAgICAgdmFyIG1ldGhvZCA9IHBhaXJzW2kgKyAxXTtcbiAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBJc01vdW50ZWRQcmVNaXhpbiA9IHtcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIElzTW91bnRlZFBvc3RNaXhpbiA9IHtcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9faXNNb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgbW9yZSB0byB0aGUgUmVhY3RDbGFzcyBiYXNlIGNsYXNzLiBUaGVzZSBhcmUgYWxsIGxlZ2FjeSBmZWF0dXJlcyBhbmRcbiAgICogdGhlcmVmb3JlIG5vdCBhbHJlYWR5IHBhcnQgb2YgdGhlIG1vZGVybiBSZWFjdENvbXBvbmVudC5cbiAgICovXG4gIHZhciBSZWFjdENsYXNzTWl4aW4gPSB7XG4gICAgLyoqXG4gICAgICogVE9ETzogVGhpcyB3aWxsIGJlIGRlcHJlY2F0ZWQgYmVjYXVzZSBzdGF0ZSBzaG91bGQgYWx3YXlzIGtlZXAgYSBjb25zaXN0ZW50XG4gICAgICogdHlwZSBzaWduYXR1cmUgYW5kIHRoZSBvbmx5IHVzZSBjYXNlIGZvciB0aGlzLCBpcyB0byBhdm9pZCB0aGF0LlxuICAgICAqL1xuICAgIHJlcGxhY2VTdGF0ZTogZnVuY3Rpb24obmV3U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZSh0aGlzLCBuZXdTdGF0ZSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqIEBmaW5hbFxuICAgICAqL1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMuX19kaWRXYXJuSXNNb3VudGVkLFxuICAgICAgICAgICclczogaXNNb3VudGVkIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCAnICtcbiAgICAgICAgICAgICdzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluIGNvbXBvbmVudFdpbGxVbm1vdW50IHRvICcgK1xuICAgICAgICAgICAgJ3ByZXZlbnQgbWVtb3J5IGxlYWtzLicsXG4gICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IgJiYgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkgfHxcbiAgICAgICAgICAgIHRoaXMubmFtZSB8fFxuICAgICAgICAgICAgJ0NvbXBvbmVudCdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fX2RpZFdhcm5Jc01vdW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICEhdGhpcy5fX2lzTW91bnRlZDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIFJlYWN0Q2xhc3NDb21wb25lbnQgPSBmdW5jdGlvbigpIHt9O1xuICBfYXNzaWduKFxuICAgIFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLFxuICAgIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSxcbiAgICBSZWFjdENsYXNzTWl4aW5cbiAgKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBvc2l0ZSBjb21wb25lbnQgY2xhc3MgZ2l2ZW4gYSBjbGFzcyBzcGVjaWZpY2F0aW9uLlxuICAgKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHNwZWMgQ2xhc3Mgc3BlY2lmaWNhdGlvbiAod2hpY2ggbXVzdCBkZWZpbmUgYHJlbmRlcmApLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gQ29tcG9uZW50IGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVDbGFzcyhzcGVjKSB7XG4gICAgLy8gVG8ga2VlcCBvdXIgd2FybmluZ3MgbW9yZSB1bmRlcnN0YW5kYWJsZSwgd2UnbGwgdXNlIGEgbGl0dGxlIGhhY2sgaGVyZSB0b1xuICAgIC8vIGVuc3VyZSB0aGF0IENvbnN0cnVjdG9yLm5hbWUgIT09ICdDb25zdHJ1Y3RvcicuIFRoaXMgbWFrZXMgc3VyZSB3ZSBkb24ndFxuICAgIC8vIHVubmVjZXNzYXJpbHkgaWRlbnRpZnkgYSBjbGFzcyB3aXRob3V0IGRpc3BsYXlOYW1lIGFzICdDb25zdHJ1Y3RvcicuXG4gICAgdmFyIENvbnN0cnVjdG9yID0gaWRlbnRpdHkoZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICAgIC8vIFRoaXMgY29uc3RydWN0b3IgZ2V0cyBvdmVycmlkZGVuIGJ5IG1vY2tzLiBUaGUgYXJndW1lbnQgaXMgdXNlZFxuICAgICAgLy8gYnkgbW9ja3MgdG8gYXNzZXJ0IG9uIHdoYXQgZ2V0cyBtb3VudGVkLlxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIHRoaXMgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcixcbiAgICAgICAgICAnU29tZXRoaW5nIGlzIGNhbGxpbmcgYSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHkuIFVzZSBhIGZhY3Rvcnkgb3IgJyArXG4gICAgICAgICAgICAnSlNYIGluc3RlYWQuIFNlZTogaHR0cHM6Ly9mYi5tZS9yZWFjdC1sZWdhY3lmYWN0b3J5J1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBXaXJlIHVwIGF1dG8tYmluZGluZ1xuICAgICAgaWYgKHRoaXMuX19yZWFjdEF1dG9CaW5kUGFpcnMubGVuZ3RoKSB7XG4gICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuXG4gICAgICAvLyBSZWFjdENsYXNzZXMgZG9lc24ndCBoYXZlIGNvbnN0cnVjdG9ycy4gSW5zdGVhZCwgdGhleSB1c2UgdGhlXG4gICAgICAvLyBnZXRJbml0aWFsU3RhdGUgYW5kIGNvbXBvbmVudFdpbGxNb3VudCBtZXRob2RzIGZvciBpbml0aWFsaXphdGlvbi5cblxuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgdGhpcy5nZXRJbml0aWFsU3RhdGUuX2lzTW9ja0Z1bmN0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgICAgLy8gZGVwcmVjYXRpbmcgdGhpcyBjb252ZW5pZW5jZS5cbiAgICAgICAgICBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpLFxuICAgICAgICAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJyxcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50J1xuICAgICAgKTtcblxuICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB9KTtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXcgUmVhY3RDbGFzc0NvbXBvbmVudCgpO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuXG4gICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKSk7XG5cbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgSXNNb3VudGVkUHJlTWl4aW4pO1xuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcbiAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgSXNNb3VudGVkUG9zdE1peGluKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWQuXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB0YWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlIG9mIHRoZXNlIG1ldGhvZCBuYW1lcyBpcyBvayxcbiAgICAgIC8vIHNpbmNlIGl0J3MgdXNlZCB3aXRoIGNyZWF0ZUNsYXNzLiBJZiBpdCdzIG5vdCwgdGhlbiBpdCdzIGxpa2VseSBhXG4gICAgICAvLyBtaXN0YWtlIHNvIHdlJ2xsIHdhcm4geW91IHRvIHVzZSB0aGUgc3RhdGljIHByb3BlcnR5LCBwcm9wZXJ0eVxuICAgICAgLy8gaW5pdGlhbGl6ZXIgb3IgY29uc3RydWN0b3IgcmVzcGVjdGl2ZWx5LlxuICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfaW52YXJpYW50KFxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlcixcbiAgICAgICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLidcbiAgICApO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgICFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArXG4gICAgICAgICAgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICtcbiAgICAgICAgICAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJyxcbiAgICAgICAgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnXG4gICAgICApO1xuICAgICAgd2FybmluZyhcbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLFxuICAgICAgICAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICtcbiAgICAgICAgICAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsXG4gICAgICAgIHNwZWMuZGlzcGxheU5hbWUgfHwgJ0EgY29tcG9uZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZWR1Y2UgdGltZSBzcGVudCBkb2luZyBsb29rdXBzIGJ5IHNldHRpbmcgdGhlc2Ugb24gdGhlIHByb3RvdHlwZS5cbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jcmVhdGUtcmVhY3QtY2xhc3MvZmFjdG9yeS5qc1xuLy8gbW9kdWxlIGlkID0gMTY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgY2hpbGQgaW4gYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuIGFuZCB2ZXJpZmllcyB0aGF0IHRoZXJlXG4gKiBpcyBvbmx5IG9uZSBjaGlsZCBpbiB0aGUgY29sbGVjdGlvbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY2hpbGRyZW4ub25seVxuICpcbiAqIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGEgc2luZ2xlIGNoaWxkIGdldHNcbiAqIHBhc3NlZCB3aXRob3V0IGEgd3JhcHBlciwgYnV0IHRoZSBwdXJwb3NlIG9mIHRoaXMgaGVscGVyIGZ1bmN0aW9uIGlzIHRvXG4gKiBhYnN0cmFjdCBhd2F5IHRoZSBwYXJ0aWN1bGFyIHN0cnVjdHVyZSBvZiBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGNoaWxkcmVuIENoaWxkIGNvbGxlY3Rpb24gc3RydWN0dXJlLlxuICogQHJldHVybiB7UmVhY3RFbGVtZW50fSBUaGUgZmlyc3QgYW5kIG9ubHkgYFJlYWN0RWxlbWVudGAgY29udGFpbmVkIGluIHRoZVxuICogc3RydWN0dXJlLlxuICovXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuJykgOiBfcHJvZEludmFyaWFudCgnMTQzJykgOiB2b2lkIDA7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvbmx5Q2hpbGQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvbGliL29ubHlDaGlsZC5qc1xuLy8gbW9kdWxlIGlkID0gMTY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcGVyZm9ybS5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgaWYgKCFERVNDUklQVE9SUyB8fCB0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FLCAnX2MnKTtcbiAgICAgIHRhcmdldC5fYyA9IG5ldyBCYXNlKCk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0YXJnZXRbQURERVJdLCB0YXJnZXQpO1xuICAgIH0pO1xuICAgIGVhY2goJ2FkZCxjbGVhcixkZWxldGUsZm9yRWFjaCxnZXQsaGFzLHNldCxrZXlzLHZhbHVlcyxlbnRyaWVzLHRvSlNPTicuc3BsaXQoJywnKSwgZnVuY3Rpb24gKEtFWSkge1xuICAgICAgdmFyIElTX0FEREVSID0gS0VZID09ICdhZGQnIHx8IEtFWSA9PSAnc2V0JztcbiAgICAgIGlmIChLRVkgaW4gcHJvdG8gJiYgIShJU19XRUFLICYmIEtFWSA9PSAnY2xlYXInKSkgaGlkZShDLnByb3RvdHlwZSwgS0VZLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsIEtFWSk7XG4gICAgICAgIGlmICghSVNfQURERVIgJiYgSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkpIHJldHVybiBLRVkgPT0gJ2dldCcgPyB1bmRlZmluZWQgOiBmYWxzZTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NbS0VZXShhID09PSAwID8gMCA6IGEsIGIpO1xuICAgICAgICByZXR1cm4gSVNfQURERVIgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgSVNfV0VBSyB8fCBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Muc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDE3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDE4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDUiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgQSA9IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAxODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA1IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gMTgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNSIsIi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9XG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpcztcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanNcbi8vIG1vZHVsZSBpZCA9IDIxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcbi8vIG1vZHVsZSBpZCA9IDIxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMjEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5faCA9PSAxKSByZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYztcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVhY3Rpb247XG4gIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSB7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmIChyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSkgcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMjEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWljcm90YXNrLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanNcbi8vIG1vZHVsZSBpZCA9IDIxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5TZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDIxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSA1IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc2V0Lm9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnNldC5mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NldCA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zZXQnKTtcblxudmFyIF9zZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0KTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0NvbnN1bWFibGVBcnJheTIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxuZXhwb3J0cy5kZWZhdWx0SGVhZCA9IGRlZmF1bHRIZWFkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3NpZGVFZmZlY3QgPSByZXF1aXJlKCcuL3NpZGUtZWZmZWN0Jyk7XG5cbnZhciBfc2lkZUVmZmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaWRlRWZmZWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEhlYWQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShIZWFkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIZWFkKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEhlYWQpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChIZWFkLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShIZWFkKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShIZWFkLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gSGVhZDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkhlYWQuY29udGV4dFR5cGVzID0ge1xuICBoZWFkTWFuYWdlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn07XG5mdW5jdGlvbiBkZWZhdWx0SGVhZCgpIHtcbiAgcmV0dXJuIFtfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnbWV0YScsIHsgY2hhclNldDogJ3V0Zi04JywgY2xhc3NOYW1lOiAnbmV4dC1oZWFkJyB9KV07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZUNvbXBvbmVudHMoY29tcG9uZW50cykge1xuICB2YXIgX2NvbXBvbmVudHMkbWFwJG1hcCRyO1xuXG4gIHJldHVybiAoX2NvbXBvbmVudHMkbWFwJG1hcCRyID0gY29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5wcm9wcy5jaGlsZHJlbjtcbiAgfSkubWFwKGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbik7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgfSwgW10pLnJldmVyc2UoKSkuY29uY2F0LmFwcGx5KF9jb21wb25lbnRzJG1hcCRtYXAkciwgKDAsIF90b0NvbnN1bWFibGVBcnJheTMuZGVmYXVsdCkoZGVmYXVsdEhlYWQoKSkpLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAhIWM7XG4gIH0pLmZpbHRlcih1bmlxdWUoKSkucmV2ZXJzZSgpLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHZhciBjbGFzc05hbWUgPSAoYy5jbGFzc05hbWUgPyBjLmNsYXNzTmFtZSArICcgJyA6ICcnKSArICduZXh0LWhlYWQnO1xuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGMsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWUgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYXBPblNlcnZlcihoZWFkKSB7XG4gIHJldHVybiBoZWFkO1xufVxuXG5mdW5jdGlvbiBvblN0YXRlQ2hhbmdlKGhlYWQpIHtcbiAgaWYgKHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuaGVhZE1hbmFnZXIpIHtcbiAgICB0aGlzLmNvbnRleHQuaGVhZE1hbmFnZXIudXBkYXRlSGVhZChoZWFkKTtcbiAgfVxufVxuXG52YXIgTUVUQVRZUEVTID0gWyduYW1lJywgJ2h0dHBFcXVpdicsICdjaGFyU2V0JywgJ2l0ZW1Qcm9wJywgJ3Byb3BlcnR5J107XG5cbi8vIHJldHVybnMgYSBmdW5jdGlvbiBmb3IgZmlsdGVyaW5nIGhlYWQgY2hpbGQgZWxlbWVudHNcbi8vIHdoaWNoIHNob3VsZG4ndCBiZSBkdXBsaWNhdGVkLCBsaWtlIDx0aXRsZS8+LlxuXG5mdW5jdGlvbiB1bmlxdWUoKSB7XG4gIHZhciB0YWdzID0gbmV3IF9zZXQyLmRlZmF1bHQoKTtcbiAgdmFyIG1ldGFUeXBlcyA9IG5ldyBfc2V0Mi5kZWZhdWx0KCk7XG4gIHZhciBtZXRhQ2F0ZWdvcmllcyA9IHt9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoaCkge1xuICAgIHN3aXRjaCAoaC50eXBlKSB7XG4gICAgICBjYXNlICd0aXRsZSc6XG4gICAgICBjYXNlICdiYXNlJzpcbiAgICAgICAgaWYgKHRhZ3MuaGFzKGgudHlwZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdGFncy5hZGQoaC50eXBlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtZXRhJzpcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1FVEFUWVBFUy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBtZXRhdHlwZSA9IE1FVEFUWVBFU1tpXTtcbiAgICAgICAgICBpZiAoIWgucHJvcHMuaGFzT3duUHJvcGVydHkobWV0YXR5cGUpKSBjb250aW51ZTtcblxuICAgICAgICAgIGlmIChtZXRhdHlwZSA9PT0gJ2NoYXJTZXQnKSB7XG4gICAgICAgICAgICBpZiAobWV0YVR5cGVzLmhhcyhtZXRhdHlwZSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIG1ldGFUeXBlcy5hZGQobWV0YXR5cGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSBoLnByb3BzW21ldGF0eXBlXTtcbiAgICAgICAgICAgIHZhciBjYXRlZ29yaWVzID0gbWV0YUNhdGVnb3JpZXNbbWV0YXR5cGVdIHx8IG5ldyBfc2V0Mi5kZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcmllcy5oYXMoY2F0ZWdvcnkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXRlZ29yaWVzLmFkZChjYXRlZ29yeSk7XG4gICAgICAgICAgICBtZXRhQ2F0ZWdvcmllc1ttZXRhdHlwZV0gPSBjYXRlZ29yaWVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfc2lkZUVmZmVjdDIuZGVmYXVsdCkocmVkdWNlQ29tcG9uZW50cywgb25TdGF0ZUNoYW5nZSwgbWFwT25TZXJ2ZXIpKEhlYWQpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvaGVhZC5qc1xuLy8gbW9kdWxlIGlkID0gMjQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDUiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheScpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ29uc3VtYWJsZUFycmF5Mik7XG5cbnZhciBfc2V0ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3NldCcpO1xuXG52YXIgX3NldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoU2lkZUVmZmVjdDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB3aXRoU2lkZUVmZmVjdChyZWR1Y2VDb21wb25lbnRzVG9TdGF0ZSwgaGFuZGxlU3RhdGVDaGFuZ2VPbkNsaWVudCwgbWFwU3RhdGVPblNlcnZlcikge1xuICBpZiAodHlwZW9mIHJlZHVjZUNvbXBvbmVudHNUb1N0YXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCByZWR1Y2VDb21wb25lbnRzVG9TdGF0ZSB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50IHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG1hcFN0YXRlT25TZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtYXBTdGF0ZU9uU2VydmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBtYXBTdGF0ZU9uU2VydmVyIHRvIGVpdGhlciBiZSB1bmRlZmluZWQgb3IgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAodHlwZW9mIFdyYXBwZWRDb21wb25lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgV3JhcHBlZENvbXBvbmVudCB0byBiZSBhIFJlYWN0IGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRlZEluc3RhbmNlcyA9IG5ldyBfc2V0Mi5kZWZhdWx0KCk7XG4gICAgdmFyIHN0YXRlID0gdm9pZCAwO1xuXG4gICAgZnVuY3Rpb24gZW1pdENoYW5nZShjb21wb25lbnQpIHtcbiAgICAgIHN0YXRlID0gcmVkdWNlQ29tcG9uZW50c1RvU3RhdGUoW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkzLmRlZmF1bHQpKG1vdW50ZWRJbnN0YW5jZXMpKSk7XG5cbiAgICAgIGlmIChTaWRlRWZmZWN0LmNhblVzZURPTSkge1xuICAgICAgICBoYW5kbGVTdGF0ZUNoYW5nZU9uQ2xpZW50LmNhbGwoY29tcG9uZW50LCBzdGF0ZSk7XG4gICAgICB9IGVsc2UgaWYgKG1hcFN0YXRlT25TZXJ2ZXIpIHtcbiAgICAgICAgc3RhdGUgPSBtYXBTdGF0ZU9uU2VydmVyKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgU2lkZUVmZmVjdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTaWRlRWZmZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gU2lkZUVmZmVjdCgpIHtcbiAgICAgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU2lkZUVmZmVjdCk7XG4gICAgICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChTaWRlRWZmZWN0Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShTaWRlRWZmZWN0KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFNpZGVFZmZlY3QsIFt7XG4gICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgICAgbW91bnRlZEluc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgICAgZW1pdENoYW5nZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICAgIGVtaXRDaGFuZ2UodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgbW91bnRlZEluc3RhbmNlcy5kZWxldGUodGhpcyk7XG4gICAgICAgICAgZW1pdENoYW5nZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFdyYXBwZWRDb21wb25lbnQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1dLCBbe1xuICAgICAgICBrZXk6ICdwZWVrJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBlZWsoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRXhwb3NlIGNhblVzZURPTSBzbyB0ZXN0cyBjYW4gbW9ua2V5cGF0Y2ggaXRcblxuICAgICAgICAvLyBUcnkgdG8gdXNlIGRpc3BsYXlOYW1lIG9mIHdyYXBwZWQgY29tcG9uZW50XG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAncmV3aW5kJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJld2luZCgpIHtcbiAgICAgICAgICBpZiAoU2lkZUVmZmVjdC5jYW5Vc2VET00pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBvbmx5IGNhbGwgcmV3aW5kKCkgb24gdGhlIHNlcnZlci4gQ2FsbCBwZWVrKCkgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZS4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVjb3JkZWRTdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1vdW50ZWRJbnN0YW5jZXMuY2xlYXIoKTtcbiAgICAgICAgICByZXR1cm4gcmVjb3JkZWRTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFNpZGVFZmZlY3Q7XG4gICAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICAgIFNpZGVFZmZlY3QuZGlzcGxheU5hbWUgPSAnU2lkZUVmZmVjdCgnICsgKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoV3JhcHBlZENvbXBvbmVudCkgKyAnKSc7XG4gICAgU2lkZUVmZmVjdC5jb250ZXh0VHlwZXMgPSBXcmFwcGVkQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgICBTaWRlRWZmZWN0LmNhblVzZURPTSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG5cbiAgICByZXR1cm4gU2lkZUVmZmVjdDtcbiAgfTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvbGliL3NpZGUtZWZmZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgNSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdERPTScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlIGlucHV0L3RleHRhcmVhIHRvIGZvY3VzXG4gKi9cblxuZnVuY3Rpb24gZm9jdXNOb2RlKG5vZGUpIHtcbiAgLy8gSUU4IGNhbiB0aHJvdyBcIkNhbid0IG1vdmUgZm9jdXMgdG8gdGhlIGNvbnRyb2wgYmVjYXVzZSBpdCBpcyBpbnZpc2libGUsXG4gIC8vIG5vdCBlbmFibGVkLCBvciBvZiBhIHR5cGUgdGhhdCBkb2VzIG5vdCBhY2NlcHQgdGhlIGZvY3VzLlwiIGZvciBhbGwga2luZHMgb2ZcbiAgLy8gcmVhc29ucyB0aGF0IGFyZSB0b28gZXhwZW5zaXZlIGFuZCBmcmFnaWxlIHRvIHRlc3QuXG4gIHRyeSB7XG4gICAgbm9kZS5mb2N1cygpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9mb2N1c05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDI5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9lbXB0eUZ1bmN0aW9uJyk7XG5cbi8qKlxuICogVXBzdHJlYW0gdmVyc2lvbiBvZiBldmVudCBsaXN0ZW5lci4gRG9lcyBub3QgdGFrZSBpbnRvIGFjY291bnQgc3BlY2lmaWNcbiAqIG5hdHVyZSBvZiBwbGF0Zm9ybS5cbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGJ1YmJsZSBwaGFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gdGFyZ2V0IERPTSBlbGVtZW50IHRvIHJlZ2lzdGVyIGxpc3RlbmVyIG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIEV2ZW50IHR5cGUsIGUuZy4gJ2NsaWNrJyBvciAnbW91c2VvdmVyJy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IHdpdGggYSBgcmVtb3ZlYCBtZXRob2QuXG4gICAqL1xuICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3Rlbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgdGFyZ2V0LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudFR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gRE9NIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgY2FwdHVyZTogZnVuY3Rpb24gY2FwdHVyZSh0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAodGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgKyAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiBlbXB0eUZ1bmN0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICByZWdpc3RlckRlZmF1bHQ6IGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdCgpIHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qc1xuLy8gbW9kdWxlIGlkID0gMzAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAzMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgcGVyZm9ybWFuY2UgPSByZXF1aXJlKCcuL3BlcmZvcm1hbmNlJyk7XG5cbnZhciBwZXJmb3JtYW5jZU5vdztcblxuLyoqXG4gKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuICogYERhdGUubm93KClgIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG5lZWQgdG8gc3VwcG9ydCBGaXJlZm94IDwgMTUgZm9yIG5vd1xuICogYmVjYXVzZSBvZiBGYWNlYm9vaydzIHRlc3RpbmcgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cbmlmIChwZXJmb3JtYW5jZS5ub3cpIHtcbiAgcGVyZm9ybWFuY2VOb3cgPSBmdW5jdGlvbiBwZXJmb3JtYW5jZU5vdygpIHtcbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICBwZXJmb3JtYW5jZU5vdyA9IGZ1bmN0aW9uIHBlcmZvcm1hbmNlTm93KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3BlcmZvcm1hbmNlTm93LmpzXG4vLyBtb2R1bGUgaWQgPSA0NDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBwZXJmb3JtYW5jZTtcblxuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSB8fCB3aW5kb3cubXNQZXJmb3JtYW5jZSB8fCB3aW5kb3cud2Via2l0UGVyZm9ybWFuY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGVyZm9ybWFuY2UgfHwge307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvcGVyZm9ybWFuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDQ0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qZXNsaW50LWRpc2FibGUgZmItd3d3L3Vuc2FmZS1odG1sKi9cblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG52YXIgZ2V0TWFya3VwV3JhcCA9IHJlcXVpcmUoJy4vZ2V0TWFya3VwV3JhcCcpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG5cbi8qKlxuICogRHVtbXkgY29udGFpbmVyIHVzZWQgdG8gcmVuZGVyIGFsbCBtYXJrdXAuXG4gKi9cbnZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG5cbi8qKlxuICogUGF0dGVybiB1c2VkIGJ5IGBnZXROb2RlTmFtZWAuXG4gKi9cbnZhciBub2RlTmFtZVBhdHRlcm4gPSAvXlxccyo8KFxcdyspLztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgYG5vZGVOYW1lYCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHN0cmluZyBvZiBtYXJrdXAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBTdHJpbmcgb2YgbWFya3VwLlxuICogQHJldHVybiB7P3N0cmluZ30gTm9kZSBuYW1lIG9mIHRoZSBzdXBwbGllZCBtYXJrdXAuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICB2YXIgbm9kZU5hbWVNYXRjaCA9IG1hcmt1cC5tYXRjaChub2RlTmFtZVBhdHRlcm4pO1xuICByZXR1cm4gbm9kZU5hbWVNYXRjaCAmJiBub2RlTmFtZU1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBub2RlcyByZW5kZXJlZCBmcm9tIHRoZSBzdXBwbGllZCBtYXJrdXAuIFRoZVxuICogb3B0aW9uYWxseSBzdXBwbGllZCBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgb25jZSBmb3IgZWFjaFxuICogPHNjcmlwdD4gZWxlbWVudCB0aGF0IGlzIHJlbmRlcmVkLiBJZiBubyBgaGFuZGxlU2NyaXB0YCBmdW5jdGlvbiBpcyBzdXBwbGllZCxcbiAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgYW55IDxzY3JpcHQ+IGVsZW1lbnRzIGFyZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIEEgc3RyaW5nIG9mIHZhbGlkIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGhhbmRsZVNjcmlwdCBJbnZva2VkIG9uY2UgZm9yIGVhY2ggcmVuZGVyZWQgPHNjcmlwdD4uXG4gKiBAcmV0dXJuIHthcnJheTxET01FbGVtZW50fERPTVRleHROb2RlPn0gQW4gYXJyYXkgb2YgcmVuZGVyZWQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCBkdW1teSBub3QgaW5pdGlhbGl6ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cCk7XG5cbiAgdmFyIHdyYXAgPSBub2RlTmFtZSAmJiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKTtcbiAgaWYgKHdyYXApIHtcbiAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuXG4gICAgdmFyIHdyYXBEZXB0aCA9IHdyYXBbMF07XG4gICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbWFya3VwO1xuICB9XG5cbiAgdmFyIHNjcmlwdHMgPSBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgaWYgKHNjcmlwdHMubGVuZ3RoKSB7XG4gICAgIWhhbmRsZVNjcmlwdCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjcmVhdGVBcnJheUZyb21NaXhlZChzY3JpcHRzKS5mb3JFYWNoKGhhbmRsZVNjcmlwdCk7XG4gIH1cblxuICB2YXIgbm9kZXMgPSBBcnJheS5mcm9tKG5vZGUuY2hpbGROb2Rlcyk7XG4gIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICB9XG4gIHJldHVybiBub2Rlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXA7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGFycmF5LWxpa2Ugb2JqZWN0cyB0byBhcnJheXMuXG4gKlxuICogVGhpcyBBUEkgYXNzdW1lcyB0aGUgY2FsbGVyIGtub3dzIHRoZSBjb250ZW50cyBvZiB0aGUgZGF0YSB0eXBlLiBGb3IgbGVzc1xuICogd2VsbCBkZWZpbmVkIGlucHV0cyB1c2UgY3JlYXRlQXJyYXlGcm9tTWl4ZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb258ZmlsZWxpc3R9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIC8vIFNvbWUgYnJvd3NlcnMgYnVpbHRpbiBvYmplY3RzIGNhbiByZXBvcnQgdHlwZW9mICdmdW5jdGlvbicgKGUuZy4gTm9kZUxpc3RcbiAgLy8gaW4gb2xkIHZlcnNpb25zIG9mIFNhZmFyaSkuXG4gICEoIUFycmF5LmlzQXJyYXkob2JqKSAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICEodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBuZWVkcyBhIGxlbmd0aCBwcm9wZXJ0eScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAhKGxlbmd0aCA9PT0gMCB8fCBsZW5ndGggLSAxIGluIG9iaikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IHNob3VsZCBoYXZlIGtleXMgZm9yIGluZGljZXMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgISh0eXBlb2Ygb2JqLmNhbGxlZSAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IGNhblxcJ3QgYmUgYGFyZ3VtZW50c2AuIFVzZSByZXN0IHBhcmFtcyAnICsgJyhmdW5jdGlvbiguLi5hcmdzKSB7fSkgb3IgQXJyYXkuZnJvbSgpIGluc3RlYWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIE9sZCBJRSBkb2Vzbid0IGdpdmUgY29sbGVjdGlvbnMgYWNjZXNzIHRvIGhhc093blByb3BlcnR5LiBBc3N1bWUgaW5wdXRzXG4gIC8vIHdpdGhvdXQgbWV0aG9kIHdpbGwgdGhyb3cgZHVyaW5nIHRoZSBzbGljZSBjYWxsIGFuZCBza2lwIHN0cmFpZ2h0IHRvIHRoZVxuICAvLyBmYWxsYmFjay5cbiAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJRSA8IDkgZG9lcyBub3Qgc3VwcG9ydCBBcnJheSNzbGljZSBvbiBjb2xsZWN0aW9ucyBvYmplY3RzXG4gICAgfVxuICB9XG5cbiAgLy8gRmFsbCBiYWNrIHRvIGNvcHlpbmcga2V5IGJ5IGtleS4gVGhpcyBhc3N1bWVzIGFsbCBrZXlzIGhhdmUgYSB2YWx1ZSxcbiAgLy8gc28gd2lsbCBub3QgcHJlc2VydmUgc3BhcnNlbHkgcG9wdWxhdGVkIGlucHV0cy5cbiAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICByZXRbaWldID0gb2JqW2lpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFBlcmZvcm0gYSBoZXVyaXN0aWMgdGVzdCB0byBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIFwiYXJyYXktbGlrZVwiLlxuICpcbiAqICAgQSBtb25rIGFza2VkIEpvc2h1LCBhIFplbiBtYXN0ZXIsIFwiSGFzIGEgZG9nIEJ1ZGRoYSBuYXR1cmU/XCJcbiAqICAgSm9zaHUgcmVwbGllZDogXCJNdS5cIlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiBpdHMgYXJndW1lbnQgaGFzIFwiYXJyYXkgbmF0dXJlXCI6IGl0IHJldHVybnNcbiAqIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGFjdHVhbCBhcnJheSwgYW4gYGFyZ3VtZW50cycgb2JqZWN0LCBvciBhblxuICogSFRNTENvbGxlY3Rpb24gKGUuZy4gbm9kZS5jaGlsZE5vZGVzIG9yIG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSkuXG4gKlxuICogSXQgd2lsbCByZXR1cm4gZmFsc2UgZm9yIG90aGVyIGFycmF5LWxpa2Ugb2JqZWN0cyBsaWtlIEZpbGVsaXN0LlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBoYXNBcnJheU5hdHVyZShvYmopIHtcbiAgcmV0dXJuIChcbiAgICAvLyBub3QgbnVsbC9mYWxzZVxuICAgICEhb2JqICYmIChcbiAgICAvLyBhcnJheXMgYXJlIG9iamVjdHMsIE5vZGVMaXN0cyBhcmUgZnVuY3Rpb25zIGluIFNhZmFyaVxuICAgIHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJlxuICAgIC8vIHF1YWNrcyBsaWtlIGFuIGFycmF5XG4gICAgJ2xlbmd0aCcgaW4gb2JqICYmXG4gICAgLy8gbm90IHdpbmRvd1xuICAgICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmXG4gICAgLy8gbm8gRE9NIG5vZGUgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYW4gYXJyYXktbGlrZVxuICAgIC8vIGEgJ3NlbGVjdCcgZWxlbWVudCBoYXMgJ2xlbmd0aCcgYW5kICdpdGVtJyBwcm9wZXJ0aWVzIG9uIElFOFxuICAgIHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicgJiYgKFxuICAgIC8vIGEgcmVhbCBhcnJheVxuICAgIEFycmF5LmlzQXJyYXkob2JqKSB8fFxuICAgIC8vIGFyZ3VtZW50c1xuICAgICdjYWxsZWUnIGluIG9iaiB8fFxuICAgIC8vIEhUTUxDb2xsZWN0aW9uL05vZGVMaXN0XG4gICAgJ2l0ZW0nIGluIG9iailcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXkgYnkgd3JhcHBpbmcgaXQgaW4gYW4gYXJyYXkgaWYgaXQgaXMgbm90LlxuICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50IGlmIGl0IGlzIGFscmVhZHkgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBtb3N0bHkgdXNlZnVsIGlkaW9tYXRpY2FsbHk6XG4gKlxuICogICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCdjcmVhdGVBcnJheUZyb21NaXhlZCcpO1xuICpcbiAqICAgZnVuY3Rpb24gdGFrZXNPbmVPck1vcmVUaGluZ3ModGhpbmdzKSB7XG4gKiAgICAgdGhpbmdzID0gY3JlYXRlQXJyYXlGcm9tTWl4ZWQodGhpbmdzKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byB0cmVhdCBgdGhpbmdzJyBhcyBhbiBhcnJheSwgYnV0IGFjY2VwdCBzY2FsYXJzIGluIHRoZSBBUEkuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gY29udmVydCBhbiBhcnJheS1saWtlIG9iamVjdCwgbGlrZSBgYXJndW1lbnRzYCwgaW50byBhbiBhcnJheVxuICogdXNlIHRvQXJyYXkgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RnJvbU1peGVkKG9iaikge1xuICBpZiAoIWhhc0FycmF5TmF0dXJlKG9iaikpIHtcbiAgICByZXR1cm4gW29ial07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5zbGljZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b0FycmF5KG9iaik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qc1xuLy8gbW9kdWxlIGlkID0gNDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCAqL1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xuXG52YXIgc2hvdWxkV3JhcCA9IHt9O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXBcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIFNWRyBlbGVtZW50cyBzaW5jZSB3ZSBrbm93IHRoZXknbGwgYWx3YXlzIG5lZWQgdG8gYmUgd3JhcHBlZFxuLy8gY29uc2lzdGVudGx5LiBJZiB0aGV5IGFyZSBjcmVhdGVkIGluc2lkZSBhIDxkaXY+IHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuLy8gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxudmFyIHN2Z0VsZW1lbnRzID0gWydjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICd0ZXh0JywgJ3RzcGFuJ107XG5zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgbGF6aWx5IGRldGVjdHMgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeSBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgTG93ZXJjYXNlIGBub2RlTmFtZWAuXG4gKiBAcmV0dXJuIHs/YXJyYXl9IE1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24sIGlmIGFwcGxpY2FibGUuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpIHtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldE1hcmt1cFdyYXAuanNcbi8vIG1vZHVsZSBpZCA9IDQ1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW1lbGl6ZSA9IHJlcXVpcmUoJy4vY2FtZWxpemUnKTtcblxudmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG5cbi8qKlxuICogQ2FtZWxjYXNlcyBhIGh5cGhlbmF0ZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCctbW96LXRyYW5zaXRpb24nKVxuICogICA8IFwiTW96VHJhbnNpdGlvblwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tcy10cmFuc2l0aW9uJylcbiAqICAgPCBcIm1zVHJhbnNpdGlvblwiXG4gKlxuICogQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICogKGh0dHA6Ly93d3cuYW5kaXNtaXRoLmNvbS9ibG9nLzIwMTIvMDIvbW9kZXJuaXpyLXByZWZpeGVkLyksIGFuIGAtbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBjYW1lbGl6ZShzdHJpbmcucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemVTdHlsZU5hbWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDQ2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY2FtZWxpemUuanNcbi8vIG1vZHVsZSBpZCA9IDQ2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDQ2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2h5cGhlbmF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqIEB0eXBlY2hlY2tzIHN0YXRpYy1vbmx5XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lbW9pemVzIHRoZSByZXR1cm4gdmFsdWUgb2YgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgb25lIHN0cmluZyBhcmd1bWVudC5cbiAqL1xuXG5mdW5jdGlvbiBtZW1vaXplU3RyaW5nT25seShjYWxsYmFjaykge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICBpZiAoIWNhY2hlLmhhc093blByb3BlcnR5KHN0cmluZykpIHtcbiAgICAgIGNhY2hlW3N0cmluZ10gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0cmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtzdHJpbmddO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVTdHJpbmdPbmx5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL21lbW9pemVTdHJpbmdPbmx5LmpzXG4vLyBtb2R1bGUgaWQgPSA0Njhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHREZWJ1Z0lEID0gMTtcblxuZnVuY3Rpb24gZ2V0TmV4dERlYnVnSUQoKSB7XG4gIHJldHVybiBuZXh0RGVidWdJRCsrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5leHREZWJ1Z0lEO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0L2xpYi9nZXROZXh0RGVidWdJRC5qc1xuLy8gbW9kdWxlIGlkID0gNDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIHN1cHBsaWVkIGVsZW1lbnQgb3Igd2luZG93LlxuICpcbiAqIFRoZSByZXR1cm4gdmFsdWVzIGFyZSB1bmJvdW5kZWQsIHVubGlrZSBgZ2V0U2Nyb2xsUG9zaXRpb25gLiBUaGlzIG1lYW5zIHRoZXlcbiAqIG1heSBiZSBuZWdhdGl2ZSBvciBleGNlZWQgdGhlIGVsZW1lbnQgYm91bmRhcmllcyAod2hpY2ggaXMgcG9zc2libGUgdXNpbmdcbiAqIGluZXJ0aWFsIHNjcm9sbGluZykuXG4gKlxuICogQHBhcmFtIHtET01XaW5kb3d8RE9NRWxlbWVudH0gc2Nyb2xsYWJsZVxuICogQHJldHVybiB7b2JqZWN0fSBNYXAgd2l0aCBgeGAgYW5kIGB5YCBrZXlzLlxuICovXG5cbmZ1bmN0aW9uIGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHNjcm9sbGFibGUpIHtcbiAgaWYgKHNjcm9sbGFibGUuV2luZG93ICYmIHNjcm9sbGFibGUgaW5zdGFuY2VvZiBzY3JvbGxhYmxlLldpbmRvdykge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBzY3JvbGxhYmxlLnBhZ2VYT2Zmc2V0IHx8IHNjcm9sbGFibGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsXG4gICAgICB5OiBzY3JvbGxhYmxlLnBhZ2VZT2Zmc2V0IHx8IHNjcm9sbGFibGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBzY3JvbGxhYmxlLnNjcm9sbExlZnQsXG4gICAgeTogc2Nyb2xsYWJsZS5zY3JvbGxUb3BcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDQ5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgNSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gNDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCA1IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSA0OThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDUiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJhc3BlY3RfcmF0aW9cIjoge1xuICAgIFwiaGVpZ2h0XCI6IFwiMFwiLFxuICAgIFwicG9zaXRpb25cIjogXCJyZWxhdGl2ZVwiXG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18xNng5XCI6IHtcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNTYuMjUlXCJcbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzl4MTZcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxNzcuNzclXCJcbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzR4M1wiOiB7XG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjc1JVwiXG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18zeDRcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxMzMuMzMlXCJcbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzZ4NFwiOiB7XG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjY2LjYlXCJcbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzR4NlwiOiB7XG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjE1MCVcIlxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fOHg1XCI6IHtcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNjIuNSVcIlxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fNXg4XCI6IHtcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTYwJVwiXG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX183eDVcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCI3MS40MiVcIlxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fNXg3XCI6IHtcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTQwJVwiXG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18xeDFcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxMDAlXCJcbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fX29iamVjdFwiOiB7XG4gICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIsXG4gICAgXCJ0b3BcIjogXCIwXCIsXG4gICAgXCJyaWdodFwiOiBcIjBcIixcbiAgICBcImJvdHRvbVwiOiBcIjBcIixcbiAgICBcImxlZnRcIjogXCIwXCIsXG4gICAgXCJ3aWR0aFwiOiBcIjEwMCVcIixcbiAgICBcImhlaWdodFwiOiBcIjEwMCVcIixcbiAgICBcInotaW5kZXhcIjogXCIxMDBcIlxuICB9LFxuICBcImJnX2NlbnRlclwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcImNlbnRlciBjZW50ZXJcIlxuICB9LFxuICBcImJnX3RvcFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcInRvcCBjZW50ZXJcIlxuICB9LFxuICBcImJnX3JpZ2h0XCI6IHtcbiAgICBcImJhY2tncm91bmQtcmVwZWF0XCI6IFwibm8tcmVwZWF0XCIsXG4gICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwiY2VudGVyIHJpZ2h0XCJcbiAgfSxcbiAgXCJiZ19ib3R0b21cIjoge1xuICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogXCJib3R0b20gY2VudGVyXCJcbiAgfSxcbiAgXCJiZ19sZWZ0XCI6IHtcbiAgICBcImJhY2tncm91bmQtcmVwZWF0XCI6IFwibm8tcmVwZWF0XCIsXG4gICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwiY2VudGVyIGxlZnRcIlxuICB9LFxuICBcImNvdmVyXCI6IHtcbiAgICBcImJhY2tncm91bmQtc2l6ZVwiOiBcImNvdmVyXCJcbiAgfSxcbiAgXCJjb250YWluXCI6IHtcbiAgICBcImJhY2tncm91bmQtc2l6ZVwiOiBcImNvbnRhaW5cIlxuICB9LFxuICBcImJfX2JsYWNrXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWJsYWNrKVwiXG4gIH0sXG4gIFwiYl9fbmVhcl9ibGFja1wiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1uZWFyLWJsYWNrKVwiXG4gIH0sXG4gIFwiYl9fZGFya19ncmF5XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWRhcmstZ3JheSlcIlxuICB9LFxuICBcImJfX21pZF9ncmF5XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLW1pZC1ncmF5KVwiXG4gIH0sXG4gIFwiYl9fZ3JheVwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1ncmF5KVwiXG4gIH0sXG4gIFwiYl9fc2lsdmVyXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXNpbHZlcilcIlxuICB9LFxuICBcImJfX2xpZ2h0X3NpbHZlclwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1saWdodC1zaWx2ZXIpXCJcbiAgfSxcbiAgXCJiX19saWdodF9ncmF5XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWxpZ2h0LWdyYXkpXCJcbiAgfSxcbiAgXCJiX19uZWFyX3doaXRlXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLW5lYXItd2hpdGUpXCJcbiAgfSxcbiAgXCJiX193aGl0ZVwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS13aGl0ZSlcIlxuICB9LFxuICBcImJfX3doaXRlXzkwXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXdoaXRlLTkwKVwiXG4gIH0sXG4gIFwiYl9fd2hpdGVfODBcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0td2hpdGUtODApXCJcbiAgfSxcbiAgXCJiX193aGl0ZV83MFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS13aGl0ZS03MClcIlxuICB9LFxuICBcImJfX3doaXRlXzYwXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXdoaXRlLTYwKVwiXG4gIH0sXG4gIFwiYl9fd2hpdGVfNTBcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0td2hpdGUtNTApXCJcbiAgfSxcbiAgXCJiX193aGl0ZV80MFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS13aGl0ZS00MClcIlxuICB9LFxuICBcImJfX3doaXRlXzMwXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXdoaXRlLTMwKVwiXG4gIH0sXG4gIFwiYl9fd2hpdGVfMjBcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0td2hpdGUtMjApXCJcbiAgfSxcbiAgXCJiX193aGl0ZV8xMFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS13aGl0ZS0xMClcIlxuICB9LFxuICBcImJfX3doaXRlXzA1XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXdoaXRlLTA1KVwiXG4gIH0sXG4gIFwiYl9fd2hpdGVfMDI1XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXdoaXRlLTAyNSlcIlxuICB9LFxuICBcImJfX3doaXRlXzAxMjVcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0td2hpdGUtMDEyNSlcIlxuICB9LFxuICBcImJfX2JsYWNrXzkwXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWJsYWNrLTkwKVwiXG4gIH0sXG4gIFwiYl9fYmxhY2tfODBcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tYmxhY2stODApXCJcbiAgfSxcbiAgXCJiX19ibGFja183MFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1ibGFjay03MClcIlxuICB9LFxuICBcImJfX2JsYWNrXzYwXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWJsYWNrLTYwKVwiXG4gIH0sXG4gIFwiYl9fYmxhY2tfNTBcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tYmxhY2stNTApXCJcbiAgfSxcbiAgXCJiX19ibGFja180MFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1ibGFjay00MClcIlxuICB9LFxuICBcImJfX2JsYWNrXzMwXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWJsYWNrLTMwKVwiXG4gIH0sXG4gIFwiYl9fYmxhY2tfMjBcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tYmxhY2stMjApXCJcbiAgfSxcbiAgXCJiX19ibGFja18xMFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1ibGFjay0xMClcIlxuICB9LFxuICBcImJfX2JsYWNrXzA1XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWJsYWNrLTA1KVwiXG4gIH0sXG4gIFwiYl9fYmxhY2tfMDI1XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWJsYWNrLTAyNSlcIlxuICB9LFxuICBcImJfX2JsYWNrXzAxMjVcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tYmxhY2stMDEyNSlcIlxuICB9LFxuICBcImJfX2RhcmtfcmVkXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWRhcmstcmVkKVwiXG4gIH0sXG4gIFwiYl9fcmVkXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXJlZClcIlxuICB9LFxuICBcImJfX2xpZ2h0X3JlZFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1saWdodC1yZWQpXCJcbiAgfSxcbiAgXCJiX19vcmFuZ2VcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tb3JhbmdlKVwiXG4gIH0sXG4gIFwiYl9fZ29sZFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1nb2xkKVwiXG4gIH0sXG4gIFwiYl9feWVsbG93XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLXllbGxvdylcIlxuICB9LFxuICBcImJfX2xpZ2h0X3llbGxvd1wiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1saWdodC15ZWxsb3cpXCJcbiAgfSxcbiAgXCJiX19wdXJwbGVcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tcHVycGxlKVwiXG4gIH0sXG4gIFwiYl9fbGlnaHRfcHVycGxlXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWxpZ2h0LXB1cnBsZSlcIlxuICB9LFxuICBcImJfX2RhcmtfcGlua1wiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1kYXJrLXBpbmspXCJcbiAgfSxcbiAgXCJiX19ob3RfcGlua1wiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1ob3QtcGluaylcIlxuICB9LFxuICBcImJfX3BpbmtcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tcGluaylcIlxuICB9LFxuICBcImJfX2xpZ2h0X3BpbmtcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcGluaylcIlxuICB9LFxuICBcImJfX2RhcmtfZ3JlZW5cIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tZGFyay1ncmVlbilcIlxuICB9LFxuICBcImJfX2dyZWVuXCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLWdyZWVuKVwiXG4gIH0sXG4gIFwiYl9fbGlnaHRfZ3JlZW5cIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JlZW4pXCJcbiAgfSxcbiAgXCJiX19uYXZ5XCI6IHtcbiAgICBcImJvcmRlci1jb2xvclwiOiBcInZhcigtLW5hdnkpXCJcbiAgfSxcbiAgXCJiX19kYXJrX2JsdWVcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tZGFyay1ibHVlKVwiXG4gIH0sXG4gIFwiYl9fYmx1ZVwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1ibHVlKVwiXG4gIH0sXG4gIFwiYl9fbGlnaHRfYmx1ZVwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1saWdodC1ibHVlKVwiXG4gIH0sXG4gIFwiYl9fbGlnaHRlc3RfYmx1ZVwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS1saWdodGVzdC1ibHVlKVwiXG4gIH0sXG4gIFwiYl9fd2FzaGVkX2JsdWVcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0td2FzaGVkLWJsdWUpXCJcbiAgfSxcbiAgXCJiX193YXNoZWRfZ3JlZW5cIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0td2FzaGVkLWdyZWVuKVwiXG4gIH0sXG4gIFwiYl9fd2FzaGVkX3llbGxvd1wiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS13YXNoZWQteWVsbG93KVwiXG4gIH0sXG4gIFwiYl9fd2FzaGVkX3JlZFwiOiB7XG4gICAgXCJib3JkZXItY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtcmVkKVwiXG4gIH0sXG4gIFwiYl9fdHJhbnNwYXJlbnRcIjoge1xuICAgIFwiYm9yZGVyLWNvbG9yXCI6IFwidmFyKC0tdHJhbnNwYXJlbnQpXCJcbiAgfSxcbiAgXCJicjBcIjoge1xuICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjBcIlxuICB9LFxuICBcImJyMVwiOiB7XG4gICAgXCJib3JkZXItcmFkaXVzXCI6IFwiLjEyNXJlbVwiXG4gIH0sXG4gIFwiYnIyXCI6IHtcbiAgICBcImJvcmRlci1yYWRpdXNcIjogXCIuMjVyZW1cIlxuICB9LFxuICBcImJyM1wiOiB7XG4gICAgXCJib3JkZXItcmFkaXVzXCI6IFwiLjVyZW1cIlxuICB9LFxuICBcImJyNFwiOiB7XG4gICAgXCJib3JkZXItcmFkaXVzXCI6IFwiMXJlbVwiXG4gIH0sXG4gIFwiYnJfMTAwXCI6IHtcbiAgICBcImJvcmRlci1yYWRpdXNcIjogXCIxMDAlXCJcbiAgfSxcbiAgXCJicl9waWxsXCI6IHtcbiAgICBcImJvcmRlci1yYWRpdXNcIjogXCI5OTk5cHhcIlxuICB9LFxuICBcImJyX19ib3R0b21cIjoge1xuICAgIFwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1wiOiBcIjBcIixcbiAgICBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gIH0sXG4gIFwiYnJfX3RvcFwiOiB7XG4gICAgXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCI6IFwiMFwiLFxuICAgIFwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcIjogXCIwXCJcbiAgfSxcbiAgXCJicl9fcmlnaHRcIjoge1xuICAgIFwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1wiOiBcIjBcIixcbiAgICBcImJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXNcIjogXCIwXCJcbiAgfSxcbiAgXCJicl9fbGVmdFwiOiB7XG4gICAgXCJib3JkZXItdG9wLXJpZ2h0LXJhZGl1c1wiOiBcIjBcIixcbiAgICBcImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gIH0sXG4gIFwiYl9fZG90dGVkXCI6IHtcbiAgICBcImJvcmRlci1zdHlsZVwiOiBcImRvdHRlZFwiXG4gIH0sXG4gIFwiYl9fZGFzaGVkXCI6IHtcbiAgICBcImJvcmRlci1zdHlsZVwiOiBcImRhc2hlZFwiXG4gIH0sXG4gIFwiYl9fc29saWRcIjoge1xuICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwic29saWRcIlxuICB9LFxuICBcImJfX25vbmVcIjoge1xuICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwibm9uZVwiXG4gIH0sXG4gIFwiYncwXCI6IHtcbiAgICBcImJvcmRlci13aWR0aFwiOiBcIjBcIlxuICB9LFxuICBcImJ3MVwiOiB7XG4gICAgXCJib3JkZXItd2lkdGhcIjogXCIuMTI1cmVtXCJcbiAgfSxcbiAgXCJidzJcIjoge1xuICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiLjI1cmVtXCJcbiAgfSxcbiAgXCJidzNcIjoge1xuICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiLjVyZW1cIlxuICB9LFxuICBcImJ3NFwiOiB7XG4gICAgXCJib3JkZXItd2lkdGhcIjogXCIxcmVtXCJcbiAgfSxcbiAgXCJidzVcIjoge1xuICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMnJlbVwiXG4gIH0sXG4gIFwiYnRfMFwiOiB7XG4gICAgXCJib3JkZXItdG9wLXdpZHRoXCI6IFwiMFwiXG4gIH0sXG4gIFwiYnJfMFwiOiB7XG4gICAgXCJib3JkZXItcmlnaHQtd2lkdGhcIjogXCIwXCJcbiAgfSxcbiAgXCJiYl8wXCI6IHtcbiAgICBcImJvcmRlci1ib3R0b20td2lkdGhcIjogXCIwXCJcbiAgfSxcbiAgXCJibF8wXCI6IHtcbiAgICBcImJvcmRlci1sZWZ0LXdpZHRoXCI6IFwiMFwiXG4gIH0sXG4gIFwiYmFcIjoge1xuICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwic29saWRcIixcbiAgICBcImJvcmRlci13aWR0aFwiOiBcIjFweFwiXG4gIH0sXG4gIFwiYnRcIjoge1xuICAgIFwiYm9yZGVyLXRvcC1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgXCJib3JkZXItdG9wLXdpZHRoXCI6IFwiMXB4XCJcbiAgfSxcbiAgXCJiclwiOiB7XG4gICAgXCJib3JkZXItcmlnaHQtc3R5bGVcIjogXCJzb2xpZFwiLFxuICAgIFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCI6IFwiMXB4XCJcbiAgfSxcbiAgXCJiYlwiOiB7XG4gICAgXCJib3JkZXItYm90dG9tLXN0eWxlXCI6IFwic29saWRcIixcbiAgICBcImJvcmRlci1ib3R0b20td2lkdGhcIjogXCIxcHhcIlxuICB9LFxuICBcImJsXCI6IHtcbiAgICBcImJvcmRlci1sZWZ0LXN0eWxlXCI6IFwic29saWRcIixcbiAgICBcImJvcmRlci1sZWZ0LXdpZHRoXCI6IFwiMXB4XCJcbiAgfSxcbiAgXCJiblwiOiB7XG4gICAgXCJib3JkZXItc3R5bGVcIjogXCJub25lXCIsXG4gICAgXCJib3JkZXItd2lkdGhcIjogXCIwXCJcbiAgfSxcbiAgXCJzaGFkb3dfMVwiOiB7XG4gICAgXCJib3gtc2hhZG93XCI6IFwiMHB4IDBweCA0cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgfSxcbiAgXCJzaGFkb3dfMlwiOiB7XG4gICAgXCJib3gtc2hhZG93XCI6IFwiMHB4IDBweCA4cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgfSxcbiAgXCJzaGFkb3dfM1wiOiB7XG4gICAgXCJib3gtc2hhZG93XCI6IFwiMnB4IDJweCA0cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgfSxcbiAgXCJzaGFkb3dfNFwiOiB7XG4gICAgXCJib3gtc2hhZG93XCI6IFwiMnB4IDJweCA4cHggMHB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgfSxcbiAgXCJzaGFkb3dfNVwiOiB7XG4gICAgXCJib3gtc2hhZG93XCI6IFwiNHB4IDRweCA4cHggMHB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgfSxcbiAgXCJodG1sXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJib2R5XCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJkaXZcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImFydGljbGVcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcInNlY3Rpb25cIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcIm1haW5cIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImZvb3RlclwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiXG4gIH0sXG4gIFwiaGVhZGVyXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJmb3JtXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJmaWVsZHNldFwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiXG4gIH0sXG4gIFwibGVnZW5kXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJwcmVcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIixcbiAgICBcIndoaXRlLXNwYWNlXCI6IFwicHJlXCJcbiAgfSxcbiAgXCJjb2RlXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCIsXG4gICAgXCJmb250LWZhbWlseVwiOiBcIkNvbnNvbGFzLFxcbiAgICAgICAgICAgICAgIG1vbmFjbyxcXG4gICAgICAgICAgICAgICBtb25vc3BhY2VcIlxuICB9LFxuICBcInBcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImFcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImgxXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCIsXG4gICAgXCJoZWlnaHRcIjogXCIxcmVtXCJcbiAgfSxcbiAgXCJoMlwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiLFxuICAgIFwiaGVpZ2h0XCI6IFwiMnJlbVwiXG4gIH0sXG4gIFwiaDNcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIixcbiAgICBcImhlaWdodFwiOiBcIjRyZW1cIlxuICB9LFxuICBcImg0XCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCIsXG4gICAgXCJoZWlnaHRcIjogXCI4cmVtXCJcbiAgfSxcbiAgXCJoNVwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiLFxuICAgIFwiaGVpZ2h0XCI6IFwiMTZyZW1cIlxuICB9LFxuICBcImg2XCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJ1bFwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiXG4gIH0sXG4gIFwib2xcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImxpXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJkbFwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiXG4gIH0sXG4gIFwiZHRcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIixcbiAgICBcImRpc3BsYXlcIjogXCJ0YWJsZVwiXG4gIH0sXG4gIFwiZGRcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcInRleHRhcmVhXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJpbnB1dF90eXBlX19lbWFpbFwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiXG4gIH0sXG4gIFwiaW5wdXRfdHlwZV9fbnVtYmVyXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJpbnB1dF90eXBlX19wYXNzd29yZFwiOiB7XG4gICAgXCJib3gtc2l6aW5nXCI6IFwiYm9yZGVyLWJveFwiXG4gIH0sXG4gIFwiaW5wdXRfdHlwZV9fdGVsXCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJpbnB1dF90eXBlX190ZXh0XCI6IHtcbiAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgfSxcbiAgXCJpbnB1dF90eXBlX191cmxcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImJvcmRlcl9ib3hcIjoge1xuICAgIFwiYm94LXNpemluZ1wiOiBcImJvcmRlci1ib3hcIlxuICB9LFxuICBcImNmX2JlZm9yZVwiOiB7XG4gICAgXCJjb250ZW50XCI6IFwiXFxcIiBcXFwiXCIsXG4gICAgXCJkaXNwbGF5XCI6IFwidGFibGVcIlxuICB9LFxuICBcImNmX2FmdGVyXCI6IHtcbiAgICBcImNsZWFyXCI6IFwiYm90aFwiXG4gIH0sXG4gIFwiY2ZcIjoge1xuICAgIFwiKnpvb21cIjogXCIxXCJcbiAgfSxcbiAgXCJjbFwiOiB7XG4gICAgXCJjbGVhclwiOiBcImxlZnRcIlxuICB9LFxuICBcImNyXCI6IHtcbiAgICBcImNsZWFyXCI6IFwicmlnaHRcIlxuICB9LFxuICBcImNiXCI6IHtcbiAgICBcImNsZWFyXCI6IFwiYm90aFwiXG4gIH0sXG4gIFwiY25cIjoge1xuICAgIFwiY2xlYXJcIjogXCJub25lXCJcbiAgfSxcbiAgXCJ0b3BfMFwiOiB7XG4gICAgXCJ0b3BcIjogXCIwXCJcbiAgfSxcbiAgXCJyaWdodF8wXCI6IHtcbiAgICBcInJpZ2h0XCI6IFwiMFwiXG4gIH0sXG4gIFwiYm90dG9tXzBcIjoge1xuICAgIFwiYm90dG9tXCI6IFwiMFwiXG4gIH0sXG4gIFwibGVmdF8wXCI6IHtcbiAgICBcImxlZnRcIjogXCIwXCJcbiAgfSxcbiAgXCJ0b3BfMVwiOiB7XG4gICAgXCJ0b3BcIjogXCIxcmVtXCJcbiAgfSxcbiAgXCJyaWdodF8xXCI6IHtcbiAgICBcInJpZ2h0XCI6IFwiMXJlbVwiXG4gIH0sXG4gIFwiYm90dG9tXzFcIjoge1xuICAgIFwiYm90dG9tXCI6IFwiMXJlbVwiXG4gIH0sXG4gIFwibGVmdF8xXCI6IHtcbiAgICBcImxlZnRcIjogXCIxcmVtXCJcbiAgfSxcbiAgXCJ0b3BfMlwiOiB7XG4gICAgXCJ0b3BcIjogXCIycmVtXCJcbiAgfSxcbiAgXCJyaWdodF8yXCI6IHtcbiAgICBcInJpZ2h0XCI6IFwiMnJlbVwiXG4gIH0sXG4gIFwiYm90dG9tXzJcIjoge1xuICAgIFwiYm90dG9tXCI6IFwiMnJlbVwiXG4gIH0sXG4gIFwibGVmdF8yXCI6IHtcbiAgICBcImxlZnRcIjogXCIycmVtXCJcbiAgfSxcbiAgXCJ0b3BfXzFcIjoge1xuICAgIFwidG9wXCI6IFwiLTFyZW1cIlxuICB9LFxuICBcInJpZ2h0X18xXCI6IHtcbiAgICBcInJpZ2h0XCI6IFwiLTFyZW1cIlxuICB9LFxuICBcImJvdHRvbV9fMVwiOiB7XG4gICAgXCJib3R0b21cIjogXCItMXJlbVwiXG4gIH0sXG4gIFwibGVmdF9fMVwiOiB7XG4gICAgXCJsZWZ0XCI6IFwiLTFyZW1cIlxuICB9LFxuICBcInRvcF9fMlwiOiB7XG4gICAgXCJ0b3BcIjogXCItMnJlbVwiXG4gIH0sXG4gIFwicmlnaHRfXzJcIjoge1xuICAgIFwicmlnaHRcIjogXCItMnJlbVwiXG4gIH0sXG4gIFwiYm90dG9tX18yXCI6IHtcbiAgICBcImJvdHRvbVwiOiBcIi0ycmVtXCJcbiAgfSxcbiAgXCJsZWZ0X18yXCI6IHtcbiAgICBcImxlZnRcIjogXCItMnJlbVwiXG4gIH0sXG4gIFwiYWJzb2x1dGVfX2ZpbGxcIjoge1xuICAgIFwidG9wXCI6IFwiMFwiLFxuICAgIFwicmlnaHRcIjogXCIwXCIsXG4gICAgXCJib3R0b21cIjogXCIwXCIsXG4gICAgXCJsZWZ0XCI6IFwiMFwiXG4gIH0sXG4gIFwiZG5cIjoge1xuICAgIFwiZGlzcGxheVwiOiBcIm5vbmVcIlxuICB9LFxuICBcImRpXCI6IHtcbiAgICBcImRpc3BsYXlcIjogXCJpbmxpbmVcIlxuICB9LFxuICBcImRiXCI6IHtcbiAgICBcImRpc3BsYXlcIjogXCJibG9ja1wiXG4gIH0sXG4gIFwiZGliXCI6IHtcbiAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIlxuICB9LFxuICBcImRpdFwiOiB7XG4gICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLXRhYmxlXCJcbiAgfSxcbiAgXCJkdGNcIjoge1xuICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLWNlbGxcIlxuICB9LFxuICBcImR0X3Jvd1wiOiB7XG4gICAgXCJkaXNwbGF5XCI6IFwidGFibGUtcm93XCJcbiAgfSxcbiAgXCJkdF9yb3dfZ3JvdXBcIjoge1xuICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLXJvdy1ncm91cFwiXG4gIH0sXG4gIFwiZHRfY29sdW1uXCI6IHtcbiAgICBcImRpc3BsYXlcIjogXCJ0YWJsZS1jb2x1bW5cIlxuICB9LFxuICBcImR0X2NvbHVtbl9ncm91cFwiOiB7XG4gICAgXCJkaXNwbGF5XCI6IFwidGFibGUtY29sdW1uLWdyb3VwXCJcbiAgfSxcbiAgXCJkdF9fZml4ZWRcIjoge1xuICAgIFwidGFibGUtbGF5b3V0XCI6IFwiZml4ZWRcIixcbiAgICBcIndpZHRoXCI6IFwiMTAwJVwiXG4gIH0sXG4gIFwiZmxleFwiOiB7XG4gICAgXCJkaXNwbGF5XCI6IFwiZmxleFwiXG4gIH0sXG4gIFwiaW5saW5lX2ZsZXhcIjoge1xuICAgIFwiZGlzcGxheVwiOiBcImlubGluZS1mbGV4XCJcbiAgfSxcbiAgXCJmbGV4X2F1dG9cIjoge1xuICAgIFwiZmxleFwiOiBcIjEgMSBhdXRvXCIsXG4gICAgXCJtaW4td2lkdGhcIjogXCIwXCIsXG4gICAgXCJtaW4taGVpZ2h0XCI6IFwiMFwiXG4gIH0sXG4gIFwiZmxleF9ub25lXCI6IHtcbiAgICBcImZsZXhcIjogXCJub25lXCJcbiAgfSxcbiAgXCJmbGV4X2NvbHVtblwiOiB7XG4gICAgXCJmbGV4LWRpcmVjdGlvblwiOiBcImNvbHVtblwiXG4gIH0sXG4gIFwiZmxleF9yb3dcIjoge1xuICAgIFwiZmxleC1kaXJlY3Rpb25cIjogXCJyb3dcIlxuICB9LFxuICBcImZsZXhfd3JhcFwiOiB7XG4gICAgXCJmbGV4LXdyYXBcIjogXCJ3cmFwXCJcbiAgfSxcbiAgXCJpdGVtc19zdGFydFwiOiB7XG4gICAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtc3RhcnRcIlxuICB9LFxuICBcIml0ZW1zX2VuZFwiOiB7XG4gICAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtZW5kXCJcbiAgfSxcbiAgXCJpdGVtc19jZW50ZXJcIjoge1xuICAgIFwiYWxpZ24taXRlbXNcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcIml0ZW1zX2Jhc2VsaW5lXCI6IHtcbiAgICBcImFsaWduLWl0ZW1zXCI6IFwiYmFzZWxpbmVcIlxuICB9LFxuICBcIml0ZW1zX3N0cmV0Y2hcIjoge1xuICAgIFwiYWxpZ24taXRlbXNcIjogXCJzdHJldGNoXCJcbiAgfSxcbiAgXCJzZWxmX3N0YXJ0XCI6IHtcbiAgICBcImFsaWduLXNlbGZcIjogXCJmbGV4LXN0YXJ0XCJcbiAgfSxcbiAgXCJzZWxmX2VuZFwiOiB7XG4gICAgXCJhbGlnbi1zZWxmXCI6IFwiZmxleC1lbmRcIlxuICB9LFxuICBcInNlbGZfY2VudGVyXCI6IHtcbiAgICBcImFsaWduLXNlbGZcIjogXCJjZW50ZXJcIlxuICB9LFxuICBcInNlbGZfYmFzZWxpbmVcIjoge1xuICAgIFwiYWxpZ24tc2VsZlwiOiBcImJhc2VsaW5lXCJcbiAgfSxcbiAgXCJzZWxmX3N0cmV0Y2hcIjoge1xuICAgIFwiYWxpZ24tc2VsZlwiOiBcInN0cmV0Y2hcIlxuICB9LFxuICBcImp1c3RpZnlfc3RhcnRcIjoge1xuICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1zdGFydFwiXG4gIH0sXG4gIFwianVzdGlmeV9lbmRcIjoge1xuICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1lbmRcIlxuICB9LFxuICBcImp1c3RpZnlfY2VudGVyXCI6IHtcbiAgICBcImp1c3RpZnktY29udGVudFwiOiBcImNlbnRlclwiXG4gIH0sXG4gIFwianVzdGlmeV9iZXR3ZWVuXCI6IHtcbiAgICBcImp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWJldHdlZW5cIlxuICB9LFxuICBcImp1c3RpZnlfYXJvdW5kXCI6IHtcbiAgICBcImp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWFyb3VuZFwiXG4gIH0sXG4gIFwiY29udGVudF9zdGFydFwiOiB7XG4gICAgXCJhbGlnbi1jb250ZW50XCI6IFwiZmxleC1zdGFydFwiXG4gIH0sXG4gIFwiY29udGVudF9lbmRcIjoge1xuICAgIFwiYWxpZ24tY29udGVudFwiOiBcImZsZXgtZW5kXCJcbiAgfSxcbiAgXCJjb250ZW50X2NlbnRlclwiOiB7XG4gICAgXCJhbGlnbi1jb250ZW50XCI6IFwiY2VudGVyXCJcbiAgfSxcbiAgXCJjb250ZW50X2JldHdlZW5cIjoge1xuICAgIFwiYWxpZ24tY29udGVudFwiOiBcInNwYWNlLWJldHdlZW5cIlxuICB9LFxuICBcImNvbnRlbnRfYXJvdW5kXCI6IHtcbiAgICBcImFsaWduLWNvbnRlbnRcIjogXCJzcGFjZS1hcm91bmRcIlxuICB9LFxuICBcImNvbnRlbnRfc3RyZXRjaFwiOiB7XG4gICAgXCJhbGlnbi1jb250ZW50XCI6IFwic3RyZXRjaFwiXG4gIH0sXG4gIFwib3JkZXJfMFwiOiB7XG4gICAgXCJvcmRlclwiOiBcIjBcIlxuICB9LFxuICBcIm9yZGVyXzFcIjoge1xuICAgIFwib3JkZXJcIjogXCIxXCJcbiAgfSxcbiAgXCJvcmRlcl8yXCI6IHtcbiAgICBcIm9yZGVyXCI6IFwiMlwiXG4gIH0sXG4gIFwib3JkZXJfM1wiOiB7XG4gICAgXCJvcmRlclwiOiBcIjNcIlxuICB9LFxuICBcIm9yZGVyXzRcIjoge1xuICAgIFwib3JkZXJcIjogXCI0XCJcbiAgfSxcbiAgXCJvcmRlcl81XCI6IHtcbiAgICBcIm9yZGVyXCI6IFwiNVwiXG4gIH0sXG4gIFwib3JkZXJfNlwiOiB7XG4gICAgXCJvcmRlclwiOiBcIjZcIlxuICB9LFxuICBcIm9yZGVyXzdcIjoge1xuICAgIFwib3JkZXJcIjogXCI3XCJcbiAgfSxcbiAgXCJvcmRlcl84XCI6IHtcbiAgICBcIm9yZGVyXCI6IFwiOFwiXG4gIH0sXG4gIFwib3JkZXJfbGFzdFwiOiB7XG4gICAgXCJvcmRlclwiOiBcIjk5OTk5XCJcbiAgfSxcbiAgXCJmbFwiOiB7XG4gICAgXCJmbG9hdFwiOiBcImxlZnRcIixcbiAgICBcIl9kaXNwbGF5XCI6IFwiaW5saW5lXCJcbiAgfSxcbiAgXCJmclwiOiB7XG4gICAgXCJmbG9hdFwiOiBcInJpZ2h0XCIsXG4gICAgXCJfZGlzcGxheVwiOiBcImlubGluZVwiXG4gIH0sXG4gIFwiZm5cIjoge1xuICAgIFwiZmxvYXRcIjogXCJub25lXCJcbiAgfSxcbiAgXCJzYW5zX3NlcmlmXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwiLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LFxcbiAgICAgICAgICAgICAgICdhdmVuaXIgbmV4dCcsIGF2ZW5pcixcXG4gICAgICAgICAgICAgICBoZWx2ZXRpY2EsICdoZWx2ZXRpY2EgbmV1ZScsXFxuICAgICAgICAgICAgICAgdWJ1bnR1LFxcbiAgICAgICAgICAgICAgIHJvYm90bywgbm90byxcXG4gICAgICAgICAgICAgICAnc2Vnb2UgdWknLCBhcmlhbCxcXG4gICAgICAgICAgICAgICBzYW5zLXNlcmlmXCJcbiAgfSxcbiAgXCJzZXJpZlwiOiB7XG4gICAgXCJmb250LWZhbWlseVwiOiBcImdlb3JnaWEsXFxuICAgICAgICAgICAgICAgdGltZXMsXFxuICAgICAgICAgICAgICAgc2VyaWZcIlxuICB9LFxuICBcInN5c3RlbV9zYW5zX3NlcmlmXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwic2Fucy1zZXJpZlwiXG4gIH0sXG4gIFwic3lzdGVtX3NlcmlmXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwic2VyaWZcIlxuICB9LFxuICBcImNvdXJpZXJcIjoge1xuICAgIFwiZm9udC1mYW1pbHlcIjogXCInQ291cmllciBOZXh0JyxcXG4gICAgICAgICAgICAgICBjb3VyaWVyLFxcbiAgICAgICAgICAgICAgIG1vbm9zcGFjZVwiXG4gIH0sXG4gIFwiaGVsdmV0aWNhXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwiJ2hlbHZldGljYSBuZXVlJywgaGVsdmV0aWNhLFxcbiAgICAgICAgICAgICAgIHNhbnMtc2VyaWZcIlxuICB9LFxuICBcImF2ZW5pclwiOiB7XG4gICAgXCJmb250LWZhbWlseVwiOiBcIidhdmVuaXIgbmV4dCcsIGF2ZW5pcixcXG4gICAgICAgICAgICAgICBzYW5zLXNlcmlmXCJcbiAgfSxcbiAgXCJhdGhlbGFzXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwiYXRoZWxhcyxcXG4gICAgICAgICAgICAgICBnZW9yZ2lhLFxcbiAgICAgICAgICAgICAgIHNlcmlmXCJcbiAgfSxcbiAgXCJnZW9yZ2lhXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwiZ2VvcmdpYSxcXG4gICAgICAgICAgICAgICBzZXJpZlwiXG4gIH0sXG4gIFwidGltZXNcIjoge1xuICAgIFwiZm9udC1mYW1pbHlcIjogXCJ0aW1lcyxcXG4gICAgICAgICAgICAgICBzZXJpZlwiXG4gIH0sXG4gIFwiYm9kb25pXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwiXFxcIkJvZG9uaSBNVFxcXCIsXFxuICAgICAgICAgICAgICAgIHNlcmlmXCJcbiAgfSxcbiAgXCJjYWxpc3RvXCI6IHtcbiAgICBcImZvbnQtZmFtaWx5XCI6IFwiXFxcIkNhbGlzdG8gTVRcXFwiLFxcbiAgICAgICAgICAgICAgICBzZXJpZlwiXG4gIH0sXG4gIFwiZ2FyYW1vbmRcIjoge1xuICAgIFwiZm9udC1mYW1pbHlcIjogXCJnYXJhbW9uZCxcXG4gICAgICAgICAgICAgICBzZXJpZlwiXG4gIH0sXG4gIFwiYmFza2VydmlsbGVcIjoge1xuICAgIFwiZm9udC1mYW1pbHlcIjogXCJiYXNrZXJ2aWxsZSxcXG4gICAgICAgICAgICAgICBzZXJpZlwiXG4gIH0sXG4gIFwiaVwiOiB7XG4gICAgXCJmb250LXN0eWxlXCI6IFwiaXRhbGljXCJcbiAgfSxcbiAgXCJmc19ub3JtYWxcIjoge1xuICAgIFwiZm9udC1zdHlsZVwiOiBcIm5vcm1hbFwiXG4gIH0sXG4gIFwibm9ybWFsXCI6IHtcbiAgICBcImZvbnQtd2VpZ2h0XCI6IFwibm9ybWFsXCJcbiAgfSxcbiAgXCJiXCI6IHtcbiAgICBcImZvbnQtd2VpZ2h0XCI6IFwiYm9sZFwiXG4gIH0sXG4gIFwiZncxXCI6IHtcbiAgICBcImZvbnQtd2VpZ2h0XCI6IFwiMTAwXCJcbiAgfSxcbiAgXCJmdzJcIjoge1xuICAgIFwiZm9udC13ZWlnaHRcIjogXCIyMDBcIlxuICB9LFxuICBcImZ3M1wiOiB7XG4gICAgXCJmb250LXdlaWdodFwiOiBcIjMwMFwiXG4gIH0sXG4gIFwiZnc0XCI6IHtcbiAgICBcImZvbnQtd2VpZ2h0XCI6IFwiNDAwXCJcbiAgfSxcbiAgXCJmdzVcIjoge1xuICAgIFwiZm9udC13ZWlnaHRcIjogXCI1MDBcIlxuICB9LFxuICBcImZ3NlwiOiB7XG4gICAgXCJmb250LXdlaWdodFwiOiBcIjYwMFwiXG4gIH0sXG4gIFwiZnc3XCI6IHtcbiAgICBcImZvbnQtd2VpZ2h0XCI6IFwiNzAwXCJcbiAgfSxcbiAgXCJmdzhcIjoge1xuICAgIFwiZm9udC13ZWlnaHRcIjogXCI4MDBcIlxuICB9LFxuICBcImZ3OVwiOiB7XG4gICAgXCJmb250LXdlaWdodFwiOiBcIjkwMFwiXG4gIH0sXG4gIFwiaW5wdXRfcmVzZXRcIjoge1xuICAgIFwiLXdlYmtpdC1hcHBlYXJhbmNlXCI6IFwibm9uZVwiLFxuICAgIFwiLW1vei1hcHBlYXJhbmNlXCI6IFwibm9uZVwiXG4gIH0sXG4gIFwiYnV0dG9uX3Jlc2V0X19fbW96X2ZvY3VzX2lubmVyXCI6IHtcbiAgICBcImJvcmRlclwiOiBcIjBcIixcbiAgICBcInBhZGRpbmdcIjogXCIwXCJcbiAgfSxcbiAgXCJpbnB1dF9yZXNldF9fX21vel9mb2N1c19pbm5lclwiOiB7XG4gICAgXCJib3JkZXJcIjogXCIwXCIsXG4gICAgXCJwYWRkaW5nXCI6IFwiMFwiXG4gIH0sXG4gIFwiaF8yNVwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCIyNSVcIlxuICB9LFxuICBcImhfNTBcIjoge1xuICAgIFwiaGVpZ2h0XCI6IFwiNTAlXCJcbiAgfSxcbiAgXCJoXzc1XCI6IHtcbiAgICBcImhlaWdodFwiOiBcIjc1JVwiXG4gIH0sXG4gIFwiaF8xMDBcIjoge1xuICAgIFwiaGVpZ2h0XCI6IFwiMTAwJVwiXG4gIH0sXG4gIFwibWluX2hfMTAwXCI6IHtcbiAgICBcIm1pbi1oZWlnaHRcIjogXCIxMDAlXCJcbiAgfSxcbiAgXCJ2aF8yNVwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCIyNXZoXCJcbiAgfSxcbiAgXCJ2aF81MFwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCI1MHZoXCJcbiAgfSxcbiAgXCJ2aF83NVwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCI3NXZoXCJcbiAgfSxcbiAgXCJ2aF8xMDBcIjoge1xuICAgIFwiaGVpZ2h0XCI6IFwiMTAwdmhcIlxuICB9LFxuICBcIm1pbl92aF8xMDBcIjoge1xuICAgIFwibWluLWhlaWdodFwiOiBcIjEwMHZoXCJcbiAgfSxcbiAgXCJoX2F1dG9cIjoge1xuICAgIFwiaGVpZ2h0XCI6IFwiYXV0b1wiXG4gIH0sXG4gIFwiaF9pbmhlcml0XCI6IHtcbiAgICBcImhlaWdodFwiOiBcImluaGVyaXRcIlxuICB9LFxuICBcImRpbVwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMVwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcIm9wYWNpdHkgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJkaW1fZm9jdXNcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi41XCIsXG4gICAgXCJ0cmFuc2l0aW9uXCI6IFwib3BhY2l0eSAuMTVzIGVhc2UtaW5cIlxuICB9LFxuICBcImRpbV9hY3RpdmVcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi44XCIsXG4gICAgXCJ0cmFuc2l0aW9uXCI6IFwib3BhY2l0eSAuMTVzIGVhc2Utb3V0XCJcbiAgfSxcbiAgXCJoaWRlX2NoaWxkX19jaGlsZFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMFwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcIm9wYWNpdHkgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJoaWRlX2NoaWxkX2hvdmVyX19jaGlsZFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMVwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcIm9wYWNpdHkgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJoaWRlX2NoaWxkX2ZvY3VzX19jaGlsZFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMVwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcIm9wYWNpdHkgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJoaWRlX2NoaWxkX2FjdGl2ZV9fY2hpbGRcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIjFcIixcbiAgICBcInRyYW5zaXRpb25cIjogXCJvcGFjaXR5IC4xNXMgZWFzZS1pblwiXG4gIH0sXG4gIFwidW5kZXJsaW5lX2hvdmVyX2ZvY3VzXCI6IHtcbiAgICBcInRleHQtZGVjb3JhdGlvblwiOiBcInVuZGVybGluZVwiXG4gIH0sXG4gIFwiZ3Jvd1wiOiB7XG4gICAgXCItbW96LW9zeC1mb250LXNtb290aGluZ1wiOiBcImdyYXlzY2FsZVwiLFxuICAgIFwiYmFja2ZhY2UtdmlzaWJpbGl0eVwiOiBcImhpZGRlblwiLFxuICAgIFwidHJhbnNmb3JtXCI6IFwidHJhbnNsYXRlWigwKVwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcInRyYW5zZm9ybSAwLjI1cyBlYXNlLW91dFwiXG4gIH0sXG4gIFwiZ3Jvd19mb2N1c1wiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJzY2FsZSgxLjA1KVwiXG4gIH0sXG4gIFwiZ3Jvd19hY3RpdmVcIjoge1xuICAgIFwidHJhbnNmb3JtXCI6IFwic2NhbGUoLjkwKVwiXG4gIH0sXG4gIFwiZ3Jvd19sYXJnZVwiOiB7XG4gICAgXCItbW96LW9zeC1mb250LXNtb290aGluZ1wiOiBcImdyYXlzY2FsZVwiLFxuICAgIFwiYmFja2ZhY2UtdmlzaWJpbGl0eVwiOiBcImhpZGRlblwiLFxuICAgIFwidHJhbnNmb3JtXCI6IFwidHJhbnNsYXRlWigwKVwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcInRyYW5zZm9ybSAuMjVzIGVhc2UtaW4tb3V0XCJcbiAgfSxcbiAgXCJncm93X2xhcmdlX2ZvY3VzXCI6IHtcbiAgICBcInRyYW5zZm9ybVwiOiBcInNjYWxlKDEuMilcIlxuICB9LFxuICBcImdyb3dfbGFyZ2VfYWN0aXZlXCI6IHtcbiAgICBcInRyYW5zZm9ybVwiOiBcInNjYWxlKC45NSlcIlxuICB9LFxuICBcInNoYWRvd19ob3Zlcl9fYWZ0ZXJcIjoge1xuICAgIFwiYm94LXNoYWRvd1wiOiBcIjBweCAwcHggOHB4IDJweCByZ2JhKCAwLCAwLCAwLCAuMiApXCIsXG4gICAgXCJvcGFjaXR5XCI6IFwiMFwiLFxuICAgIFwidHJhbnNpdGlvblwiOiBcIm9wYWNpdHkgLjI1cyBlYXNlLWluLW91dFwiXG4gIH0sXG4gIFwic2hhZG93X2hvdmVyX2hvdmVyX19hZnRlclwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMVwiXG4gIH0sXG4gIFwic2hhZG93X2hvdmVyX2ZvY3VzX19hZnRlclwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMVwiXG4gIH0sXG4gIFwiYmdfYW5pbWF0ZVwiOiB7XG4gICAgXCJ0cmFuc2l0aW9uXCI6IFwiYmFja2dyb3VuZC1jb2xvciAuMTVzIGVhc2UtaW4tb3V0XCJcbiAgfSxcbiAgXCJiZ19hbmltYXRlX2ZvY3VzXCI6IHtcbiAgICBcInRyYW5zaXRpb25cIjogXCJiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZS1pbi1vdXRcIlxuICB9LFxuICBcImltZ1wiOiB7XG4gICAgXCJtYXgtd2lkdGhcIjogXCIxMDAlXCJcbiAgfSxcbiAgXCJ0cmFja2VkXCI6IHtcbiAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjFlbVwiXG4gIH0sXG4gIFwidHJhY2tlZF90aWdodFwiOiB7XG4gICAgXCJsZXR0ZXItc3BhY2luZ1wiOiBcIi0uMDVlbVwiXG4gIH0sXG4gIFwidHJhY2tlZF9tZWdhXCI6IHtcbiAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjI1ZW1cIlxuICB9LFxuICBcImxoX3NvbGlkXCI6IHtcbiAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMVwiXG4gIH0sXG4gIFwibGhfdGl0bGVcIjoge1xuICAgIFwibGluZS1oZWlnaHRcIjogXCIxLjI1XCJcbiAgfSxcbiAgXCJsaF9jb3B5XCI6IHtcbiAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMS41XCJcbiAgfSxcbiAgXCJsaW5rXCI6IHtcbiAgICBcInRleHQtZGVjb3JhdGlvblwiOiBcIm5vbmVcIixcbiAgICBcInRyYW5zaXRpb25cIjogXCJjb2xvciAuMTVzIGVhc2UtaW5cIlxuICB9LFxuICBcImxpbmtfbGlua1wiOiB7XG4gICAgXCJ0cmFuc2l0aW9uXCI6IFwiY29sb3IgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJsaW5rX3Zpc2l0ZWRcIjoge1xuICAgIFwidHJhbnNpdGlvblwiOiBcImNvbG9yIC4xNXMgZWFzZS1pblwiXG4gIH0sXG4gIFwibGlua19hY3RpdmVcIjoge1xuICAgIFwidHJhbnNpdGlvblwiOiBcImNvbG9yIC4xNXMgZWFzZS1pblwiXG4gIH0sXG4gIFwibGlua19mb2N1c1wiOiB7XG4gICAgXCJ0cmFuc2l0aW9uXCI6IFwiY29sb3IgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJsaXN0XCI6IHtcbiAgICBcImxpc3Qtc3R5bGUtdHlwZVwiOiBcIm5vbmVcIlxuICB9LFxuICBcIm13XzEwMFwiOiB7XG4gICAgXCJtYXgtd2lkdGhcIjogXCIxMDAlXCJcbiAgfSxcbiAgXCJtdzFcIjoge1xuICAgIFwibWF4LXdpZHRoXCI6IFwiMXJlbVwiXG4gIH0sXG4gIFwibXcyXCI6IHtcbiAgICBcIm1heC13aWR0aFwiOiBcIjJyZW1cIlxuICB9LFxuICBcIm13M1wiOiB7XG4gICAgXCJtYXgtd2lkdGhcIjogXCI0cmVtXCJcbiAgfSxcbiAgXCJtdzRcIjoge1xuICAgIFwibWF4LXdpZHRoXCI6IFwiOHJlbVwiXG4gIH0sXG4gIFwibXc1XCI6IHtcbiAgICBcIm1heC13aWR0aFwiOiBcIjE2cmVtXCJcbiAgfSxcbiAgXCJtdzZcIjoge1xuICAgIFwibWF4LXdpZHRoXCI6IFwiMzJyZW1cIlxuICB9LFxuICBcIm13N1wiOiB7XG4gICAgXCJtYXgtd2lkdGhcIjogXCI0OHJlbVwiXG4gIH0sXG4gIFwibXc4XCI6IHtcbiAgICBcIm1heC13aWR0aFwiOiBcIjY0cmVtXCJcbiAgfSxcbiAgXCJtdzlcIjoge1xuICAgIFwibWF4LXdpZHRoXCI6IFwiOTZyZW1cIlxuICB9LFxuICBcIm13X25vbmVcIjoge1xuICAgIFwibWF4LXdpZHRoXCI6IFwibm9uZVwiXG4gIH0sXG4gIFwib18xMDBcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIjFcIlxuICB9LFxuICBcIm9fOTBcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi45XCJcbiAgfSxcbiAgXCJvXzgwXCI6IHtcbiAgICBcIm9wYWNpdHlcIjogXCIuOFwiXG4gIH0sXG4gIFwib183MFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiLjdcIlxuICB9LFxuICBcIm9fNjBcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi42XCJcbiAgfSxcbiAgXCJvXzUwXCI6IHtcbiAgICBcIm9wYWNpdHlcIjogXCIuNVwiXG4gIH0sXG4gIFwib180MFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiLjRcIlxuICB9LFxuICBcIm9fMzBcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi4zXCJcbiAgfSxcbiAgXCJvXzIwXCI6IHtcbiAgICBcIm9wYWNpdHlcIjogXCIuMlwiXG4gIH0sXG4gIFwib18xMFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiLjFcIlxuICB9LFxuICBcIm9fMDVcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi4wNVwiXG4gIH0sXG4gIFwib18wMjVcIjoge1xuICAgIFwib3BhY2l0eVwiOiBcIi4wMjVcIlxuICB9LFxuICBcIm9fMFwiOiB7XG4gICAgXCJvcGFjaXR5XCI6IFwiMFwiXG4gIH0sXG4gIFwib3V0bGluZVwiOiB7XG4gICAgXCJvdXRsaW5lXCI6IFwiMXB4IHNvbGlkXCJcbiAgfSxcbiAgXCJvdXRsaW5lX3RyYW5zcGFyZW50XCI6IHtcbiAgICBcIm91dGxpbmVcIjogXCIxcHggc29saWQgdHJhbnNwYXJlbnRcIlxuICB9LFxuICBcIm91dGxpbmVfMFwiOiB7XG4gICAgXCJvdXRsaW5lXCI6IFwiMFwiXG4gIH0sXG4gIFwib3ZlcmZsb3dfdmlzaWJsZVwiOiB7XG4gICAgXCJvdmVyZmxvd1wiOiBcInZpc2libGVcIlxuICB9LFxuICBcIm92ZXJmbG93X2hpZGRlblwiOiB7XG4gICAgXCJvdmVyZmxvd1wiOiBcImhpZGRlblwiXG4gIH0sXG4gIFwib3ZlcmZsb3dfc2Nyb2xsXCI6IHtcbiAgICBcIm92ZXJmbG93XCI6IFwic2Nyb2xsXCJcbiAgfSxcbiAgXCJvdmVyZmxvd19hdXRvXCI6IHtcbiAgICBcIm92ZXJmbG93XCI6IFwiYXV0b1wiXG4gIH0sXG4gIFwib3ZlcmZsb3dfeF92aXNpYmxlXCI6IHtcbiAgICBcIm92ZXJmbG93LXhcIjogXCJ2aXNpYmxlXCJcbiAgfSxcbiAgXCJvdmVyZmxvd194X2hpZGRlblwiOiB7XG4gICAgXCJvdmVyZmxvdy14XCI6IFwiaGlkZGVuXCJcbiAgfSxcbiAgXCJvdmVyZmxvd194X3Njcm9sbFwiOiB7XG4gICAgXCJvdmVyZmxvdy14XCI6IFwic2Nyb2xsXCJcbiAgfSxcbiAgXCJvdmVyZmxvd194X2F1dG9cIjoge1xuICAgIFwib3ZlcmZsb3cteFwiOiBcImF1dG9cIlxuICB9LFxuICBcIm92ZXJmbG93X3lfdmlzaWJsZVwiOiB7XG4gICAgXCJvdmVyZmxvdy15XCI6IFwidmlzaWJsZVwiXG4gIH0sXG4gIFwib3ZlcmZsb3dfeV9oaWRkZW5cIjoge1xuICAgIFwib3ZlcmZsb3cteVwiOiBcImhpZGRlblwiXG4gIH0sXG4gIFwib3ZlcmZsb3dfeV9zY3JvbGxcIjoge1xuICAgIFwib3ZlcmZsb3cteVwiOiBcInNjcm9sbFwiXG4gIH0sXG4gIFwib3ZlcmZsb3dfeV9hdXRvXCI6IHtcbiAgICBcIm92ZXJmbG93LXlcIjogXCJhdXRvXCJcbiAgfSxcbiAgXCJzdGF0aWNcIjoge1xuICAgIFwicG9zaXRpb25cIjogXCJzdGF0aWNcIlxuICB9LFxuICBcInJlbGF0aXZlXCI6IHtcbiAgICBcInBvc2l0aW9uXCI6IFwicmVsYXRpdmVcIlxuICB9LFxuICBcImFic29sdXRlXCI6IHtcbiAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIlxuICB9LFxuICBcImZpeGVkXCI6IHtcbiAgICBcInBvc2l0aW9uXCI6IFwiZml4ZWRcIlxuICB9LFxuICBcInJvdGF0ZV80NVwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoNDVkZWcpXCJcbiAgfSxcbiAgXCJyb3RhdGVfOTBcIjoge1xuICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDkwZGVnKVwiXG4gIH0sXG4gIFwicm90YXRlXzEzNVwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMTM1ZGVnKVwiXG4gIH0sXG4gIFwicm90YXRlXzE4MFwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMTgwZGVnKVwiXG4gIH0sXG4gIFwicm90YXRlXzIyNVwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMjI1ZGVnKVwiXG4gIH0sXG4gIFwicm90YXRlXzI3MFwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMjcwZGVnKVwiXG4gIH0sXG4gIFwicm90YXRlXzMxNVwiOiB7XG4gICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMzE1ZGVnKVwiXG4gIH0sXG4gIFwiYmxhY2tfOTBcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ibGFjay05MClcIlxuICB9LFxuICBcImJsYWNrXzgwXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tYmxhY2stODApXCJcbiAgfSxcbiAgXCJibGFja183MFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWJsYWNrLTcwKVwiXG4gIH0sXG4gIFwiYmxhY2tfNjBcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ibGFjay02MClcIlxuICB9LFxuICBcImJsYWNrXzUwXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tYmxhY2stNTApXCJcbiAgfSxcbiAgXCJibGFja180MFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWJsYWNrLTQwKVwiXG4gIH0sXG4gIFwiYmxhY2tfMzBcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ibGFjay0zMClcIlxuICB9LFxuICBcImJsYWNrXzIwXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tYmxhY2stMjApXCJcbiAgfSxcbiAgXCJibGFja18xMFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWJsYWNrLTEwKVwiXG4gIH0sXG4gIFwiYmxhY2tfMDVcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ibGFjay0wNSlcIlxuICB9LFxuICBcIndoaXRlXzkwXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2hpdGUtOTApXCJcbiAgfSxcbiAgXCJ3aGl0ZV84MFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdoaXRlLTgwKVwiXG4gIH0sXG4gIFwid2hpdGVfNzBcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS13aGl0ZS03MClcIlxuICB9LFxuICBcIndoaXRlXzYwXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2hpdGUtNjApXCJcbiAgfSxcbiAgXCJ3aGl0ZV81MFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdoaXRlLTUwKVwiXG4gIH0sXG4gIFwid2hpdGVfNDBcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS13aGl0ZS00MClcIlxuICB9LFxuICBcIndoaXRlXzMwXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2hpdGUtMzApXCJcbiAgfSxcbiAgXCJ3aGl0ZV8yMFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdoaXRlLTIwKVwiXG4gIH0sXG4gIFwid2hpdGVfMTBcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS13aGl0ZS0xMClcIlxuICB9LFxuICBcImJsYWNrXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tYmxhY2spXCJcbiAgfSxcbiAgXCJuZWFyX2JsYWNrXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbmVhci1ibGFjaylcIlxuICB9LFxuICBcImRhcmtfZ3JheVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWRhcmstZ3JheSlcIlxuICB9LFxuICBcIm1pZF9ncmF5XCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbWlkLWdyYXkpXCJcbiAgfSxcbiAgXCJncmF5XCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tZ3JheSlcIlxuICB9LFxuICBcInNpbHZlclwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXNpbHZlcilcIlxuICB9LFxuICBcImxpZ2h0X3NpbHZlclwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LXNpbHZlcilcIlxuICB9LFxuICBcIm1vb25fZ3JheVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLW1vb24tZ3JheSlcIlxuICB9LFxuICBcImxpZ2h0X2dyYXlcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC1ncmF5KVwiXG4gIH0sXG4gIFwibmVhcl93aGl0ZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLW5lYXItd2hpdGUpXCJcbiAgfSxcbiAgXCJ3aGl0ZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdoaXRlKVwiXG4gIH0sXG4gIFwiZGFya19yZWRcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLXJlZClcIlxuICB9LFxuICBcInJlZFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXJlZClcIlxuICB9LFxuICBcImxpZ2h0X3JlZFwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LXJlZClcIlxuICB9LFxuICBcIm9yYW5nZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLW9yYW5nZSlcIlxuICB9LFxuICBcImdvbGRcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1nb2xkKVwiXG4gIH0sXG4gIFwieWVsbG93XCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0teWVsbG93KVwiXG4gIH0sXG4gIFwibGlnaHRfeWVsbG93XCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQteWVsbG93KVwiXG4gIH0sXG4gIFwicHVycGxlXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tcHVycGxlKVwiXG4gIH0sXG4gIFwibGlnaHRfcHVycGxlXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcHVycGxlKVwiXG4gIH0sXG4gIFwiZGFya19waW5rXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tZGFyay1waW5rKVwiXG4gIH0sXG4gIFwiaG90X3BpbmtcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ob3QtcGluaylcIlxuICB9LFxuICBcInBpbmtcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1waW5rKVwiXG4gIH0sXG4gIFwibGlnaHRfcGlua1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LXBpbmspXCJcbiAgfSxcbiAgXCJkYXJrX2dyZWVuXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tZGFyay1ncmVlbilcIlxuICB9LFxuICBcImdyZWVuXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tZ3JlZW4pXCJcbiAgfSxcbiAgXCJsaWdodF9ncmVlblwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LWdyZWVuKVwiXG4gIH0sXG4gIFwibmF2eVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLW5hdnkpXCJcbiAgfSxcbiAgXCJkYXJrX2JsdWVcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLWJsdWUpXCJcbiAgfSxcbiAgXCJibHVlXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tYmx1ZSlcIlxuICB9LFxuICBcImxpZ2h0X2JsdWVcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC1ibHVlKVwiXG4gIH0sXG4gIFwibGlnaHRlc3RfYmx1ZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0ZXN0LWJsdWUpXCJcbiAgfSxcbiAgXCJ3YXNoZWRfYmx1ZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdhc2hlZC1ibHVlKVwiXG4gIH0sXG4gIFwid2FzaGVkX2dyZWVuXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2FzaGVkLWdyZWVuKVwiXG4gIH0sXG4gIFwid2FzaGVkX3llbGxvd1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdhc2hlZC15ZWxsb3cpXCJcbiAgfSxcbiAgXCJ3YXNoZWRfcmVkXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2FzaGVkLXJlZClcIlxuICB9LFxuICBcImJnX2JsYWNrXzkwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay05MClcIlxuICB9LFxuICBcImJnX2JsYWNrXzgwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay04MClcIlxuICB9LFxuICBcImJnX2JsYWNrXzcwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay03MClcIlxuICB9LFxuICBcImJnX2JsYWNrXzYwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay02MClcIlxuICB9LFxuICBcImJnX2JsYWNrXzUwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay01MClcIlxuICB9LFxuICBcImJnX2JsYWNrXzQwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay00MClcIlxuICB9LFxuICBcImJnX2JsYWNrXzMwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay0zMClcIlxuICB9LFxuICBcImJnX2JsYWNrXzIwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay0yMClcIlxuICB9LFxuICBcImJnX2JsYWNrXzEwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay0xMClcIlxuICB9LFxuICBcImJnX2JsYWNrXzA1XCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjay0wNSlcIlxuICB9LFxuICBcImJnX3doaXRlXzkwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS05MClcIlxuICB9LFxuICBcImJnX3doaXRlXzgwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS04MClcIlxuICB9LFxuICBcImJnX3doaXRlXzcwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS03MClcIlxuICB9LFxuICBcImJnX3doaXRlXzYwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS02MClcIlxuICB9LFxuICBcImJnX3doaXRlXzUwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS01MClcIlxuICB9LFxuICBcImJnX3doaXRlXzQwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS00MClcIlxuICB9LFxuICBcImJnX3doaXRlXzMwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS0zMClcIlxuICB9LFxuICBcImJnX3doaXRlXzIwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS0yMClcIlxuICB9LFxuICBcImJnX3doaXRlXzEwXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZS0xMClcIlxuICB9LFxuICBcImJnX2JsYWNrXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjaylcIlxuICB9LFxuICBcImJnX25lYXJfYmxhY2tcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLW5lYXItYmxhY2spXCJcbiAgfSxcbiAgXCJiZ19kYXJrX2dyYXlcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWRhcmstZ3JheSlcIlxuICB9LFxuICBcImJnX21pZF9ncmF5XCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1taWQtZ3JheSlcIlxuICB9LFxuICBcImJnX2dyYXlcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWdyYXkpXCJcbiAgfSxcbiAgXCJiZ19zaWx2ZXJcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXNpbHZlcilcIlxuICB9LFxuICBcImJnX2xpZ2h0X3NpbHZlclwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtc2lsdmVyKVwiXG4gIH0sXG4gIFwiYmdfbW9vbl9ncmF5XCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1tb29uLWdyYXkpXCJcbiAgfSxcbiAgXCJiZ19saWdodF9ncmF5XCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1saWdodC1ncmF5KVwiXG4gIH0sXG4gIFwiYmdfbmVhcl93aGl0ZVwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbmVhci13aGl0ZSlcIlxuICB9LFxuICBcImJnX3doaXRlXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13aGl0ZSlcIlxuICB9LFxuICBcImJnX3RyYW5zcGFyZW50XCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS10cmFuc3BhcmVudClcIlxuICB9LFxuICBcImJnX2RhcmtfcmVkXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1kYXJrLXJlZClcIlxuICB9LFxuICBcImJnX3JlZFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tcmVkKVwiXG4gIH0sXG4gIFwiYmdfbGlnaHRfcmVkXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1saWdodC1yZWQpXCJcbiAgfSxcbiAgXCJiZ19vcmFuZ2VcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLW9yYW5nZSlcIlxuICB9LFxuICBcImJnX2dvbGRcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWdvbGQpXCJcbiAgfSxcbiAgXCJiZ195ZWxsb3dcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXllbGxvdylcIlxuICB9LFxuICBcImJnX2xpZ2h0X3llbGxvd1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQteWVsbG93KVwiXG4gIH0sXG4gIFwiYmdfcHVycGxlXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1wdXJwbGUpXCJcbiAgfSxcbiAgXCJiZ19saWdodF9wdXJwbGVcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LXB1cnBsZSlcIlxuICB9LFxuICBcImJnX2RhcmtfcGlua1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tZGFyay1waW5rKVwiXG4gIH0sXG4gIFwiYmdfaG90X3BpbmtcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWhvdC1waW5rKVwiXG4gIH0sXG4gIFwiYmdfcGlua1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tcGluaylcIlxuICB9LFxuICBcImJnX2xpZ2h0X3BpbmtcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LXBpbmspXCJcbiAgfSxcbiAgXCJiZ19kYXJrX2dyZWVuXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1kYXJrLWdyZWVuKVwiXG4gIH0sXG4gIFwiYmdfZ3JlZW5cIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWdyZWVuKVwiXG4gIH0sXG4gIFwiYmdfbGlnaHRfZ3JlZW5cIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LWdyZWVuKVwiXG4gIH0sXG4gIFwiYmdfbmF2eVwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbmF2eSlcIlxuICB9LFxuICBcImJnX2RhcmtfYmx1ZVwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tZGFyay1ibHVlKVwiXG4gIH0sXG4gIFwiYmdfYmx1ZVwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tYmx1ZSlcIlxuICB9LFxuICBcImJnX2xpZ2h0X2JsdWVcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LWJsdWUpXCJcbiAgfSxcbiAgXCJiZ19saWdodGVzdF9ibHVlXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1saWdodGVzdC1ibHVlKVwiXG4gIH0sXG4gIFwiYmdfd2FzaGVkX2JsdWVcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXdhc2hlZC1ibHVlKVwiXG4gIH0sXG4gIFwiYmdfd2FzaGVkX2dyZWVuXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtZ3JlZW4pXCJcbiAgfSxcbiAgXCJiZ193YXNoZWRfeWVsbG93XCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13YXNoZWQteWVsbG93KVwiXG4gIH0sXG4gIFwiYmdfd2FzaGVkX3JlZFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0td2FzaGVkLXJlZClcIlxuICB9LFxuICBcImhvdmVyX2JsYWNrX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tYmxhY2spXCJcbiAgfSxcbiAgXCJob3Zlcl9uZWFyX2JsYWNrX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbmVhci1ibGFjaylcIlxuICB9LFxuICBcImhvdmVyX2RhcmtfZ3JheV9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWRhcmstZ3JheSlcIlxuICB9LFxuICBcImhvdmVyX21pZF9ncmF5X2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbWlkLWdyYXkpXCJcbiAgfSxcbiAgXCJob3Zlcl9ncmF5X2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tZ3JheSlcIlxuICB9LFxuICBcImhvdmVyX3NpbHZlcl9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXNpbHZlcilcIlxuICB9LFxuICBcImhvdmVyX2xpZ2h0X3NpbHZlcl9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LXNpbHZlcilcIlxuICB9LFxuICBcImhvdmVyX21vb25fZ3JheV9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLW1vb24tZ3JheSlcIlxuICB9LFxuICBcImhvdmVyX2xpZ2h0X2dyYXlfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC1ncmF5KVwiXG4gIH0sXG4gIFwiaG92ZXJfbmVhcl93aGl0ZV9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLW5lYXItd2hpdGUpXCJcbiAgfSxcbiAgXCJob3Zlcl93aGl0ZV9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXdoaXRlKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfYmxhY2tfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWJsYWNrKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfbmVhcl9ibGFja19mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbmVhci1ibGFjaylcIlxuICB9LFxuICBcImhvdmVyX2JnX2RhcmtfZ3JheV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbWlkLWdyYXkpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19ncmF5X2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ncmF5KVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfc2lsdmVyX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1zaWx2ZXIpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19saWdodF9zaWx2ZXJfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LXNpbHZlcilcIlxuICB9LFxuICBcImhvdmVyX2JnX21vb25fZ3JheV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbW9vbi1ncmF5KVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfZ3JheV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JheSlcIlxuICB9LFxuICBcImhvdmVyX2JnX25lYXJfd2hpdGVfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLW5lYXItd2hpdGUpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ193aGl0ZV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0td2hpdGUpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ190cmFuc3BhcmVudF9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tdHJhbnNwYXJlbnQpXCJcbiAgfSxcbiAgXCJob3Zlcl9kYXJrX3JlZF9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWRhcmstcmVkKVwiXG4gIH0sXG4gIFwiaG92ZXJfcmVkX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tcmVkKVwiXG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRfcmVkX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcmVkKVwiXG4gIH0sXG4gIFwiaG92ZXJfb3JhbmdlX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tb3JhbmdlKVwiXG4gIH0sXG4gIFwiaG92ZXJfZ29sZF9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWdvbGQpXCJcbiAgfSxcbiAgXCJob3Zlcl95ZWxsb3dfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS15ZWxsb3cpXCJcbiAgfSxcbiAgXCJob3Zlcl9saWdodF95ZWxsb3dfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC15ZWxsb3cpXCJcbiAgfSxcbiAgXCJob3Zlcl9wdXJwbGVfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1wdXJwbGUpXCJcbiAgfSxcbiAgXCJob3Zlcl9saWdodF9wdXJwbGVfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC1wdXJwbGUpXCJcbiAgfSxcbiAgXCJob3Zlcl9kYXJrX3BpbmtfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLXBpbmspXCJcbiAgfSxcbiAgXCJob3Zlcl9ob3RfcGlua19mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWhvdC1waW5rKVwiXG4gIH0sXG4gIFwiaG92ZXJfcGlua19mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLXBpbmspXCJcbiAgfSxcbiAgXCJob3Zlcl9saWdodF9waW5rX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcGluaylcIlxuICB9LFxuICBcImhvdmVyX2RhcmtfZ3JlZW5fZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLWdyZWVuKVwiXG4gIH0sXG4gIFwiaG92ZXJfZ3JlZW5fZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ncmVlbilcIlxuICB9LFxuICBcImhvdmVyX2xpZ2h0X2dyZWVuX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JlZW4pXCJcbiAgfSxcbiAgXCJob3Zlcl9uYXZ5X2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbmF2eSlcIlxuICB9LFxuICBcImhvdmVyX2RhcmtfYmx1ZV9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWRhcmstYmx1ZSlcIlxuICB9LFxuICBcImhvdmVyX2JsdWVfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ibHVlKVwiXG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRfYmx1ZV9mb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LWJsdWUpXCJcbiAgfSxcbiAgXCJob3Zlcl9saWdodGVzdF9ibHVlX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHRlc3QtYmx1ZSlcIlxuICB9LFxuICBcImhvdmVyX3dhc2hlZF9ibHVlX2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2FzaGVkLWJsdWUpXCJcbiAgfSxcbiAgXCJob3Zlcl93YXNoZWRfZ3JlZW5fZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtZ3JlZW4pXCJcbiAgfSxcbiAgXCJob3Zlcl93YXNoZWRfeWVsbG93X2ZvY3VzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwidmFyKC0td2FzaGVkLXllbGxvdylcIlxuICB9LFxuICBcImhvdmVyX3dhc2hlZF9yZWRfZm9jdXNcIjoge1xuICAgIFwiY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtcmVkKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfZGFya19yZWRfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWRhcmstcmVkKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfcmVkX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1yZWQpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19saWdodF9yZWRfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LXJlZClcIlxuICB9LFxuICBcImhvdmVyX2JnX29yYW5nZV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tb3JhbmdlKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfZ29sZF9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tZ29sZClcIlxuICB9LFxuICBcImhvdmVyX2JnX3llbGxvd19mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0teWVsbG93KVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfeWVsbG93X2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1saWdodC15ZWxsb3cpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19wdXJwbGVfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXB1cnBsZSlcIlxuICB9LFxuICBcImhvdmVyX2JnX2xpZ2h0X3B1cnBsZV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcHVycGxlKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfZGFya19waW5rX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1kYXJrLXBpbmspXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19ob3RfcGlua19mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0taG90LXBpbmspXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19waW5rX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1waW5rKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfcGlua19mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcGluaylcIlxuICB9LFxuICBcImhvdmVyX2JnX2RhcmtfZ3JlZW5fZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWRhcmstZ3JlZW4pXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19ncmVlbl9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tZ3JlZW4pXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19saWdodF9ncmVlbl9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JlZW4pXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19uYXZ5X2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1uYXZ5KVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfZGFya19ibHVlX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1kYXJrLWJsdWUpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ19ibHVlX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibHVlKVwiXG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfYmx1ZV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtYmx1ZSlcIlxuICB9LFxuICBcImhvdmVyX2JnX2xpZ2h0ZXN0X2JsdWVfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0ZXN0LWJsdWUpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ193YXNoZWRfYmx1ZV9mb2N1c1wiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0td2FzaGVkLWJsdWUpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ193YXNoZWRfZ3JlZW5fZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXdhc2hlZC1ncmVlbilcIlxuICB9LFxuICBcImhvdmVyX2JnX3dhc2hlZF95ZWxsb3dfZm9jdXNcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXdhc2hlZC15ZWxsb3cpXCJcbiAgfSxcbiAgXCJob3Zlcl9iZ193YXNoZWRfcmVkX2ZvY3VzXCI6IHtcbiAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtcmVkKVwiXG4gIH0sXG4gIFwicGEwXCI6IHtcbiAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgfSxcbiAgXCJwYTFcIjoge1xuICAgIFwicGFkZGluZ1wiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgfSxcbiAgXCJwYTJcIjoge1xuICAgIFwicGFkZGluZ1wiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJwYTNcIjoge1xuICAgIFwicGFkZGluZ1wiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gIH0sXG4gIFwicGE0XCI6IHtcbiAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gIH0sXG4gIFwicGE1XCI6IHtcbiAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicGE2XCI6IHtcbiAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicGE3XCI6IHtcbiAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicGwwXCI6IHtcbiAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcInBsMVwiOiB7XG4gICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwicGwyXCI6IHtcbiAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJwbDNcIjoge1xuICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgfSxcbiAgXCJwbDRcIjoge1xuICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcInBsNVwiOiB7XG4gICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicGw2XCI6IHtcbiAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJwbDdcIjoge1xuICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInByMFwiOiB7XG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gIH0sXG4gIFwicHIxXCI6IHtcbiAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwicHIyXCI6IHtcbiAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwicHIzXCI6IHtcbiAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICB9LFxuICBcInByNFwiOiB7XG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcInByNVwiOiB7XG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInByNlwiOiB7XG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInByN1wiOiB7XG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInBiMFwiOiB7XG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcInBiMVwiOiB7XG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgfSxcbiAgXCJwYjJcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwicGIzXCI6IHtcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgfSxcbiAgXCJwYjRcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gIH0sXG4gIFwicGI1XCI6IHtcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInBiNlwiOiB7XG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJwYjdcIjoge1xuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicHQwXCI6IHtcbiAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gIH0sXG4gIFwicHQxXCI6IHtcbiAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICB9LFxuICBcInB0MlwiOiB7XG4gICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJwdDNcIjoge1xuICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICB9LFxuICBcInB0NFwiOiB7XG4gICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgfSxcbiAgXCJwdDVcIjoge1xuICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicHQ2XCI6IHtcbiAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInB0N1wiOiB7XG4gICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJwdjBcIjoge1xuICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCIsXG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcInB2MVwiOiB7XG4gICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCIsXG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgfSxcbiAgXCJwdjJcIjoge1xuICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiLFxuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwicHYzXCI6IHtcbiAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCIsXG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gIH0sXG4gIFwicHY0XCI6IHtcbiAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIixcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcInB2NVwiOiB7XG4gICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCIsXG4gICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJwdjZcIjoge1xuICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwicHY3XCI6IHtcbiAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInBoMFwiOiB7XG4gICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCIsXG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gIH0sXG4gIFwicGgxXCI6IHtcbiAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCIsXG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICB9LFxuICBcInBoMlwiOiB7XG4gICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiLFxuICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJwaDNcIjoge1xuICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCIsXG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgfSxcbiAgXCJwaDRcIjoge1xuICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIixcbiAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gIH0sXG4gIFwicGg1XCI6IHtcbiAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCIsXG4gICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcInBoNlwiOiB7XG4gICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJwaDdcIjoge1xuICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwibWEwXCI6IHtcbiAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcIm1hMVwiOiB7XG4gICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwibWEyXCI6IHtcbiAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJtYTNcIjoge1xuICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgfSxcbiAgXCJtYTRcIjoge1xuICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcIm1hNVwiOiB7XG4gICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwibWE2XCI6IHtcbiAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJtYTdcIjoge1xuICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm1sMFwiOiB7XG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcIm1sMVwiOiB7XG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgfSxcbiAgXCJtbDJcIjoge1xuICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwibWwzXCI6IHtcbiAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgfSxcbiAgXCJtbDRcIjoge1xuICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gIH0sXG4gIFwibWw1XCI6IHtcbiAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm1sNlwiOiB7XG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJtbDdcIjoge1xuICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwibXIwXCI6IHtcbiAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcIm1yMVwiOiB7XG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwibXIyXCI6IHtcbiAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJtcjNcIjoge1xuICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgfSxcbiAgXCJtcjRcIjoge1xuICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcIm1yNVwiOiB7XG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwibXI2XCI6IHtcbiAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJtcjdcIjoge1xuICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm1iMFwiOiB7XG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gIH0sXG4gIFwibWIxXCI6IHtcbiAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwibWIyXCI6IHtcbiAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwibWIzXCI6IHtcbiAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICB9LFxuICBcIm1iNFwiOiB7XG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcIm1iNVwiOiB7XG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm1iNlwiOiB7XG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm1iN1wiOiB7XG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm10MFwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gIH0sXG4gIFwibXQxXCI6IHtcbiAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwibXQyXCI6IHtcbiAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwibXQzXCI6IHtcbiAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICB9LFxuICBcIm10NFwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICB9LFxuICBcIm10NVwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm10NlwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm10N1wiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm12MFwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICB9LFxuICBcIm12MVwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIixcbiAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gIH0sXG4gIFwibXYyXCI6IHtcbiAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiLFxuICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgfSxcbiAgXCJtdjNcIjoge1xuICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gIH0sXG4gIFwibXY0XCI6IHtcbiAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiLFxuICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgfSxcbiAgXCJtdjVcIjoge1xuICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCIsXG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm12NlwiOiB7XG4gICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwibXY3XCI6IHtcbiAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJtaDBcIjoge1xuICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCIsXG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgfSxcbiAgXCJtaDFcIjoge1xuICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICB9LFxuICBcIm1oMlwiOiB7XG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCIsXG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gIH0sXG4gIFwibWgzXCI6IHtcbiAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCIsXG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICB9LFxuICBcIm1oNFwiOiB7XG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gIH0sXG4gIFwibWg1XCI6IHtcbiAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIixcbiAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgfSxcbiAgXCJtaDZcIjoge1xuICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICB9LFxuICBcIm1oN1wiOiB7XG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gIH0sXG4gIFwiY29sbGFwc2VcIjoge1xuICAgIFwiYm9yZGVyLWNvbGxhcHNlXCI6IFwiY29sbGFwc2VcIixcbiAgICBcImJvcmRlci1zcGFjaW5nXCI6IFwiMFwiXG4gIH0sXG4gIFwic3RyaXBlZF9fbW9vbl9ncmF5X250aF9jaGlsZF9vZGRcIjoge1xuICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLW1vb24tZ3JheSlcIlxuICB9LFxuICBcInN0cmlwZWRfX2xpZ2h0X2dyYXlfbnRoX2NoaWxkX29kZFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JheSlcIlxuICB9LFxuICBcInN0cmlwZWRfX25lYXJfd2hpdGVfbnRoX2NoaWxkX29kZFwiOiB7XG4gICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbmVhci13aGl0ZSlcIlxuICB9LFxuICBcInRsXCI6IHtcbiAgICBcInRleHQtYWxpZ25cIjogXCJsZWZ0XCJcbiAgfSxcbiAgXCJ0clwiOiB7XG4gICAgXCJ0ZXh0LWFsaWduXCI6IFwicmlnaHRcIlxuICB9LFxuICBcInRjXCI6IHtcbiAgICBcInRleHQtYWxpZ25cIjogXCJjZW50ZXJcIlxuICB9LFxuICBcInN0cmlrZVwiOiB7XG4gICAgXCJ0ZXh0LWRlY29yYXRpb25cIjogXCJsaW5lLXRocm91Z2hcIlxuICB9LFxuICBcInVuZGVybGluZVwiOiB7XG4gICAgXCJ0ZXh0LWRlY29yYXRpb25cIjogXCJ1bmRlcmxpbmVcIlxuICB9LFxuICBcIm5vX3VuZGVybGluZVwiOiB7XG4gICAgXCJ0ZXh0LWRlY29yYXRpb25cIjogXCJub25lXCJcbiAgfSxcbiAgXCJ0dGNcIjoge1xuICAgIFwidGV4dC10cmFuc2Zvcm1cIjogXCJjYXBpdGFsaXplXCJcbiAgfSxcbiAgXCJ0dGxcIjoge1xuICAgIFwidGV4dC10cmFuc2Zvcm1cIjogXCJsb3dlcmNhc2VcIlxuICB9LFxuICBcInR0dVwiOiB7XG4gICAgXCJ0ZXh0LXRyYW5zZm9ybVwiOiBcInVwcGVyY2FzZVwiXG4gIH0sXG4gIFwidHRuXCI6IHtcbiAgICBcInRleHQtdHJhbnNmb3JtXCI6IFwibm9uZVwiXG4gIH0sXG4gIFwiZl82XCI6IHtcbiAgICBcImZvbnQtc2l6ZVwiOiBcIjZyZW1cIlxuICB9LFxuICBcImZfaGVhZGxpbmVcIjoge1xuICAgIFwiZm9udC1zaXplXCI6IFwiNnJlbVwiXG4gIH0sXG4gIFwiZl81XCI6IHtcbiAgICBcImZvbnQtc2l6ZVwiOiBcIjVyZW1cIlxuICB9LFxuICBcImZfc3ViaGVhZGxpbmVcIjoge1xuICAgIFwiZm9udC1zaXplXCI6IFwiNXJlbVwiXG4gIH0sXG4gIFwiZjFcIjoge1xuICAgIFwiZm9udC1zaXplXCI6IFwiM3JlbVwiXG4gIH0sXG4gIFwiZjJcIjoge1xuICAgIFwiZm9udC1zaXplXCI6IFwiMi4yNXJlbVwiXG4gIH0sXG4gIFwiZjNcIjoge1xuICAgIFwiZm9udC1zaXplXCI6IFwiMS41cmVtXCJcbiAgfSxcbiAgXCJmNFwiOiB7XG4gICAgXCJmb250LXNpemVcIjogXCIxLjI1cmVtXCJcbiAgfSxcbiAgXCJmNVwiOiB7XG4gICAgXCJmb250LXNpemVcIjogXCIxcmVtXCJcbiAgfSxcbiAgXCJmNlwiOiB7XG4gICAgXCJmb250LXNpemVcIjogXCIuODc1cmVtXCJcbiAgfSxcbiAgXCJtZWFzdXJlXCI6IHtcbiAgICBcIm1heC13aWR0aFwiOiBcIjMwZW1cIlxuICB9LFxuICBcIm1lYXN1cmVfd2lkZVwiOiB7XG4gICAgXCJtYXgtd2lkdGhcIjogXCIzNGVtXCJcbiAgfSxcbiAgXCJtZWFzdXJlX25hcnJvd1wiOiB7XG4gICAgXCJtYXgtd2lkdGhcIjogXCIyMGVtXCJcbiAgfSxcbiAgXCJpbmRlbnRcIjoge1xuICAgIFwidGV4dC1pbmRlbnRcIjogXCIxZW1cIixcbiAgICBcIm1hcmdpbi10b3BcIjogXCIwXCIsXG4gICAgXCJtYXJnaW4tYm90dG9tXCI6IFwiMFwiXG4gIH0sXG4gIFwic21hbGxfY2Fwc1wiOiB7XG4gICAgXCJmb250LXZhcmlhbnRcIjogXCJzbWFsbC1jYXBzXCJcbiAgfSxcbiAgXCJ0cnVuY2F0ZVwiOiB7XG4gICAgXCJ3aGl0ZS1zcGFjZVwiOiBcIm5vd3JhcFwiLFxuICAgIFwib3ZlcmZsb3dcIjogXCJoaWRkZW5cIixcbiAgICBcInRleHQtb3ZlcmZsb3dcIjogXCJlbGxpcHNpc1wiXG4gIH0sXG4gIFwib3ZlcmZsb3dfY29udGFpbmVyXCI6IHtcbiAgICBcIm92ZXJmbG93LXlcIjogXCJzY3JvbGxcIlxuICB9LFxuICBcImNlbnRlclwiOiB7XG4gICAgXCJtYXJnaW4tcmlnaHRcIjogXCJhdXRvXCIsXG4gICAgXCJtYXJnaW4tbGVmdFwiOiBcImF1dG9cIlxuICB9LFxuICBcInZfYmFzZVwiOiB7XG4gICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcImJhc2VsaW5lXCJcbiAgfSxcbiAgXCJ2X21pZFwiOiB7XG4gICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcIm1pZGRsZVwiXG4gIH0sXG4gIFwidl90b3BcIjoge1xuICAgIFwidmVydGljYWwtYWxpZ25cIjogXCJ0b3BcIlxuICB9LFxuICBcInZfYnRtXCI6IHtcbiAgICBcInZlcnRpY2FsLWFsaWduXCI6IFwiYm90dG9tXCJcbiAgfSxcbiAgXCJjbGlwXCI6IHtcbiAgICBcInBvc2l0aW9uXCI6IFwiZml4ZWQgIWltcG9ydGFudFwiLFxuICAgIFwiX3Bvc2l0aW9uXCI6IFwiYWJzb2x1dGUgIWltcG9ydGFudFwiLFxuICAgIFwiY2xpcFwiOiBcInJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KVwiXG4gIH0sXG4gIFwid3Nfbm9ybWFsXCI6IHtcbiAgICBcIndoaXRlLXNwYWNlXCI6IFwibm9ybWFsXCJcbiAgfSxcbiAgXCJub3dyYXBcIjoge1xuICAgIFwid2hpdGUtc3BhY2VcIjogXCJub3dyYXBcIlxuICB9LFxuICBcIncxXCI6IHtcbiAgICBcIndpZHRoXCI6IFwiMXJlbVwiXG4gIH0sXG4gIFwidzJcIjoge1xuICAgIFwid2lkdGhcIjogXCIycmVtXCJcbiAgfSxcbiAgXCJ3M1wiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjRyZW1cIlxuICB9LFxuICBcInc0XCI6IHtcbiAgICBcIndpZHRoXCI6IFwiOHJlbVwiXG4gIH0sXG4gIFwidzVcIjoge1xuICAgIFwid2lkdGhcIjogXCIxNnJlbVwiXG4gIH0sXG4gIFwid18xMFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjEwJVwiXG4gIH0sXG4gIFwid18yMFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjIwJVwiXG4gIH0sXG4gIFwid18yNVwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjI1JVwiXG4gIH0sXG4gIFwid18zMFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjMwJVwiXG4gIH0sXG4gIFwid18zM1wiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjMzJVwiXG4gIH0sXG4gIFwid18zNFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjM0JVwiXG4gIH0sXG4gIFwid180MFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjQwJVwiXG4gIH0sXG4gIFwid181MFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjUwJVwiXG4gIH0sXG4gIFwid182MFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjYwJVwiXG4gIH0sXG4gIFwid183MFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjcwJVwiXG4gIH0sXG4gIFwid183NVwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjc1JVwiXG4gIH0sXG4gIFwid184MFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjgwJVwiXG4gIH0sXG4gIFwid185MFwiOiB7XG4gICAgXCJ3aWR0aFwiOiBcIjkwJVwiXG4gIH0sXG4gIFwid18xMDBcIjoge1xuICAgIFwid2lkdGhcIjogXCIxMDAlXCJcbiAgfSxcbiAgXCJ3X3RoaXJkXCI6IHtcbiAgICBcIndpZHRoXCI6IFwiY2FsYygxMDAlIC8gMylcIlxuICB9LFxuICBcIndfdHdvX3RoaXJkc1wiOiB7XG4gICAgXCJ3aWR0aFwiOiBcImNhbGMoMTAwJSAvIDEuNSlcIlxuICB9LFxuICBcIndfYXV0b1wiOiB7XG4gICAgXCJ3aWR0aFwiOiBcImF1dG9cIlxuICB9LFxuICBcInpfMFwiOiB7XG4gICAgXCJ6LWluZGV4XCI6IFwiMFwiXG4gIH0sXG4gIFwiel8xXCI6IHtcbiAgICBcInotaW5kZXhcIjogXCIxXCJcbiAgfSxcbiAgXCJ6XzJcIjoge1xuICAgIFwiei1pbmRleFwiOiBcIjJcIlxuICB9LFxuICBcInpfM1wiOiB7XG4gICAgXCJ6LWluZGV4XCI6IFwiM1wiXG4gIH0sXG4gIFwiel80XCI6IHtcbiAgICBcInotaW5kZXhcIjogXCI0XCJcbiAgfSxcbiAgXCJ6XzVcIjoge1xuICAgIFwiei1pbmRleFwiOiBcIjVcIlxuICB9LFxuICBcInpfOTk5XCI6IHtcbiAgICBcInotaW5kZXhcIjogXCI5OTlcIlxuICB9LFxuICBcInpfOTk5OVwiOiB7XG4gICAgXCJ6LWluZGV4XCI6IFwiOTk5OVwiXG4gIH0sXG4gIFwiel9tYXhcIjoge1xuICAgIFwiei1pbmRleFwiOiBcIjIxNDc0ODM2NDdcIlxuICB9LFxuICBcInpfaW5oZXJpdFwiOiB7XG4gICAgXCJ6LWluZGV4XCI6IFwiaW5oZXJpdFwiXG4gIH0sXG4gIFwiel9pbml0aWFsXCI6IHtcbiAgICBcInotaW5kZXhcIjogXCJpbml0aWFsXCJcbiAgfSxcbiAgXCJ6X3Vuc2V0XCI6IHtcbiAgICBcInotaW5kZXhcIjogXCJ1bnNldFwiXG4gIH0sXG4gIFwiX19leHByZXNzaW9uX19cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjogXCIoLS1icmVha3BvaW50LWxhcmdlKVwiXG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMFwiLFxuICAgICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18xNng5X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCI1Ni4yNSVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzl4MTZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjE3Ny43NyVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzR4M19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNzUlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18zeDRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjEzMy4zMyVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzZ4NF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNjYuNiVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzR4Nl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTUwJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fOHg1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCI2Mi41JVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fNXg4X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxNjAlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX183eDVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjcxLjQyJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fNXg3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxNDAlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18xeDFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fX29iamVjdF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcbiAgICAgIFwidG9wXCI6IFwiMFwiLFxuICAgICAgXCJyaWdodFwiOiBcIjBcIixcbiAgICAgIFwiYm90dG9tXCI6IFwiMFwiLFxuICAgICAgXCJsZWZ0XCI6IFwiMFwiLFxuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIixcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMTAwJVwiLFxuICAgICAgXCJ6LWluZGV4XCI6IFwiMTAwXCJcbiAgICB9XG4gIH0sXG4gIFwiYmdfY2VudGVyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcImNlbnRlciBjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJiZ190b3BfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwidG9wIGNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcImJnX3JpZ2h0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcImNlbnRlciByaWdodFwiXG4gICAgfVxuICB9LFxuICBcImJnX2JvdHRvbV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJhY2tncm91bmQtcmVwZWF0XCI6IFwibm8tcmVwZWF0XCIsXG4gICAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogXCJib3R0b20gY2VudGVyXCJcbiAgICB9XG4gIH0sXG4gIFwiYmdfbGVmdF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJhY2tncm91bmQtcmVwZWF0XCI6IFwibm8tcmVwZWF0XCIsXG4gICAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogXCJjZW50ZXIgbGVmdFwiXG4gICAgfVxuICB9LFxuICBcImNvdmVyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1zaXplXCI6IFwiY292ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250YWluX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1zaXplXCI6IFwiY29udGFpblwiXG4gICAgfVxuICB9LFxuICBcImJyMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYnIxX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIi4xMjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJicjJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmFkaXVzXCI6IFwiLjI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnIzX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIi41cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnI0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJicl8xMDBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmFkaXVzXCI6IFwiMTAwJVwiXG4gICAgfVxuICB9LFxuICBcImJyX3BpbGxfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmFkaXVzXCI6IFwiOTk5OXB4XCJcbiAgICB9XG4gIH0sXG4gIFwiYnJfX2JvdHRvbV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci10b3AtbGVmdC1yYWRpdXNcIjogXCIwXCIsXG4gICAgICBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyX190b3BfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCI6IFwiMFwiLFxuICAgICAgXCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1c1wiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJicl9fcmlnaHRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItdG9wLWxlZnQtcmFkaXVzXCI6IFwiMFwiLFxuICAgICAgXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyX19sZWZ0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXNcIjogXCIwXCIsXG4gICAgICBcImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJfX2RvdHRlZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcImRvdHRlZFwiXG4gICAgfVxuICB9LFxuICBcImJfX2Rhc2hlZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcImRhc2hlZFwiXG4gICAgfVxuICB9LFxuICBcImJfX3NvbGlkX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwic29saWRcIlxuICAgIH1cbiAgfSxcbiAgXCJiX19ub25lX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcImJ3MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci13aWR0aFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJidzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIuMTI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYncyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiLjI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnczX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiLjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJidzRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnc1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImJ0XzBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItdG9wLXdpZHRoXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyXzBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmlnaHQtd2lkdGhcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYmJfMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1ib3R0b20td2lkdGhcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYmxfMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1sZWZ0LXdpZHRoXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJhX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMXB4XCJcbiAgICB9XG4gIH0sXG4gIFwiYnRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItdG9wLXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLXRvcC13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJpZ2h0LXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCI6IFwiMXB4XCJcbiAgICB9XG4gIH0sXG4gIFwiYmJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3JkZXItYm90dG9tLXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJsX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLWxlZnQtc3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJib3JkZXItbGVmdC13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwibm9uZVwiLFxuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiMHB4IDBweCA0cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiMHB4IDBweCA4cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiMnB4IDJweCA0cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiMnB4IDJweCA4cHggMHB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiNHB4IDRweCA4cHggMHB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwiY2xfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJjbGVhclwiOiBcImxlZnRcIlxuICAgIH1cbiAgfSxcbiAgXCJjcl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImNsZWFyXCI6IFwicmlnaHRcIlxuICAgIH1cbiAgfSxcbiAgXCJjYl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImNsZWFyXCI6IFwiYm90aFwiXG4gICAgfVxuICB9LFxuICBcImNuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiY2xlYXJcIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwidG9wXzBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0b3BcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwibGVmdF8wX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibGVmdFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF8wX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicmlnaHRcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYm90dG9tXzBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3R0b21cIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwidG9wXzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0b3BcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibGVmdF8xX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibGVmdFwiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF8xX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicmlnaHRcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYm90dG9tXzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3R0b21cIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidG9wXzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0b3BcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibGVmdF8yX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibGVmdFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF8yX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicmlnaHRcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYm90dG9tXzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3R0b21cIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidG9wX18xX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF9fMV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJib3R0b21fXzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJib3R0b21cIjogXCItMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImxlZnRfXzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJsZWZ0XCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ0b3BfXzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0b3BcIjogXCItMnJlbVwiXG4gICAgfVxuICB9LFxuICBcInJpZ2h0X18yX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicmlnaHRcIjogXCItMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImJvdHRvbV9fMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImJvdHRvbVwiOiBcIi0ycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibGVmdF9fMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImxlZnRcIjogXCItMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImFic29sdXRlX19maWxsX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiMFwiLFxuICAgICAgXCJyaWdodFwiOiBcIjBcIixcbiAgICAgIFwiYm90dG9tXCI6IFwiMFwiLFxuICAgICAgXCJsZWZ0XCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImRuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJkaV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJpbmxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJkYl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJibG9ja1wiXG4gICAgfVxuICB9LFxuICBcImRpYl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIlxuICAgIH1cbiAgfSxcbiAgXCJkaXRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLXRhYmxlXCJcbiAgICB9XG4gIH0sXG4gIFwiZHRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwidGFibGVcIlxuICAgIH1cbiAgfSxcbiAgXCJkdGNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwidGFibGUtY2VsbFwiXG4gICAgfVxuICB9LFxuICBcImR0X3Jvd19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJ0YWJsZS1yb3dcIlxuICAgIH1cbiAgfSxcbiAgXCJkdF9yb3dfZ3JvdXBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwidGFibGUtcm93LWdyb3VwXCJcbiAgICB9XG4gIH0sXG4gIFwiZHRfY29sdW1uX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLWNvbHVtblwiXG4gICAgfVxuICB9LFxuICBcImR0X2NvbHVtbl9ncm91cF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJ0YWJsZS1jb2x1bW4tZ3JvdXBcIlxuICAgIH1cbiAgfSxcbiAgXCJkdF9fZml4ZWRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0YWJsZS1sYXlvdXRcIjogXCJmaXhlZFwiLFxuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcImZsZXhcIlxuICAgIH1cbiAgfSxcbiAgXCJpbmxpbmVfZmxleF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtZmxleFwiXG4gICAgfVxuICB9LFxuICBcImZsZXhfYXV0b19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZsZXhcIjogXCIxIDEgYXV0b1wiLFxuICAgICAgXCJtaW4td2lkdGhcIjogXCIwXCIsXG4gICAgICBcIm1pbi1oZWlnaHRcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiZmxleF9ub25lX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZmxleFwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X2NvbHVtbl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZsZXgtZGlyZWN0aW9uXCI6IFwiY29sdW1uXCJcbiAgICB9XG4gIH0sXG4gIFwiZmxleF9yb3dfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmbGV4LWRpcmVjdGlvblwiOiBcInJvd1wiXG4gICAgfVxuICB9LFxuICBcImZsZXhfd3JhcF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZsZXgtd3JhcFwiOiBcIndyYXBcIlxuICAgIH1cbiAgfSxcbiAgXCJpdGVtc19zdGFydF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImFsaWduLWl0ZW1zXCI6IFwiZmxleC1zdGFydFwiXG4gICAgfVxuICB9LFxuICBcIml0ZW1zX2VuZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImFsaWduLWl0ZW1zXCI6IFwiZmxleC1lbmRcIlxuICAgIH1cbiAgfSxcbiAgXCJpdGVtc19jZW50ZXJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcImNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcIml0ZW1zX2Jhc2VsaW5lX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24taXRlbXNcIjogXCJiYXNlbGluZVwiXG4gICAgfVxuICB9LFxuICBcIml0ZW1zX3N0cmV0Y2hfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcInN0cmV0Y2hcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX3N0YXJ0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tc2VsZlwiOiBcImZsZXgtc3RhcnRcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX2VuZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImFsaWduLXNlbGZcIjogXCJmbGV4LWVuZFwiXG4gICAgfVxuICB9LFxuICBcInNlbGZfY2VudGVyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tc2VsZlwiOiBcImNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcInNlbGZfYmFzZWxpbmVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1zZWxmXCI6IFwiYmFzZWxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX3N0cmV0Y2hfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1zZWxmXCI6IFwic3RyZXRjaFwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfc3RhcnRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJqdXN0aWZ5LWNvbnRlbnRcIjogXCJmbGV4LXN0YXJ0XCJcbiAgICB9XG4gIH0sXG4gIFwianVzdGlmeV9lbmRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJqdXN0aWZ5LWNvbnRlbnRcIjogXCJmbGV4LWVuZFwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfY2VudGVyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwiY2VudGVyXCJcbiAgICB9XG4gIH0sXG4gIFwianVzdGlmeV9iZXR3ZWVuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwic3BhY2UtYmV0d2VlblwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfYXJvdW5kX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwic3BhY2UtYXJvdW5kXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9zdGFydF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJmbGV4LXN0YXJ0XCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9lbmRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1jb250ZW50XCI6IFwiZmxleC1lbmRcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X2NlbnRlcl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X2JldHdlZW5fbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1jb250ZW50XCI6IFwic3BhY2UtYmV0d2VlblwiXG4gICAgfVxuICB9LFxuICBcImNvbnRlbnRfYXJvdW5kX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tY29udGVudFwiOiBcInNwYWNlLWFyb3VuZFwiXG4gICAgfVxuICB9LFxuICBcImNvbnRlbnRfc3RyZXRjaF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJzdHJldGNoXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyXzFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjFcIlxuICAgIH1cbiAgfSxcbiAgXCJvcmRlcl8yX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCIyXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiM1wiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyXzRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjRcIlxuICAgIH1cbiAgfSxcbiAgXCJvcmRlcl81X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI1XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfNl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiNlwiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyXzdfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjdcIlxuICAgIH1cbiAgfSxcbiAgXCJvcmRlcl84X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI4XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfbGFzdF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiOTk5OTlcIlxuICAgIH1cbiAgfSxcbiAgXCJmbF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZsb2F0XCI6IFwibGVmdFwiLFxuICAgICAgXCJfZGlzcGxheVwiOiBcImlubGluZVwiXG4gICAgfVxuICB9LFxuICBcImZyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZmxvYXRcIjogXCJyaWdodFwiLFxuICAgICAgXCJfZGlzcGxheVwiOiBcImlubGluZVwiXG4gICAgfVxuICB9LFxuICBcImZuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZmxvYXRcIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwiaV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtc3R5bGVcIjogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSxcbiAgXCJmc19ub3JtYWxfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmb250LXN0eWxlXCI6IFwibm9ybWFsXCJcbiAgICB9XG4gIH0sXG4gIFwibm9ybWFsX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCJub3JtYWxcIlxuICAgIH1cbiAgfSxcbiAgXCJiX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCJib2xkXCJcbiAgICB9XG4gIH0sXG4gIFwiZncxX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCIxMDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjIwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3M19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiMzAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnc0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCI0MDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjUwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3Nl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiNjAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnc3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCI3MDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzhfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjgwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3OV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiOTAwXCJcbiAgICB9XG4gIH0sXG4gIFwiaDFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaDJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaDNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCI0cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaDRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCI4cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaDVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIxNnJlbVwiXG4gICAgfVxuICB9LFxuICBcImhfMjVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIyNSVcIlxuICAgIH1cbiAgfSxcbiAgXCJoXzUwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNTAlXCJcbiAgICB9XG4gIH0sXG4gIFwiaF83NV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjc1JVwiXG4gICAgfVxuICB9LFxuICBcImhfMTAwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMTAwJVwiXG4gICAgfVxuICB9LFxuICBcIm1pbl9oXzEwMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtaW4taGVpZ2h0XCI6IFwiMTAwJVwiXG4gICAgfVxuICB9LFxuICBcInZoXzI1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMjV2aFwiXG4gICAgfVxuICB9LFxuICBcInZoXzUwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNTB2aFwiXG4gICAgfVxuICB9LFxuICBcInZoXzc1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNzV2aFwiXG4gICAgfVxuICB9LFxuICBcInZoXzEwMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjEwMHZoXCJcbiAgICB9XG4gIH0sXG4gIFwibWluX3ZoXzEwMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1pbi1oZWlnaHRcIjogXCIxMDB2aFwiXG4gICAgfVxuICB9LFxuICBcImhfYXV0b19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcImF1dG9cIlxuICAgIH1cbiAgfSxcbiAgXCJoX2luaGVyaXRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCJpbmhlcml0XCJcbiAgICB9XG4gIH0sXG4gIFwidHJhY2tlZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjFlbVwiXG4gICAgfVxuICB9LFxuICBcInRyYWNrZWRfdGlnaHRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJsZXR0ZXItc3BhY2luZ1wiOiBcIi0uMDVlbVwiXG4gICAgfVxuICB9LFxuICBcInRyYWNrZWRfbWVnYV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjI1ZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJsaF9zb2xpZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMVwiXG4gICAgfVxuICB9LFxuICBcImxoX3RpdGxlX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibGluZS1oZWlnaHRcIjogXCIxLjI1XCJcbiAgICB9XG4gIH0sXG4gIFwibGhfY29weV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMS41XCJcbiAgICB9XG4gIH0sXG4gIFwibXdfMTAwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMTAwJVwiXG4gICAgfVxuICB9LFxuICBcIm13MV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXczX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13NF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjhyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCIxNnJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13Nl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjMycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXc3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiNDhyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzhfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCI2NHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13OV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjk2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXdfbm9uZV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJvdXRsaW5lX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3V0bGluZVwiOiBcIjFweCBzb2xpZFwiXG4gICAgfVxuICB9LFxuICBcIm91dGxpbmVfdHJhbnNwYXJlbnRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvdXRsaW5lXCI6IFwiMXB4IHNvbGlkIHRyYW5zcGFyZW50XCJcbiAgICB9XG4gIH0sXG4gIFwib3V0bGluZV8wX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3V0bGluZVwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd192aXNpYmxlX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3dcIjogXCJ2aXNpYmxlXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfaGlkZGVuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3dcIjogXCJoaWRkZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd19zY3JvbGxfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvd1wiOiBcInNjcm9sbFwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X2F1dG9fbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvd1wiOiBcImF1dG9cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd194X3Zpc2libGVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy14XCI6IFwidmlzaWJsZVwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfaGlkZGVuX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3cteFwiOiBcImhpZGRlblwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfc2Nyb2xsX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3cteFwiOiBcInNjcm9sbFwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfYXV0b19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXhcIjogXCJhdXRvXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfeV92aXNpYmxlX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3cteVwiOiBcInZpc2libGVcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X2hpZGRlbl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXlcIjogXCJoaWRkZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X3Njcm9sbF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXlcIjogXCJzY3JvbGxcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X2F1dG9fbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy15XCI6IFwiYXV0b1wiXG4gICAgfVxuICB9LFxuICBcInN0YXRpY19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBvc2l0aW9uXCI6IFwic3RhdGljXCJcbiAgICB9XG4gIH0sXG4gIFwicmVsYXRpdmVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCJcbiAgICB9XG4gIH0sXG4gIFwiYWJzb2x1dGVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCJcbiAgICB9XG4gIH0sXG4gIFwiZml4ZWRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcImZpeGVkXCJcbiAgICB9XG4gIH0sXG4gIFwicm90YXRlXzQ1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDQ1ZGVnKVwiXG4gICAgfVxuICB9LFxuICBcInJvdGF0ZV85MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSg5MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMTM1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDEzNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMTgwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDE4MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMjI1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDIyNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMjcwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDI3MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMzE1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDMxNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcInBhMV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBhMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBhM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTdfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicGwxX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBsM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBsNF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGw1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBsN19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHIwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicHI0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI2X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGIwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicGIxX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBiMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBiNF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGI2X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBiN19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInB0M19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB0NV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCIsXG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCIsXG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInB2NF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2NV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2Nl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2N19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBoNF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoNV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoNl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoN19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1hMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1hMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWEzX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibWE0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1hNl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWE3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtbDBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtbDFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWwyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1sM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibWw0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1sNV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtbDZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWw3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1yMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjFfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1yMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXIzX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibXI0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1yNl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibXI3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm1iMV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1iMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1iM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjdfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm10MV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm10Ml9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm10M19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDdfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm12MV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXYzX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibXY0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm12NV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibXY3X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1oMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwibWgxX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1oMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDRfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWg1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1oNl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDdfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwidGxfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LWFsaWduXCI6IFwibGVmdFwiXG4gICAgfVxuICB9LFxuICBcInRyX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1hbGlnblwiOiBcInJpZ2h0XCJcbiAgICB9XG4gIH0sXG4gIFwidGNfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LWFsaWduXCI6IFwiY2VudGVyXCJcbiAgICB9XG4gIH0sXG4gIFwic3RyaWtlX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwibGluZS10aHJvdWdoXCJcbiAgICB9XG4gIH0sXG4gIFwidW5kZXJsaW5lX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwidW5kZXJsaW5lXCJcbiAgICB9XG4gIH0sXG4gIFwibm9fdW5kZXJsaW5lX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcInR0Y19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInRleHQtdHJhbnNmb3JtXCI6IFwiY2FwaXRhbGl6ZVwiXG4gICAgfVxuICB9LFxuICBcInR0bF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInRleHQtdHJhbnNmb3JtXCI6IFwibG93ZXJjYXNlXCJcbiAgICB9XG4gIH0sXG4gIFwidHR1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidGV4dC10cmFuc2Zvcm1cIjogXCJ1cHBlcmNhc2VcIlxuICAgIH1cbiAgfSxcbiAgXCJ0dG5fbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LXRyYW5zZm9ybVwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmXzZfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZl9oZWFkbGluZV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjZyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmXzVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZl9zdWJoZWFkbGluZV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmMV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjNyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmMl9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjIuMjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjEuNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiMS4yNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY1X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY2X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiLjg3NXJlbVwiXG4gICAgfVxuICB9LFxuICBcIm1lYXN1cmVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCIzMGVtXCJcbiAgICB9XG4gIH0sXG4gIFwibWVhc3VyZV93aWRlX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMzRlbVwiXG4gICAgfVxuICB9LFxuICBcIm1lYXN1cmVfbmFycm93X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMjBlbVwiXG4gICAgfVxuICB9LFxuICBcImluZGVudF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInRleHQtaW5kZW50XCI6IFwiMWVtXCIsXG4gICAgICBcIm1hcmdpbi10b3BcIjogXCIwXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwic21hbGxfY2Fwc19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcImZvbnQtdmFyaWFudFwiOiBcInNtYWxsLWNhcHNcIlxuICAgIH1cbiAgfSxcbiAgXCJ0cnVuY2F0ZV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndoaXRlLXNwYWNlXCI6IFwibm93cmFwXCIsXG4gICAgICBcIm92ZXJmbG93XCI6IFwiaGlkZGVuXCIsXG4gICAgICBcInRleHQtb3ZlcmZsb3dcIjogXCJlbGxpcHNpc1wiXG4gICAgfVxuICB9LFxuICBcInZfYmFzZV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInZlcnRpY2FsLWFsaWduXCI6IFwiYmFzZWxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJ2X21pZF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcInZlcnRpY2FsLWFsaWduXCI6IFwibWlkZGxlXCJcbiAgICB9XG4gIH0sXG4gIFwidl90b3BfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcInRvcFwiXG4gICAgfVxuICB9LFxuICBcInZfYnRtX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwidmVydGljYWwtYWxpZ25cIjogXCJib3R0b21cIlxuICAgIH1cbiAgfSxcbiAgXCJjbGlwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwicG9zaXRpb25cIjogXCJmaXhlZCAhaW1wb3J0YW50XCIsXG4gICAgICBcIl9wb3NpdGlvblwiOiBcImFic29sdXRlICFpbXBvcnRhbnRcIixcbiAgICAgIFwiY2xpcFwiOiBcInJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KVwiXG4gICAgfVxuICB9LFxuICBcIndzX25vcm1hbF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndoaXRlLXNwYWNlXCI6IFwibm9ybWFsXCJcbiAgICB9XG4gIH0sXG4gIFwibm93cmFwX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwid2hpdGUtc3BhY2VcIjogXCJub3dyYXBcIlxuICAgIH1cbiAgfSxcbiAgXCJwcmVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ3aGl0ZS1zcGFjZVwiOiBcInByZVwiXG4gICAgfVxuICB9LFxuICBcIncxX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidzJfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ3M19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcInc0X25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCI4cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidzVfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjE2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwid18xMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18yMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMjAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18yNV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMjUlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zMF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zM19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzMlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zNF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzQlXCJcbiAgICB9XG4gIH0sXG4gIFwid180MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNDAlXCJcbiAgICB9XG4gIH0sXG4gIFwid181MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid182MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNjAlXCJcbiAgICB9XG4gIH0sXG4gIFwid183MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNzAlXCJcbiAgICB9XG4gIH0sXG4gIFwid183NV9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNzUlXCJcbiAgICB9XG4gIH0sXG4gIFwid184MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiODAlXCJcbiAgICB9XG4gIH0sXG4gIFwid185MF9uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiOTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18xMDBfbnNcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3X3RoaXJkX25zXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCJjYWxjKDEwMCUgLyAzKVwiXG4gICAgfVxuICB9LFxuICBcIndfdHdvX3RoaXJkc19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiY2FsYygxMDAlIC8gMS41KVwiXG4gICAgfVxuICB9LFxuICBcIndfYXV0b19uc1wiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiYXV0b1wiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjBcIixcbiAgICAgIFwicG9zaXRpb25cIjogXCJyZWxhdGl2ZVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fMTZ4OV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNTYuMjUlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX185eDE2X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxNzcuNzclXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX180eDNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjc1JVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fM3g0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxMzMuMzMlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX182eDRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjY2LjYlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX180eDZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjE1MCVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzh4NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNjIuNSVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzV4OF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTYwJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fN3g1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCI3MS40MiVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzV4N19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTQwJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fMXgxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxMDAlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX19vYmplY3RfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCIsXG4gICAgICBcInRvcFwiOiBcIjBcIixcbiAgICAgIFwicmlnaHRcIjogXCIwXCIsXG4gICAgICBcImJvdHRvbVwiOiBcIjBcIixcbiAgICAgIFwibGVmdFwiOiBcIjBcIixcbiAgICAgIFwid2lkdGhcIjogXCIxMDAlXCIsXG4gICAgICBcImhlaWdodFwiOiBcIjEwMCVcIixcbiAgICAgIFwiei1pbmRleFwiOiBcIjEwMFwiXG4gICAgfVxuICB9LFxuICBcImJnX2NlbnRlcl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJhY2tncm91bmQtcmVwZWF0XCI6IFwibm8tcmVwZWF0XCIsXG4gICAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogXCJjZW50ZXIgY2VudGVyXCJcbiAgICB9XG4gIH0sXG4gIFwiYmdfdG9wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcInRvcCBjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJiZ19yaWdodF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJhY2tncm91bmQtcmVwZWF0XCI6IFwibm8tcmVwZWF0XCIsXG4gICAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogXCJjZW50ZXIgcmlnaHRcIlxuICAgIH1cbiAgfSxcbiAgXCJiZ19ib3R0b21fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwiYm90dG9tIGNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcImJnX2xlZnRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwiY2VudGVyIGxlZnRcIlxuICAgIH1cbiAgfSxcbiAgXCJjb3Zlcl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJhY2tncm91bmQtc2l6ZVwiOiBcImNvdmVyXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGFpbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJhY2tncm91bmQtc2l6ZVwiOiBcImNvbnRhaW5cIlxuICAgIH1cbiAgfSxcbiAgXCJicjBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIuMTI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnIyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIi4yNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJyM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIuNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJyNF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnJfMTAwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJicl9waWxsX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjk5OTlweFwiXG4gICAgfVxuICB9LFxuICBcImJyX19ib3R0b21fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItdG9wLWxlZnQtcmFkaXVzXCI6IFwiMFwiLFxuICAgICAgXCJib3JkZXItdG9wLXJpZ2h0LXJhZGl1c1wiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJicl9fdG9wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiOiBcIjBcIixcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYnJfX3JpZ2h0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1wiOiBcIjBcIixcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJicl9fbGVmdF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCI6IFwiMFwiLFxuICAgICAgXCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1c1wiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJiX19kb3R0ZWRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItc3R5bGVcIjogXCJkb3R0ZWRcIlxuICAgIH1cbiAgfSxcbiAgXCJiX19kYXNoZWRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItc3R5bGVcIjogXCJkYXNoZWRcIlxuICAgIH1cbiAgfSxcbiAgXCJiX19zb2xpZF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcInNvbGlkXCJcbiAgICB9XG4gIH0sXG4gIFwiYl9fbm9uZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJidzBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYncxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiLjEyNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJ3Ml9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci13aWR0aFwiOiBcIi4yNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJ3M19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci13aWR0aFwiOiBcIi41cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnc0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJ3NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci13aWR0aFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJidF8wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC13aWR0aFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJicl8wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJiXzBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItYm90dG9tLXdpZHRoXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJsXzBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItbGVmdC13aWR0aFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJiYV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcImJvcmRlci13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJ0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcImJvcmRlci10b3Atd2lkdGhcIjogXCIxcHhcIlxuICAgIH1cbiAgfSxcbiAgXCJicl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yaWdodC1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcImJvcmRlci1yaWdodC13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJiX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcImJvcmRlci1ib3R0b20td2lkdGhcIjogXCIxcHhcIlxuICAgIH1cbiAgfSxcbiAgXCJibF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1sZWZ0LXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLWxlZnQtd2lkdGhcIjogXCIxcHhcIlxuICAgIH1cbiAgfSxcbiAgXCJibl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcIm5vbmVcIixcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd18xX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm94LXNoYWRvd1wiOiBcIjBweCAwcHggNHB4IDJweCByZ2JhKCAwLCAwLCAwLCAwLjIgKVwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd18yX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm94LXNoYWRvd1wiOiBcIjBweCAwcHggOHB4IDJweCByZ2JhKCAwLCAwLCAwLCAwLjIgKVwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd18zX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm94LXNoYWRvd1wiOiBcIjJweCAycHggNHB4IDJweCByZ2JhKCAwLCAwLCAwLCAwLjIgKVwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd180X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm94LXNoYWRvd1wiOiBcIjJweCAycHggOHB4IDBweCByZ2JhKCAwLCAwLCAwLCAwLjIgKVwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd181X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm94LXNoYWRvd1wiOiBcIjRweCA0cHggOHB4IDBweCByZ2JhKCAwLCAwLCAwLCAwLjIgKVwiXG4gICAgfVxuICB9LFxuICBcImNsX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiY2xlYXJcIjogXCJsZWZ0XCJcbiAgICB9XG4gIH0sXG4gIFwiY3JfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJjbGVhclwiOiBcInJpZ2h0XCJcbiAgICB9XG4gIH0sXG4gIFwiY2JfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJjbGVhclwiOiBcImJvdGhcIlxuICAgIH1cbiAgfSxcbiAgXCJjbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImNsZWFyXCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcInRvcF8wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImxlZnRfMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxlZnRcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwicmlnaHRfMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJvdHRvbV8wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm90dG9tXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcInRvcF8xX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImxlZnRfMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxlZnRcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwicmlnaHRfMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJvdHRvbV8xX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm90dG9tXCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcInRvcF8yX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImxlZnRfMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxlZnRcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwicmlnaHRfMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImJvdHRvbV8yX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm90dG9tXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcInRvcF9fMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRvcFwiOiBcIi0xcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwicmlnaHRfXzFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJyaWdodFwiOiBcIi0xcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYm90dG9tX18xX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm90dG9tXCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJsZWZ0X18xX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibGVmdFwiOiBcIi0xcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidG9wX18yX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiLTJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF9fMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiLTJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJib3R0b21fXzJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3R0b21cIjogXCItMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImxlZnRfXzJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsZWZ0XCI6IFwiLTJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJhYnNvbHV0ZV9fZmlsbF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRvcFwiOiBcIjBcIixcbiAgICAgIFwicmlnaHRcIjogXCIwXCIsXG4gICAgICBcImJvdHRvbVwiOiBcIjBcIixcbiAgICAgIFwibGVmdFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJkbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwiZGlfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lXCJcbiAgICB9XG4gIH0sXG4gIFwiZGJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwiYmxvY2tcIlxuICAgIH1cbiAgfSxcbiAgXCJkaWJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCJcbiAgICB9XG4gIH0sXG4gIFwiZGl0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcImlubGluZS10YWJsZVwiXG4gICAgfVxuICB9LFxuICBcImR0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlXCJcbiAgICB9XG4gIH0sXG4gIFwiZHRjX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLWNlbGxcIlxuICAgIH1cbiAgfSxcbiAgXCJkdF9yb3dfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwidGFibGUtcm93XCJcbiAgICB9XG4gIH0sXG4gIFwiZHRfcm93X2dyb3VwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLXJvdy1ncm91cFwiXG4gICAgfVxuICB9LFxuICBcImR0X2NvbHVtbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJ0YWJsZS1jb2x1bW5cIlxuICAgIH1cbiAgfSxcbiAgXCJkdF9jb2x1bW5fZ3JvdXBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwidGFibGUtY29sdW1uLWdyb3VwXCJcbiAgICB9XG4gIH0sXG4gIFwiZHRfX2ZpeGVkX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGFibGUtbGF5b3V0XCI6IFwiZml4ZWRcIixcbiAgICAgIFwid2lkdGhcIjogXCIxMDAlXCJcbiAgICB9XG4gIH0sXG4gIFwiZmxleF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJmbGV4XCJcbiAgICB9XG4gIH0sXG4gIFwiaW5saW5lX2ZsZXhfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWZsZXhcIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X2F1dG9fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbGV4XCI6IFwiMSAxIGF1dG9cIixcbiAgICAgIFwibWluLXdpZHRoXCI6IFwiMFwiLFxuICAgICAgXCJtaW4taGVpZ2h0XCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImZsZXhfbm9uZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZsZXhcIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwiZmxleF9jb2x1bW5fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbGV4LWRpcmVjdGlvblwiOiBcImNvbHVtblwiXG4gICAgfVxuICB9LFxuICBcImZsZXhfcm93X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZmxleC1kaXJlY3Rpb25cIjogXCJyb3dcIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X3dyYXBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbGV4LXdyYXBcIjogXCJ3cmFwXCJcbiAgICB9XG4gIH0sXG4gIFwiaXRlbXNfc3RhcnRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtc3RhcnRcIlxuICAgIH1cbiAgfSxcbiAgXCJpdGVtc19lbmRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtZW5kXCJcbiAgICB9XG4gIH0sXG4gIFwiaXRlbXNfY2VudGVyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24taXRlbXNcIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJpdGVtc19iYXNlbGluZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLWl0ZW1zXCI6IFwiYmFzZWxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJpdGVtc19zdHJldGNoX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24taXRlbXNcIjogXCJzdHJldGNoXCJcbiAgICB9XG4gIH0sXG4gIFwic2VsZl9zdGFydF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLXNlbGZcIjogXCJmbGV4LXN0YXJ0XCJcbiAgICB9XG4gIH0sXG4gIFwic2VsZl9lbmRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1zZWxmXCI6IFwiZmxleC1lbmRcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX2NlbnRlcl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLXNlbGZcIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX2Jhc2VsaW5lX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tc2VsZlwiOiBcImJhc2VsaW5lXCJcbiAgICB9XG4gIH0sXG4gIFwic2VsZl9zdHJldGNoX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tc2VsZlwiOiBcInN0cmV0Y2hcIlxuICAgIH1cbiAgfSxcbiAgXCJqdXN0aWZ5X3N0YXJ0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1zdGFydFwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfZW5kX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1lbmRcIlxuICAgIH1cbiAgfSxcbiAgXCJqdXN0aWZ5X2NlbnRlcl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImp1c3RpZnktY29udGVudFwiOiBcImNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfYmV0d2Vlbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWJldHdlZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJqdXN0aWZ5X2Fyb3VuZF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWFyb3VuZFwiXG4gICAgfVxuICB9LFxuICBcImNvbnRlbnRfc3RhcnRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1jb250ZW50XCI6IFwiZmxleC1zdGFydFwiXG4gICAgfVxuICB9LFxuICBcImNvbnRlbnRfZW5kX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tY29udGVudFwiOiBcImZsZXgtZW5kXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9jZW50ZXJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1jb250ZW50XCI6IFwiY2VudGVyXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9iZXR3ZWVuX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tY29udGVudFwiOiBcInNwYWNlLWJldHdlZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X2Fyb3VuZF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJzcGFjZS1hcm91bmRcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X3N0cmV0Y2hfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1jb250ZW50XCI6IFwic3RyZXRjaFwiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyXzBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJvcmRlcl8xX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCIxXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiMlwiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyXzNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjNcIlxuICAgIH1cbiAgfSxcbiAgXCJvcmRlcl80X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI0XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfNV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiNVwiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyXzZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjZcIlxuICAgIH1cbiAgfSxcbiAgXCJvcmRlcl83X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI3XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfOF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm9yZGVyXCI6IFwiOFwiXG4gICAgfVxuICB9LFxuICBcIm9yZGVyX2xhc3RfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvcmRlclwiOiBcIjk5OTk5XCJcbiAgICB9XG4gIH0sXG4gIFwiZmxfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbG9hdFwiOiBcImxlZnRcIixcbiAgICAgIFwiX2Rpc3BsYXlcIjogXCJpbmxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmcl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZsb2F0XCI6IFwicmlnaHRcIixcbiAgICAgIFwiX2Rpc3BsYXlcIjogXCJpbmxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZsb2F0XCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcImlfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXN0eWxlXCI6IFwiaXRhbGljXCJcbiAgICB9XG4gIH0sXG4gIFwiZnNfbm9ybWFsX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zdHlsZVwiOiBcIm5vcm1hbFwiXG4gICAgfVxuICB9LFxuICBcIm5vcm1hbF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwibm9ybWFsXCJcbiAgICB9XG4gIH0sXG4gIFwiYl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiYm9sZFwiXG4gICAgfVxuICB9LFxuICBcImZ3MV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiMTAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZncyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCIyMDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjMwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3NF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiNDAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnc1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCI1MDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjYwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3N19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiNzAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnc4X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCI4MDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzlfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjkwMFwiXG4gICAgfVxuICB9LFxuICBcImgxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImgyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImgzX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcImg0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiOHJlbVwiXG4gICAgfVxuICB9LFxuICBcImg1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMTZyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJoXzI1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMjUlXCJcbiAgICB9XG4gIH0sXG4gIFwiaF81MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjUwJVwiXG4gICAgfVxuICB9LFxuICBcImhfNzVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCI3NSVcIlxuICAgIH1cbiAgfSxcbiAgXCJoXzEwMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ2aF8yNV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjI1dmhcIlxuICAgIH1cbiAgfSxcbiAgXCJ2aF81MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjUwdmhcIlxuICAgIH1cbiAgfSxcbiAgXCJ2aF83NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjc1dmhcIlxuICAgIH1cbiAgfSxcbiAgXCJ2aF8xMDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIxMDB2aFwiXG4gICAgfVxuICB9LFxuICBcIm1pbl92aF8xMDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1pbi1oZWlnaHRcIjogXCIxMDB2aFwiXG4gICAgfVxuICB9LFxuICBcImhfYXV0b19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcImF1dG9cIlxuICAgIH1cbiAgfSxcbiAgXCJoX2luaGVyaXRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCJpbmhlcml0XCJcbiAgICB9XG4gIH0sXG4gIFwidHJhY2tlZF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjFlbVwiXG4gICAgfVxuICB9LFxuICBcInRyYWNrZWRfdGlnaHRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsZXR0ZXItc3BhY2luZ1wiOiBcIi0uMDVlbVwiXG4gICAgfVxuICB9LFxuICBcInRyYWNrZWRfbWVnYV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjI1ZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJsaF9zb2xpZF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMVwiXG4gICAgfVxuICB9LFxuICBcImxoX3RpdGxlX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibGluZS1oZWlnaHRcIjogXCIxLjI1XCJcbiAgICB9XG4gIH0sXG4gIFwibGhfY29weV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMS41XCJcbiAgICB9XG4gIH0sXG4gIFwibXdfMTAwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMTAwJVwiXG4gICAgfVxuICB9LFxuICBcIm13MV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXczX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13NF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjhyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCIxNnJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13Nl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjMycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXc3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiNDhyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzhfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCI2NHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13OV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjk2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXdfbm9uZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJvdXRsaW5lX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3V0bGluZVwiOiBcIjFweCBzb2xpZFwiXG4gICAgfVxuICB9LFxuICBcIm91dGxpbmVfdHJhbnNwYXJlbnRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdXRsaW5lXCI6IFwiMXB4IHNvbGlkIHRyYW5zcGFyZW50XCJcbiAgICB9XG4gIH0sXG4gIFwib3V0bGluZV8wX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3V0bGluZVwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJvdXRsaW5lX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3V0bGluZVwiOiBcIjFweCBzb2xpZFwiXG4gICAgfVxuICB9LFxuICBcIm91dGxpbmVfdHJhbnNwYXJlbnRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdXRsaW5lXCI6IFwiMXB4IHNvbGlkIHRyYW5zcGFyZW50XCJcbiAgICB9XG4gIH0sXG4gIFwib3V0bGluZV8wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3V0bGluZVwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd192aXNpYmxlX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3dcIjogXCJ2aXNpYmxlXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfaGlkZGVuX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3dcIjogXCJoaWRkZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd19zY3JvbGxfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvd1wiOiBcInNjcm9sbFwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X2F1dG9fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvd1wiOiBcImF1dG9cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd194X3Zpc2libGVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy14XCI6IFwidmlzaWJsZVwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfaGlkZGVuX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3cteFwiOiBcImhpZGRlblwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfc2Nyb2xsX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3cteFwiOiBcInNjcm9sbFwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfYXV0b19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXhcIjogXCJhdXRvXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfeV92aXNpYmxlX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3cteVwiOiBcInZpc2libGVcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X2hpZGRlbl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXlcIjogXCJoaWRkZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X3Njcm9sbF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXlcIjogXCJzY3JvbGxcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X2F1dG9fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy15XCI6IFwiYXV0b1wiXG4gICAgfVxuICB9LFxuICBcInN0YXRpY19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBvc2l0aW9uXCI6IFwic3RhdGljXCJcbiAgICB9XG4gIH0sXG4gIFwicmVsYXRpdmVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCJcbiAgICB9XG4gIH0sXG4gIFwiYWJzb2x1dGVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcImFic29sdXRlXCJcbiAgICB9XG4gIH0sXG4gIFwiZml4ZWRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcImZpeGVkXCJcbiAgICB9XG4gIH0sXG4gIFwicm90YXRlXzQ1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDQ1ZGVnKVwiXG4gICAgfVxuICB9LFxuICBcInJvdGF0ZV85MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSg5MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMTM1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDEzNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMTgwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDE4MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMjI1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDIyNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMjcwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDI3MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMzE1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDMxNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcInBhMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBhMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBhM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTdfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicGwxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBsM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBsNF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGw1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBsN19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHIwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicHI0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI2X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGIwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicGIxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBiMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBiNF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGI2X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBiN19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInB0M19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB0NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCIsXG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCIsXG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInB2NF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2Nl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2N19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBoNF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoNV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoNl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoN19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1hMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1hMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWEzX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibWE0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1hNl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWE3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtbDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtbDFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWwyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1sM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibWw0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1sNV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtbDZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWw3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1yMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjFfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1yMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXIzX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibXI0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1yNl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibXI3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm1iMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1iMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1iM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjdfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm10MV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm10Ml9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm10M19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDdfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm12MV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXYzX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibXY0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm12NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibXY3X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1oMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwibWgxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1oMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDRfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWg1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1oNl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDdfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwidGxfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LWFsaWduXCI6IFwibGVmdFwiXG4gICAgfVxuICB9LFxuICBcInRyX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1hbGlnblwiOiBcInJpZ2h0XCJcbiAgICB9XG4gIH0sXG4gIFwidGNfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LWFsaWduXCI6IFwiY2VudGVyXCJcbiAgICB9XG4gIH0sXG4gIFwic3RyaWtlX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwibGluZS10aHJvdWdoXCJcbiAgICB9XG4gIH0sXG4gIFwidW5kZXJsaW5lX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwidW5kZXJsaW5lXCJcbiAgICB9XG4gIH0sXG4gIFwibm9fdW5kZXJsaW5lX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcInR0Y19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRleHQtdHJhbnNmb3JtXCI6IFwiY2FwaXRhbGl6ZVwiXG4gICAgfVxuICB9LFxuICBcInR0bF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRleHQtdHJhbnNmb3JtXCI6IFwibG93ZXJjYXNlXCJcbiAgICB9XG4gIH0sXG4gIFwidHR1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC10cmFuc2Zvcm1cIjogXCJ1cHBlcmNhc2VcIlxuICAgIH1cbiAgfSxcbiAgXCJ0dG5fbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LXRyYW5zZm9ybVwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmXzZfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZl9oZWFkbGluZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjZyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmXzVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZl9zdWJoZWFkbGluZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmMV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjNyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmMl9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjIuMjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjEuNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiMS4yNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY1X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY2X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiLjg3NXJlbVwiXG4gICAgfVxuICB9LFxuICBcIm1lYXN1cmVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCIzMGVtXCJcbiAgICB9XG4gIH0sXG4gIFwibWVhc3VyZV93aWRlX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMzRlbVwiXG4gICAgfVxuICB9LFxuICBcIm1lYXN1cmVfbmFycm93X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMjBlbVwiXG4gICAgfVxuICB9LFxuICBcImluZGVudF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRleHQtaW5kZW50XCI6IFwiMWVtXCIsXG4gICAgICBcIm1hcmdpbi10b3BcIjogXCIwXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwic21hbGxfY2Fwc19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtdmFyaWFudFwiOiBcInNtYWxsLWNhcHNcIlxuICAgIH1cbiAgfSxcbiAgXCJ0cnVuY2F0ZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndoaXRlLXNwYWNlXCI6IFwibm93cmFwXCIsXG4gICAgICBcIm92ZXJmbG93XCI6IFwiaGlkZGVuXCIsXG4gICAgICBcInRleHQtb3ZlcmZsb3dcIjogXCJlbGxpcHNpc1wiXG4gICAgfVxuICB9LFxuICBcInZfYmFzZV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInZlcnRpY2FsLWFsaWduXCI6IFwiYmFzZWxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJ2X21pZF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInZlcnRpY2FsLWFsaWduXCI6IFwibWlkZGxlXCJcbiAgICB9XG4gIH0sXG4gIFwidl90b3BfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcInRvcFwiXG4gICAgfVxuICB9LFxuICBcInZfYnRtX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidmVydGljYWwtYWxpZ25cIjogXCJib3R0b21cIlxuICAgIH1cbiAgfSxcbiAgXCJjbGlwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicG9zaXRpb25cIjogXCJmaXhlZCAhaW1wb3J0YW50XCIsXG4gICAgICBcIl9wb3NpdGlvblwiOiBcImFic29sdXRlICFpbXBvcnRhbnRcIixcbiAgICAgIFwiY2xpcFwiOiBcInJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KVwiXG4gICAgfVxuICB9LFxuICBcIndzX25vcm1hbF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndoaXRlLXNwYWNlXCI6IFwibm9ybWFsXCJcbiAgICB9XG4gIH0sXG4gIFwibm93cmFwX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2hpdGUtc3BhY2VcIjogXCJub3dyYXBcIlxuICAgIH1cbiAgfSxcbiAgXCJwcmVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aGl0ZS1zcGFjZVwiOiBcInByZVwiXG4gICAgfVxuICB9LFxuICBcIncxX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidzJfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ3M19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcInc0X21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCI4cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidzVfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjE2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwid18xMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18yMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMjAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18yNV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMjUlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zMF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zM19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzMlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zNF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzQlXCJcbiAgICB9XG4gIH0sXG4gIFwid180MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNDAlXCJcbiAgICB9XG4gIH0sXG4gIFwid181MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid182MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNjAlXCJcbiAgICB9XG4gIH0sXG4gIFwid183MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNzAlXCJcbiAgICB9XG4gIH0sXG4gIFwid183NV9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNzUlXCJcbiAgICB9XG4gIH0sXG4gIFwid184MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiODAlXCJcbiAgICB9XG4gIH0sXG4gIFwid185MF9tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiOTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18xMDBfbVwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAzMGVtKSBhbmQgKG1heC13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3X3RoaXJkX21cIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgYW5kIChtYXgtd2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCJjYWxjKDEwMCUgLyAzKVwiXG4gICAgfVxuICB9LFxuICBcIndfdHdvX3RoaXJkc19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiY2FsYygxMDAlIC8gMS41KVwiXG4gICAgfVxuICB9LFxuICBcIndfYXV0b19tXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDMwZW0pIGFuZCAobWF4LXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiYXV0b1wiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMFwiLFxuICAgICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18xNng5X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjU2LjI1JVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fOXgxNl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxNzcuNzclXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX180eDNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiNzUlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX18zeDRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTMzLjMzJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fNng0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjY2LjYlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX180eDZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTUwJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fOHg1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjYyLjUlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX181eDhfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwiMTYwJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fN3g1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjcxLjQyJVwiXG4gICAgfVxuICB9LFxuICBcImFzcGVjdF9yYXRpb19fNXg3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjE0MCVcIlxuICAgIH1cbiAgfSxcbiAgXCJhc3BlY3RfcmF0aW9fXzF4MV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCIxMDAlXCJcbiAgICB9XG4gIH0sXG4gIFwiYXNwZWN0X3JhdGlvX19vYmplY3RfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcbiAgICAgIFwidG9wXCI6IFwiMFwiLFxuICAgICAgXCJyaWdodFwiOiBcIjBcIixcbiAgICAgIFwiYm90dG9tXCI6IFwiMFwiLFxuICAgICAgXCJsZWZ0XCI6IFwiMFwiLFxuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIixcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMTAwJVwiLFxuICAgICAgXCJ6LWluZGV4XCI6IFwiMTAwXCJcbiAgICB9XG4gIH0sXG4gIFwiYmdfY2VudGVyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwiY2VudGVyIGNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcImJnX3RvcF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcInRvcCBjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJiZ19yaWdodF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcImNlbnRlciByaWdodFwiXG4gICAgfVxuICB9LFxuICBcImJnX2JvdHRvbV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1yZXBlYXRcIjogXCJuby1yZXBlYXRcIixcbiAgICAgIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiOiBcImJvdHRvbSBjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJiZ19sZWZ0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiOiBcIm5vLXJlcGVhdFwiLFxuICAgICAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCI6IFwiY2VudGVyIGxlZnRcIlxuICAgIH1cbiAgfSxcbiAgXCJjb3Zlcl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1zaXplXCI6IFwiY292ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250YWluX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLXNpemVcIjogXCJjb250YWluXCJcbiAgICB9XG4gIH0sXG4gIFwiYnIwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIi4xMjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJicjJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIuMjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJicjNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIuNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJyNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJicl8xMDBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yYWRpdXNcIjogXCIxMDAlXCJcbiAgICB9XG4gIH0sXG4gIFwiYnJfcGlsbF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXJhZGl1c1wiOiBcIjk5OTlweFwiXG4gICAgfVxuICB9LFxuICBcImJyX19ib3R0b21fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci10b3AtbGVmdC1yYWRpdXNcIjogXCIwXCIsXG4gICAgICBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyX190b3BfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXNcIjogXCIwXCIsXG4gICAgICBcImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJyX19yaWdodF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1wiOiBcIjBcIixcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJicl9fbGVmdF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXNcIjogXCIwXCIsXG4gICAgICBcImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJfX2RvdHRlZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwiZG90dGVkXCJcbiAgICB9XG4gIH0sXG4gIFwiYl9fZGFzaGVkX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItc3R5bGVcIjogXCJkYXNoZWRcIlxuICAgIH1cbiAgfSxcbiAgXCJiX19zb2xpZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwic29saWRcIlxuICAgIH1cbiAgfSxcbiAgXCJiX19ub25lX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItc3R5bGVcIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwiYncwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYncxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIuMTI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYncyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIuMjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJidzNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci13aWR0aFwiOiBcIi41cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnc0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnc1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItd2lkdGhcIjogXCIycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYnRfMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXRvcC13aWR0aFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJicl8wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItcmlnaHQtd2lkdGhcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwiYmJfMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJibF8wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItbGVmdC13aWR0aFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJiYV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm9yZGVyLXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMXB4XCJcbiAgICB9XG4gIH0sXG4gIFwiYnRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci10b3Atc3R5bGVcIjogXCJzb2xpZFwiLFxuICAgICAgXCJib3JkZXItdG9wLXdpZHRoXCI6IFwiMXB4XCJcbiAgICB9XG4gIH0sXG4gIFwiYnJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1yaWdodC1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcImJvcmRlci1yaWdodC13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJiX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItYm90dG9tLXN0eWxlXCI6IFwic29saWRcIixcbiAgICAgIFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiOiBcIjFweFwiXG4gICAgfVxuICB9LFxuICBcImJsX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3JkZXItbGVmdC1zdHlsZVwiOiBcInNvbGlkXCIsXG4gICAgICBcImJvcmRlci1sZWZ0LXdpZHRoXCI6IFwiMXB4XCJcbiAgICB9XG4gIH0sXG4gIFwiYm5fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvcmRlci1zdHlsZVwiOiBcIm5vbmVcIixcbiAgICAgIFwiYm9yZGVyLXdpZHRoXCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd18xX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiMHB4IDBweCA0cHggMnB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJveC1zaGFkb3dcIjogXCIwcHggMHB4IDhweCAycHggcmdiYSggMCwgMCwgMCwgMC4yIClcIlxuICAgIH1cbiAgfSxcbiAgXCJzaGFkb3dfM19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm94LXNoYWRvd1wiOiBcIjJweCAycHggNHB4IDJweCByZ2JhKCAwLCAwLCAwLCAwLjIgKVwiXG4gICAgfVxuICB9LFxuICBcInNoYWRvd180X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3gtc2hhZG93XCI6IFwiMnB4IDJweCA4cHggMHB4IHJnYmEoIDAsIDAsIDAsIDAuMiApXCJcbiAgICB9XG4gIH0sXG4gIFwic2hhZG93XzVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJveC1zaGFkb3dcIjogXCI0cHggNHB4IDhweCAwcHggcmdiYSggMCwgMCwgMCwgMC4yIClcIlxuICAgIH1cbiAgfSxcbiAgXCJjbF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiY2xlYXJcIjogXCJsZWZ0XCJcbiAgICB9XG4gIH0sXG4gIFwiY3JfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImNsZWFyXCI6IFwicmlnaHRcIlxuICAgIH1cbiAgfSxcbiAgXCJjYl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiY2xlYXJcIjogXCJib3RoXCJcbiAgICB9XG4gIH0sXG4gIFwiY25fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImNsZWFyXCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcInRvcF8wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0b3BcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwibGVmdF8wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsZWZ0XCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcInJpZ2h0XzBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImJvdHRvbV8wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJib3R0b21cIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwidG9wXzFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRvcFwiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJsZWZ0XzFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxlZnRcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwicmlnaHRfMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicmlnaHRcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYm90dG9tXzFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvdHRvbVwiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ0b3BfMl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcImxlZnRfMl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibGVmdFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF8yX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJyaWdodFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJib3R0b21fMl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm90dG9tXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcInRvcF9fMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidG9wXCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJyaWdodF9fMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicmlnaHRcIjogXCItMXJlbVwiXG4gICAgfVxuICB9LFxuICBcImJvdHRvbV9fMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYm90dG9tXCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJsZWZ0X18xX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsZWZ0XCI6IFwiLTFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ0b3BfXzJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRvcFwiOiBcIi0ycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwicmlnaHRfXzJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInJpZ2h0XCI6IFwiLTJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJib3R0b21fXzJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImJvdHRvbVwiOiBcIi0ycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibGVmdF9fMl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibGVmdFwiOiBcIi0ycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiYWJzb2x1dGVfX2ZpbGxfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRvcFwiOiBcIjBcIixcbiAgICAgIFwicmlnaHRcIjogXCIwXCIsXG4gICAgICBcImJvdHRvbVwiOiBcIjBcIixcbiAgICAgIFwibGVmdFwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJkbl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJkaV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcImlubGluZVwiXG4gICAgfVxuICB9LFxuICBcImRiX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwiYmxvY2tcIlxuICAgIH1cbiAgfSxcbiAgXCJkaWJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIlxuICAgIH1cbiAgfSxcbiAgXCJkaXRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImRpc3BsYXlcIjogXCJpbmxpbmUtdGFibGVcIlxuICAgIH1cbiAgfSxcbiAgXCJkdF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlXCJcbiAgICB9XG4gIH0sXG4gIFwiZHRjX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJkaXNwbGF5XCI6IFwidGFibGUtY2VsbFwiXG4gICAgfVxuICB9LFxuICBcImR0X3Jvd19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLXJvd1wiXG4gICAgfVxuICB9LFxuICBcImR0X3Jvd19ncm91cF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLXJvdy1ncm91cFwiXG4gICAgfVxuICB9LFxuICBcImR0X2NvbHVtbl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLWNvbHVtblwiXG4gICAgfVxuICB9LFxuICBcImR0X2NvbHVtbl9ncm91cF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcInRhYmxlLWNvbHVtbi1ncm91cFwiXG4gICAgfVxuICB9LFxuICBcImR0X19maXhlZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGFibGUtbGF5b3V0XCI6IFwiZml4ZWRcIixcbiAgICAgIFwid2lkdGhcIjogXCIxMDAlXCJcbiAgICB9XG4gIH0sXG4gIFwiZmxleF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcImZsZXhcIlxuICAgIH1cbiAgfSxcbiAgXCJpbmxpbmVfZmxleF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZGlzcGxheVwiOiBcImlubGluZS1mbGV4XCJcbiAgICB9XG4gIH0sXG4gIFwiZmxleF9hdXRvX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbGV4XCI6IFwiMSAxIGF1dG9cIixcbiAgICAgIFwibWluLXdpZHRoXCI6IFwiMFwiLFxuICAgICAgXCJtaW4taGVpZ2h0XCI6IFwiMFwiXG4gICAgfVxuICB9LFxuICBcImZsZXhfbm9uZV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZmxleFwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X2NvbHVtbl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZmxleC1kaXJlY3Rpb25cIjogXCJjb2x1bW5cIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X3Jvd19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZmxleC1kaXJlY3Rpb25cIjogXCJyb3dcIlxuICAgIH1cbiAgfSxcbiAgXCJmbGV4X3dyYXBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZsZXgtd3JhcFwiOiBcIndyYXBcIlxuICAgIH1cbiAgfSxcbiAgXCJpdGVtc19zdGFydF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24taXRlbXNcIjogXCJmbGV4LXN0YXJ0XCJcbiAgICB9XG4gIH0sXG4gIFwiaXRlbXNfZW5kX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtZW5kXCJcbiAgICB9XG4gIH0sXG4gIFwiaXRlbXNfY2VudGVyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcImNlbnRlclwiXG4gICAgfVxuICB9LFxuICBcIml0ZW1zX2Jhc2VsaW5lX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1pdGVtc1wiOiBcImJhc2VsaW5lXCJcbiAgICB9XG4gIH0sXG4gIFwiaXRlbXNfc3RyZXRjaF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24taXRlbXNcIjogXCJzdHJldGNoXCJcbiAgICB9XG4gIH0sXG4gIFwic2VsZl9zdGFydF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tc2VsZlwiOiBcImZsZXgtc3RhcnRcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX2VuZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tc2VsZlwiOiBcImZsZXgtZW5kXCJcbiAgICB9XG4gIH0sXG4gIFwic2VsZl9jZW50ZXJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLXNlbGZcIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX2Jhc2VsaW5lX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJhbGlnbi1zZWxmXCI6IFwiYmFzZWxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJzZWxmX3N0cmV0Y2hfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLXNlbGZcIjogXCJzdHJldGNoXCJcbiAgICB9XG4gIH0sXG4gIFwianVzdGlmeV9zdGFydF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1zdGFydFwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfZW5kX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJqdXN0aWZ5LWNvbnRlbnRcIjogXCJmbGV4LWVuZFwiXG4gICAgfVxuICB9LFxuICBcImp1c3RpZnlfY2VudGVyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJqdXN0aWZ5LWNvbnRlbnRcIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJqdXN0aWZ5X2JldHdlZW5fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWJldHdlZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJqdXN0aWZ5X2Fyb3VuZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwianVzdGlmeS1jb250ZW50XCI6IFwic3BhY2UtYXJvdW5kXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9zdGFydF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tY29udGVudFwiOiBcImZsZXgtc3RhcnRcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X2VuZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiYWxpZ24tY29udGVudFwiOiBcImZsZXgtZW5kXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9jZW50ZXJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X2JldHdlZW5fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJzcGFjZS1iZXR3ZWVuXCJcbiAgICB9XG4gIH0sXG4gIFwiY29udGVudF9hcm91bmRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJzcGFjZS1hcm91bmRcIlxuICAgIH1cbiAgfSxcbiAgXCJjb250ZW50X3N0cmV0Y2hfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImFsaWduLWNvbnRlbnRcIjogXCJzdHJldGNoXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCIwXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCIxXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfMl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCIyXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfM19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCIzXCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI0XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI1XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfNl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI2XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfN19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI3XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfOF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI4XCJcbiAgICB9XG4gIH0sXG4gIFwib3JkZXJfbGFzdF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3JkZXJcIjogXCI5OTk5OVwiXG4gICAgfVxuICB9LFxuICBcImZsX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbG9hdFwiOiBcImxlZnRcIixcbiAgICAgIFwiX2Rpc3BsYXlcIjogXCJpbmxpbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJmcl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZmxvYXRcIjogXCJyaWdodFwiLFxuICAgICAgXCJfZGlzcGxheVwiOiBcImlubGluZVwiXG4gICAgfVxuICB9LFxuICBcImZuX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmbG9hdFwiOiBcIm5vbmVcIlxuICAgIH1cbiAgfSxcbiAgXCJpX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXN0eWxlXCI6IFwiaXRhbGljXCJcbiAgICB9XG4gIH0sXG4gIFwiZnNfbm9ybWFsX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXN0eWxlXCI6IFwibm9ybWFsXCJcbiAgICB9XG4gIH0sXG4gIFwibm9ybWFsX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIm5vcm1hbFwiXG4gICAgfVxuICB9LFxuICBcImJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiYm9sZFwiXG4gICAgfVxuICB9LFxuICBcImZ3MV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCIxMDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiMjAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnczX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjMwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3NF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCI0MDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiNTAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnc2X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjYwMFwiXG4gICAgfVxuICB9LFxuICBcImZ3N19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogXCI3MDBcIlxuICAgIH1cbiAgfSxcbiAgXCJmdzhfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IFwiODAwXCJcbiAgICB9XG4gIH0sXG4gIFwiZnc5X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXdlaWdodFwiOiBcIjkwMFwiXG4gICAgfVxuICB9LFxuICBcImgxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaDJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjJyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJoM19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcImg0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCI4cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaDVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjE2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiaF8yNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiMjUlXCJcbiAgICB9XG4gIH0sXG4gIFwiaF81MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNTAlXCJcbiAgICB9XG4gIH0sXG4gIFwiaF83NV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNzUlXCJcbiAgICB9XG4gIH0sXG4gIFwiaF8xMDBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJtaW5faF8xMDBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1pbi1oZWlnaHRcIjogXCIxMDAlXCJcbiAgICB9XG4gIH0sXG4gIFwidmhfMjVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImhlaWdodFwiOiBcIjI1dmhcIlxuICAgIH1cbiAgfSxcbiAgXCJ2aF81MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiNTB2aFwiXG4gICAgfVxuICB9LFxuICBcInZoXzc1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCI3NXZoXCJcbiAgICB9XG4gIH0sXG4gIFwidmhfMTAwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJoZWlnaHRcIjogXCIxMDB2aFwiXG4gICAgfVxuICB9LFxuICBcImhfYXV0b19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiYXV0b1wiXG4gICAgfVxuICB9LFxuICBcImhfaW5oZXJpdF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiaGVpZ2h0XCI6IFwiaW5oZXJpdFwiXG4gICAgfVxuICB9LFxuICBcInRyYWNrZWRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLjFlbVwiXG4gICAgfVxuICB9LFxuICBcInRyYWNrZWRfdGlnaHRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxldHRlci1zcGFjaW5nXCI6IFwiLS4wNWVtXCJcbiAgICB9XG4gIH0sXG4gIFwidHJhY2tlZF9tZWdhX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsZXR0ZXItc3BhY2luZ1wiOiBcIi4yNWVtXCJcbiAgICB9XG4gIH0sXG4gIFwibGhfc29saWRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImxpbmUtaGVpZ2h0XCI6IFwiMVwiXG4gICAgfVxuICB9LFxuICBcImxoX3RpdGxlX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsaW5lLWhlaWdodFwiOiBcIjEuMjVcIlxuICAgIH1cbiAgfSxcbiAgXCJsaF9jb3B5X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJsaW5lLWhlaWdodFwiOiBcIjEuNVwiXG4gICAgfVxuICB9LFxuICBcIm13XzEwMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMTAwJVwiXG4gICAgfVxuICB9LFxuICBcIm13MV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMXJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13Ml9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13M19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiNHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13NF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiOHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13NV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMTZyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjMycmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXc3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXgtd2lkdGhcIjogXCI0OHJlbVwiXG4gICAgfVxuICB9LFxuICBcIm13OF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiNjRyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtdzlfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjk2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwibXdfbm9uZV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwibm9uZVwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3Zpc2libGVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93XCI6IFwidmlzaWJsZVwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X2hpZGRlbl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3dcIjogXCJoaWRkZW5cIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd19zY3JvbGxfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93XCI6IFwic2Nyb2xsXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfYXV0b19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwib3ZlcmZsb3dcIjogXCJhdXRvXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfeF92aXNpYmxlX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy14XCI6IFwidmlzaWJsZVwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3hfaGlkZGVuX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy14XCI6IFwiaGlkZGVuXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfeF9zY3JvbGxfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXhcIjogXCJzY3JvbGxcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd194X2F1dG9fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXhcIjogXCJhdXRvXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfeV92aXNpYmxlX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy15XCI6IFwidmlzaWJsZVwiXG4gICAgfVxuICB9LFxuICBcIm92ZXJmbG93X3lfaGlkZGVuX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJvdmVyZmxvdy15XCI6IFwiaGlkZGVuXCJcbiAgICB9XG4gIH0sXG4gIFwib3ZlcmZsb3dfeV9zY3JvbGxfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXlcIjogXCJzY3JvbGxcIlxuICAgIH1cbiAgfSxcbiAgXCJvdmVyZmxvd195X2F1dG9fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm92ZXJmbG93LXlcIjogXCJhdXRvXCJcbiAgICB9XG4gIH0sXG4gIFwic3RhdGljX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcInN0YXRpY1wiXG4gICAgfVxuICB9LFxuICBcInJlbGF0aXZlX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCJcbiAgICB9XG4gIH0sXG4gIFwiYWJzb2x1dGVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIlxuICAgIH1cbiAgfSxcbiAgXCJmaXhlZF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicG9zaXRpb25cIjogXCJmaXhlZFwiXG4gICAgfVxuICB9LFxuICBcInJvdGF0ZV80NV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDQ1ZGVnKVwiXG4gICAgfVxuICB9LFxuICBcInJvdGF0ZV85MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDkwZGVnKVwiXG4gICAgfVxuICB9LFxuICBcInJvdGF0ZV8xMzVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgxMzVkZWcpXCJcbiAgICB9XG4gIH0sXG4gIFwicm90YXRlXzE4MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDE4MGRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJyb3RhdGVfMjI1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoMjI1ZGVnKVwiXG4gICAgfVxuICB9LFxuICBcInJvdGF0ZV8yNzBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRyYW5zZm9ybVwiOiBcInJvdGF0ZSgyNzBkZWcpXCJcbiAgICB9XG4gIH0sXG4gIFwicm90YXRlXzMxNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKDMxNWRlZylcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicGExX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBhM19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZ1wiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBhNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZ1wiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGE1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYTZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmdcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBhN19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZ1wiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGwwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicGwxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInBsMl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInBsNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwbDVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGw2X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBsN19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicHIxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInByM19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcInByNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHI1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwcjZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInByN19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGIwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwYjNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicGI0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGI1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGI2X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGI3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdDNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ2X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHQ3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHYwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwicHYxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCIsXG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcInB2M19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInB2NV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicHY2X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwdjdfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcInBoMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwicGgyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwicGg0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJwaDVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBhZGRpbmctbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCIsXG4gICAgICBcInBhZGRpbmctcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcInBoNl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwicGFkZGluZy1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwicGFkZGluZy1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwicGg3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJwYWRkaW5nLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWEyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm1hM19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibWE0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1hNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYTZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpblwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWE3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW5cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1sMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwibWwxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWwyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWwzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiXG4gICAgfVxuICB9LFxuICBcIm1sNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1sNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1sNl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1sN19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWxlZnRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1yMF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm1yMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXIzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibXI1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1yNl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtcjdfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWIwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiXG4gICAgfVxuICB9LFxuICBcIm1iMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWIyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm1iNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibWI2X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtYjdfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm10MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctbm9uZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDFfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLXNtYWxsKVwiXG4gICAgfVxuICB9LFxuICBcIm10Ml9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXQzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCJcbiAgICB9XG4gIH0sXG4gIFwibXQ0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdDVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiXG4gICAgfVxuICB9LFxuICBcIm10Nl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtZXh0cmEtbGFyZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwibXQ3X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwibXYxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1zbWFsbClcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXYyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1zbWFsbClcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibXYzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwidmFyKC0tc3BhY2luZy1tZWRpdW0pXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtdjdfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi10b3BcIjogXCJ2YXIoLS1zcGFjaW5nLWV4dHJhLWV4dHJhLWV4dHJhLWxhcmdlKVwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1ub25lKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW5vbmUpXCJcbiAgICB9XG4gIH0sXG4gIFwibWgxX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctZXh0cmEtc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWgyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCIsXG4gICAgICBcIm1hcmdpbi1yaWdodFwiOiBcInZhcigtLXNwYWNpbmctc21hbGwpXCJcbiAgICB9XG4gIH0sXG4gIFwibWgzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJtYXJnaW4tbGVmdFwiOiBcInZhcigtLXNwYWNpbmctbWVkaXVtKVwiLFxuICAgICAgXCJtYXJnaW4tcmlnaHRcIjogXCJ2YXIoLS1zcGFjaW5nLW1lZGl1bSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDRfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDZfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJtaDdfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1hcmdpbi1sZWZ0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIixcbiAgICAgIFwibWFyZ2luLXJpZ2h0XCI6IFwidmFyKC0tc3BhY2luZy1leHRyYS1leHRyYS1leHRyYS1sYXJnZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJ0bF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1hbGlnblwiOiBcImxlZnRcIlxuICAgIH1cbiAgfSxcbiAgXCJ0cl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1hbGlnblwiOiBcInJpZ2h0XCJcbiAgICB9XG4gIH0sXG4gIFwidGNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRleHQtYWxpZ25cIjogXCJjZW50ZXJcIlxuICAgIH1cbiAgfSxcbiAgXCJzdHJpa2VfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRleHQtZGVjb3JhdGlvblwiOiBcImxpbmUtdGhyb3VnaFwiXG4gICAgfVxuICB9LFxuICBcInVuZGVybGluZV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwidW5kZXJsaW5lXCJcbiAgICB9XG4gIH0sXG4gIFwibm9fdW5kZXJsaW5lX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LWRlY29yYXRpb25cIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwidHRjX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LXRyYW5zZm9ybVwiOiBcImNhcGl0YWxpemVcIlxuICAgIH1cbiAgfSxcbiAgXCJ0dGxfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInRleHQtdHJhbnNmb3JtXCI6IFwibG93ZXJjYXNlXCJcbiAgICB9XG4gIH0sXG4gIFwidHR1X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ0ZXh0LXRyYW5zZm9ybVwiOiBcInVwcGVyY2FzZVwiXG4gICAgfVxuICB9LFxuICBcInR0bl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC10cmFuc2Zvcm1cIjogXCJub25lXCJcbiAgICB9XG4gIH0sXG4gIFwiZl82X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI2cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZl9oZWFkbGluZV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiNnJlbVwiXG4gICAgfVxuICB9LFxuICBcImZfNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImZfc3ViaGVhZGxpbmVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjVyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmMV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiM3JlbVwiXG4gICAgfVxuICB9LFxuICBcImYyX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCIyLjI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZjNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjEuNXJlbVwiXG4gICAgfVxuICB9LFxuICBcImY0X2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCIxLjI1cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwiZjVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjFyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJmNl9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiLjg3NXJlbVwiXG4gICAgfVxuICB9LFxuICBcIm1lYXN1cmVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjMwZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtZWFzdXJlX3dpZGVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIm1heC13aWR0aFwiOiBcIjM0ZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJtZWFzdXJlX25hcnJvd19sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwibWF4LXdpZHRoXCI6IFwiMjBlbVwiXG4gICAgfVxuICB9LFxuICBcImluZGVudF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidGV4dC1pbmRlbnRcIjogXCIxZW1cIixcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcIjBcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcIjBcIlxuICAgIH1cbiAgfSxcbiAgXCJzbWFsbF9jYXBzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJmb250LXZhcmlhbnRcIjogXCJzbWFsbC1jYXBzXCJcbiAgICB9XG4gIH0sXG4gIFwidHJ1bmNhdGVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndoaXRlLXNwYWNlXCI6IFwibm93cmFwXCIsXG4gICAgICBcIm92ZXJmbG93XCI6IFwiaGlkZGVuXCIsXG4gICAgICBcInRleHQtb3ZlcmZsb3dcIjogXCJlbGxpcHNpc1wiXG4gICAgfVxuICB9LFxuICBcInZfYmFzZV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwidmVydGljYWwtYWxpZ25cIjogXCJiYXNlbGluZVwiXG4gICAgfVxuICB9LFxuICBcInZfbWlkX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcIm1pZGRsZVwiXG4gICAgfVxuICB9LFxuICBcInZfdG9wX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcInRvcFwiXG4gICAgfVxuICB9LFxuICBcInZfYnRtX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ2ZXJ0aWNhbC1hbGlnblwiOiBcImJvdHRvbVwiXG4gICAgfVxuICB9LFxuICBcImNsaXBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcInBvc2l0aW9uXCI6IFwiZml4ZWQgIWltcG9ydGFudFwiLFxuICAgICAgXCJfcG9zaXRpb25cIjogXCJhYnNvbHV0ZSAhaW1wb3J0YW50XCIsXG4gICAgICBcImNsaXBcIjogXCJyZWN0KDFweCwgMXB4LCAxcHgsIDFweClcIlxuICAgIH1cbiAgfSxcbiAgXCJ3c19ub3JtYWxfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndoaXRlLXNwYWNlXCI6IFwibm9ybWFsXCJcbiAgICB9XG4gIH0sXG4gIFwibm93cmFwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aGl0ZS1zcGFjZVwiOiBcIm5vd3JhcFwiXG4gICAgfVxuICB9LFxuICBcInByZV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2hpdGUtc3BhY2VcIjogXCJwcmVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3MV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCIxcmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidzJfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMnJlbVwiXG4gICAgfVxuICB9LFxuICBcInczX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjRyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ3NF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCI4cmVtXCJcbiAgICB9XG4gIH0sXG4gIFwidzVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMTZyZW1cIlxuICAgIH1cbiAgfSxcbiAgXCJ3XzEwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjEwJVwiXG4gICAgfVxuICB9LFxuICBcIndfMjBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMjAlXCJcbiAgICB9XG4gIH0sXG4gIFwid18yNV9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCIyNSVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3XzMwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjMwJVwiXG4gICAgfVxuICB9LFxuICBcIndfMzNfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiMzMlXCJcbiAgICB9XG4gIH0sXG4gIFwid18zNF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCIzNCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3XzQwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjQwJVwiXG4gICAgfVxuICB9LFxuICBcIndfNTBfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNTAlXCJcbiAgICB9XG4gIH0sXG4gIFwid182MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCI2MCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3XzcwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjcwJVwiXG4gICAgfVxuICB9LFxuICBcIndfNzVfbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiNzUlXCJcbiAgICB9XG4gIH0sXG4gIFwid184MF9sXCI6IHtcbiAgICBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwZW0pXCI6IHtcbiAgICAgIFwid2lkdGhcIjogXCI4MCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3XzkwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjkwJVwiXG4gICAgfVxuICB9LFxuICBcIndfMTAwX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcIjEwMCVcIlxuICAgIH1cbiAgfSxcbiAgXCJ3X3RoaXJkX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcImNhbGMoMTAwJSAvIDMpXCJcbiAgICB9XG4gIH0sXG4gIFwid190d29fdGhpcmRzX2xcIjoge1xuICAgIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjBlbSlcIjoge1xuICAgICAgXCJ3aWR0aFwiOiBcImNhbGMoMTAwJSAvIDEuNSlcIlxuICAgIH1cbiAgfSxcbiAgXCJ3X2F1dG9fbFwiOiB7XG4gICAgXCJAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MGVtKVwiOiB7XG4gICAgICBcIndpZHRoXCI6IFwiYXV0b1wiXG4gICAgfVxuICB9LFxuICBcIjpob3ZlclwiOiB7XG4gICAgXCJ0cmFuc2l0aW9uXCI6IFwiY29sb3IgLjE1cyBlYXNlLWluXCJcbiAgfSxcbiAgXCJ1bmRlcmxpbmVfaG92ZXJcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwidGV4dC1kZWNvcmF0aW9uXCI6IFwidW5kZXJsaW5lXCJcbiAgICB9XG4gIH0sXG4gIFwicG9pbnRlclwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjdXJzb3JcIjogXCJwb2ludGVyXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmxhY2tcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1ibGFjaylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9uZWFyX2JsYWNrXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tbmVhci1ibGFjaylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9kYXJrX2dyYXlcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLWdyYXkpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfbWlkX2dyYXlcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1taWQtZ3JheSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9ncmF5XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tZ3JheSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9zaWx2ZXJcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1zaWx2ZXIpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRfc2lsdmVyXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtc2lsdmVyKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX21vb25fZ3JheVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLW1vb24tZ3JheSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9saWdodF9ncmF5XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JheSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9uZWFyX3doaXRlXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tbmVhci13aGl0ZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl93aGl0ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLXdoaXRlKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2JsYWNrXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibGFjaylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ19uZWFyX2JsYWNrXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1uZWFyLWJsYWNrKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2RhcmtfZ3JheVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tZGFyay1ncmF5KVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX21pZF9ncmF5XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1taWQtZ3JheSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ19ncmF5XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ncmF5KVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX3NpbHZlclwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tc2lsdmVyKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2xpZ2h0X3NpbHZlclwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtc2lsdmVyKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX21vb25fZ3JheVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbW9vbi1ncmF5KVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2xpZ2h0X2dyYXlcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LWdyYXkpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfbmVhcl93aGl0ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbmVhci13aGl0ZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ193aGl0ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0td2hpdGUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfdHJhbnNwYXJlbnRcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXRyYW5zcGFyZW50KVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2RhcmtfcmVkXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tZGFyay1yZWQpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfcmVkXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tcmVkKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2xpZ2h0X3JlZFwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LXJlZClcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9vcmFuZ2VcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1vcmFuZ2UpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfZ29sZFwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWdvbGQpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfeWVsbG93XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0teWVsbG93KVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2xpZ2h0X3llbGxvd1wiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LXllbGxvdylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9wdXJwbGVcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1wdXJwbGUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRfcHVycGxlXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcHVycGxlKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2RhcmtfcGlua1wiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWRhcmstcGluaylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9ob3RfcGlua1wiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWhvdC1waW5rKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX3BpbmtcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1waW5rKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2xpZ2h0X3BpbmtcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC1waW5rKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2RhcmtfZ3JlZW5cIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLWdyZWVuKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2dyZWVuXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tZ3JlZW4pXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRfZ3JlZW5cIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1saWdodC1ncmVlbilcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9uYXZ5XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImNvbG9yXCI6IFwidmFyKC0tbmF2eSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9kYXJrX2JsdWVcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS1kYXJrLWJsdWUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmx1ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWJsdWUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRfYmx1ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0LWJsdWUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfbGlnaHRlc3RfYmx1ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLWxpZ2h0ZXN0LWJsdWUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfd2FzaGVkX2JsdWVcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtYmx1ZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl93YXNoZWRfZ3JlZW5cIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtZ3JlZW4pXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfd2FzaGVkX3llbGxvd1wiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLXdhc2hlZC15ZWxsb3cpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfd2FzaGVkX3JlZFwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJjb2xvclwiOiBcInZhcigtLXdhc2hlZC1yZWQpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfZGFya19yZWRcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWRhcmstcmVkKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX3JlZFwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tcmVkKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2xpZ2h0X3JlZFwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcmVkKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX29yYW5nZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tb3JhbmdlKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2dvbGRcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWdvbGQpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfeWVsbG93XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS15ZWxsb3cpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfeWVsbG93XCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1saWdodC15ZWxsb3cpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfcHVycGxlXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1wdXJwbGUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfcHVycGxlXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1saWdodC1wdXJwbGUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfZGFya19waW5rXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1kYXJrLXBpbmspXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfaG90X3BpbmtcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWhvdC1waW5rKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX3BpbmtcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLXBpbmspXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRfcGlua1wiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtcGluaylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ19kYXJrX2dyZWVuXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1kYXJrLWdyZWVuKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2dyZWVuXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ncmVlbilcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ19saWdodF9ncmVlblwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHQtZ3JlZW4pXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfbmF2eVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbmF2eSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ19kYXJrX2JsdWVcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWRhcmstYmx1ZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ19ibHVlXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS1ibHVlKVwiXG4gICAgfVxuICB9LFxuICBcImhvdmVyX2JnX2xpZ2h0X2JsdWVcIjoge1xuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiOiBcInZhcigtLWxpZ2h0LWJsdWUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfbGlnaHRlc3RfYmx1ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0tbGlnaHRlc3QtYmx1ZSlcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ193YXNoZWRfYmx1ZVwiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0td2FzaGVkLWJsdWUpXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfd2FzaGVkX2dyZWVuXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtZ3JlZW4pXCJcbiAgICB9XG4gIH0sXG4gIFwiaG92ZXJfYmdfd2FzaGVkX3llbGxvd1wiOiB7XG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwidmFyKC0td2FzaGVkLXllbGxvdylcIlxuICAgIH1cbiAgfSxcbiAgXCJob3Zlcl9iZ193YXNoZWRfcmVkXCI6IHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBcImJhY2tncm91bmQtY29sb3JcIjogXCJ2YXIoLS13YXNoZWQtcmVkKVwiXG4gICAgfVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdGFjaHlvbnMtanMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDU1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDUiLCJpbXBvcnQgUGFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BhZ2UnO1xuaW1wb3J0IENhbGN1bGF0b3IgZnJvbSAnLi4vY29tcG9uZW50cy9DYWxjdWxhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKFxuICA8UGFnZT5cbiAgICA8Q2FsY3VsYXRvciAvPlxuICA8L1BhZ2U+XG4pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9wYWdlcz9lbnRyeSIsImltcG9ydCB0IGZyb20gJ3RhY2h5b25zLWpzJztcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgUGFnZToge1xuICAgIC4uLnQuZmxleCxcbiAgICAuLi50Lmp1c3RpZnlfY2VudGVyLFxuICAgIC4uLnQuaXRlbXNfY2VudGVyLFxuICAgIGZvbnRGYW1pbHk6ICdPcGVuIFNhbnMnLFxuICAgIHdpZHRoOiAnMTAwdncnLFxuICAgIGhlaWdodDogJzEwMHZoJyxcbiAgfSxcbiAgQm9keToge1xuICAgIG1hcmdpbjogMCxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCAoIHByb3BzICkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cIlBhZ2VcIiBzdHlsZT17IHN0eWxlcy5QYWdlIH0+XG4gICAgPEhlYWQ+XG4gICAgICA8Ym9keSBzdHlsZT17IHN0eWxlcy5Cb2R5IH0gLz5cbiAgICAgIDxsaW5rIHR5cGU9XCJ0ZXh0L2Nzc1wiIG1lZGlhPVwic2NyZWVuXCIgaHJlZj1cIi9zdGF0aWMvdGFjaHlvbnMuY3NzXCIgcmVsPVwic3R5bGVzaGVldFwiIC8+XG4gICAgPC9IZWFkPlxuICAgIHsgcHJvcHMuY2hpbGRyZW4gfVxuICA8L2Rpdj5cbilcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvUGFnZS9pbmRleC5qcyIsImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFRvdGFsIGZyb20gJy4uL1RvdGFsJztcbmltcG9ydCBUb3RhbHNIaXN0b3J5IGZyb20gJy4uL1RvdGFsc0hpc3RvcnknO1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4uL0tleWJvYXJkJztcbmltcG9ydCB0IGZyb20gJ3RhY2h5b25zLWpzJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBDYWxjdWxhdG9yOiB7XG4gICAgLi4udC5mbGV4LFxuICAgIC4uLnQuZmxleF9jb2x1bW4sXG4gICAgLi4udC5icjQsXG4gICAgLi4udC5zaGFkb3dfMixcbiAgICAuLi50Lm92ZXJmbG93X2hpZGRlbixcbiAgICBoZWlnaHQ6IDQyMCxcbiAgICB3aWR0aDogNDUwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNGRkYnLFxuICAgIGJvcmRlcjogJzFweCAjQ0NDIHNvbGlkJyxcbiAgfSxcbiAgTWFpbjoge1xuICAgIC4uLnQuZmxleCxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWxjdWxhdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBjb25zdHJ1Y3RvciggcHJvcHMgKSB7XG4gICAgc3VwZXIoIHByb3BzICk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRWYWx1ZTogMCxcbiAgICAgIHNhdmVkVmFsdWU6IDAsXG4gICAgICBsYXN0VmFsdWU6IDAsXG4gICAgICBvcGVyYXRvcjogbnVsbCxcbiAgICAgIG9wZXJhdGVkOiBmYWxzZSxcbiAgICAgIHZhbHVlc0hpc3Rvcnk6IFtdLFxuICAgICAgc2hvd0hpc3Rvcnk6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIG51bWJlckNsaWNrID0gKCBlLCBwcm9wcyApID0+IHtcbiAgICBpZiggdGhpcy5zdGF0ZS5jdXJyZW50VmFsdWUgPT0gMCApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50VmFsdWU6IGAkeyBwcm9wcy5sYWJlbCB9YFxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRWYWx1ZTogYCR7IHRoaXMuc3RhdGUuY3VycmVudFZhbHVlIH0keyBwcm9wcy5sYWJlbCB9YFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvcGVyYXRvckNsaWNrID0gKCBlLCBwcm9wcyApID0+IHtcbiAgICBpZiggcHJvcHMubGFiZWwgIT0gJz0nICkge1xuICAgICAgaWYoIHRoaXMuc3RhdGUub3BlcmF0b3IgPT09IG51bGwgKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZXJhdG9yOiBwcm9wcy5sYWJlbCxcbiAgICAgICAgICBsYXN0VmFsdWU6IHRoaXMuc3RhdGUuY3VycmVudFZhbHVlLFxuICAgICAgICAgIGN1cnJlbnRWYWx1ZTogMCxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHZhbHVlLCB2YWx1ZXNIaXN0b3J5O1xuXG4gICAgICBzd2l0Y2goIHRoaXMuc3RhdGUub3BlcmF0b3IgKSB7XG4gICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgIHZhbHVlID0gTnVtYmVyKCB0aGlzLnN0YXRlLmN1cnJlbnRWYWx1ZSApICsgTnVtYmVyKCB0aGlzLnN0YXRlLmxhc3RWYWx1ZSApO1xuICAgICAgICAgIHZhbHVlc0hpc3RvcnkgPSBPYmplY3QuYXNzaWduKCBbXSwgdGhpcy5zdGF0ZS52YWx1ZXNIaXN0b3J5ICk7XG4gICAgICAgICAgdmFsdWVzSGlzdG9yeS51bnNoaWZ0KCB2YWx1ZSApO1xuXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgge1xuICAgICAgICAgICAgY3VycmVudFZhbHVlOiAwLFxuICAgICAgICAgICAgbGFzdFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBudWxsLFxuICAgICAgICAgICAgdmFsdWVzSGlzdG9yeTogdmFsdWVzSGlzdG9yeVxuICAgICAgICAgIH0gKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICfDtyc6XG4gICAgICAgICAgdmFsdWUgPSBOdW1iZXIoIHRoaXMuc3RhdGUubGFzdFZhbHVlICkgLyBOdW1iZXIoIHRoaXMuc3RhdGUuY3VycmVudFZhbHVlICk7XG4gICAgICAgICAgdmFsdWVzSGlzdG9yeSA9IE9iamVjdC5hc3NpZ24oIFtdLCB0aGlzLnN0YXRlLnZhbHVlc0hpc3RvcnkgKTtcbiAgICAgICAgICB2YWx1ZXNIaXN0b3J5LnVuc2hpZnQoIHZhbHVlICk7XG5cbiAgICAgICAgICB0aGlzLnNldFN0YXRlKCB7XG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IDAsXG4gICAgICAgICAgICBsYXN0VmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgb3BlcmF0b3I6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZXNIaXN0b3J5OiB2YWx1ZXNIaXN0b3J5XG4gICAgICAgICAgfSApO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgIHZhbHVlID0gTnVtYmVyKCB0aGlzLnN0YXRlLmxhc3RWYWx1ZSApICogTnVtYmVyKCB0aGlzLnN0YXRlLmN1cnJlbnRWYWx1ZSApO1xuICAgICAgICAgIHZhbHVlc0hpc3RvcnkgPSBPYmplY3QuYXNzaWduKCBbXSwgdGhpcy5zdGF0ZS52YWx1ZXNIaXN0b3J5ICk7XG4gICAgICAgICAgdmFsdWVzSGlzdG9yeS51bnNoaWZ0KCB2YWx1ZSApO1xuXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgge1xuICAgICAgICAgICAgY3VycmVudFZhbHVlOiAwLFxuICAgICAgICAgICAgbGFzdFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBudWxsLFxuICAgICAgICAgICAgdmFsdWVzSGlzdG9yeTogdmFsdWVzSGlzdG9yeVxuICAgICAgICAgIH0gKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICB2YWx1ZSA9IE51bWJlciggdGhpcy5zdGF0ZS5sYXN0VmFsdWUgKSAtIE51bWJlciggdGhpcy5zdGF0ZS5jdXJyZW50VmFsdWUgKTtcbiAgICAgICAgICB2YWx1ZXNIaXN0b3J5ID0gT2JqZWN0LmFzc2lnbiggW10sIHRoaXMuc3RhdGUudmFsdWVzSGlzdG9yeSApO1xuICAgICAgICAgIHZhbHVlc0hpc3RvcnkudW5zaGlmdCggdmFsdWUgKTtcblxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZTogMCxcbiAgICAgICAgICAgIGxhc3RWYWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBvcGVyYXRvcjogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlc0hpc3Rvcnk6IHZhbHVlc0hpc3RvcnlcbiAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJDYWxjdWxhdG9yXCIgc3R5bGU9eyBzdHlsZXMuQ2FsY3VsYXRvciB9PlxuXG4gICAgICAgIDxUb3RhbFxuICAgICAgICAgIGhhc1Rvb2xiYXJcbiAgICAgICAgICBzaG93SGlzdG9yeT17IHRoaXMuc3RhdGUuc2hvd0hpc3RvcnkgfVxuICAgICAgICAgIGxhc3RWYWx1ZT17IHRoaXMuc3RhdGUubGFzdFZhbHVlIH1cbiAgICAgICAgICB2YWx1ZT17IHRoaXMuc3RhdGUuY3VycmVudFZhbHVlIH1cbiAgICAgICAgICBvcGVyYXRvcj17IHRoaXMuc3RhdGUub3BlcmF0b3IgfSAvPlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiTWFpblwiIHN0eWxlPXsgc3R5bGVzLk1haW4gfT5cbiAgICAgICAgICA8VG90YWxzSGlzdG9yeVxuICAgICAgICAgICAgc2hvdz17IHRoaXMuc3RhdGUuc2hvd0hpc3RvcnkgfVxuICAgICAgICAgICAgdmFsdWVzPXsgdGhpcy5zdGF0ZS52YWx1ZXNIaXN0b3J5IH0gLz5cblxuICAgICAgICAgIDxLZXlib2FyZFxuICAgICAgICAgICAgbnVtYmVyQ2xpY2s9eyB0aGlzLm51bWJlckNsaWNrIH1cbiAgICAgICAgICAgIG9wZXJhdG9yQ2xpY2s9eyB0aGlzLm9wZXJhdG9yQ2xpY2sgfSAvPlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tcG9uZW50cy9DYWxjdWxhdG9yL2luZGV4LmpzIiwiaW1wb3J0IHQgZnJvbSAndGFjaHlvbnMtanMnO1xuaW1wb3J0IE51bWJlckZvcm1hdCBmcm9tICdyZWFjdC1udW1iZXItZm9ybWF0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG90YWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBwcm9wVHlwZXM6IHtcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBsYXN0VmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgc2Vjb25kYXJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb21wYWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGNvbnN0IHN0eWxlcyA9IHtcbiAgICAgIFRvdGFsOiB7XG4gICAgICAgIC4uLnQucGEzLFxuICAgICAgICAuLi50LnRyLFxuICAgICAgICAuLi50LmYxLFxuICAgICAgICAuLi50LmIsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCAjQ0NDIHNvbGlkJyxcbiAgICAgICAgY29sb3I6ICcjNzM4RDk5JyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI0Y3RjdGNycsXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJUb3RhbFwiIHN0eWxlPXsgc3R5bGVzLlRvdGFsIH0+eyB0aGlzLnByb3BzLnZhbHVlID09PSAwID8gPE51bWJlckZvcm1hdCB0aG91c2FuZFNlcGFyYXRvciB2YWx1ZT17dGhpcy5wcm9wcy5sYXN0VmFsdWV9IGRpc3BsYXlUeXBlPVwidGV4dFwiIC8+IDogPE51bWJlckZvcm1hdCB0aG91c2FuZFNlcGFyYXRvciBkaXNwbGF5VHlwZT1cInRleHRcIiB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZSB9IC8+IH08L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblRvdGFsLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFsdWU6IDAsXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb21wb25lbnRzL1RvdGFsL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcKlxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVMZWFkaW5nWmVybyhudW1TdHIpIHtcbiAgLy9yZW1vdmUgbGVhZGluZyB6ZXJvc1xuICByZXR1cm4gbnVtU3RyLnJlcGxhY2UoL14wKy8sICcnKSB8fCAnMCc7XG59XG5cbi8qKlxuICogbGltaXQgZGVjaW1hbCBudW1iZXJzIHRvIGdpdmVuIHByZWNpc2lvblxuICogTm90IHVzZWQgLmZpeGVkVG8gYmVjYXVzZSB0aGF0IHdpbGwgYnJlYWsgd2l0aCBiaWcgbnVtYmVyc1xuICovXG5mdW5jdGlvbiBsaW1pdFRvUHJlY2lzaW9uKG51bVN0ciwgcHJlY2lzaW9uKSB7XG4gIHZhciBzdHIgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gcHJlY2lzaW9uIC0gMTsgaSsrKSB7XG4gICAgc3RyICs9IG51bVN0cltpXSB8fCAnMCc7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyByZXF1aXJlZCB0byByb3VuZCBwcm9wIHZhbHVlIHRvIGdpdmVuIHByZWNpc2lvbi5cbiAqIE5vdCB1c2VkIC5yb3VuZCBvciAuZml4ZWRUbyBiZWNhdXNlIHRoYXQgd2lsbCBicmVhayB3aXRoIGJpZyBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHJvdW5kVG9QcmVjaXNpb24obnVtU3RyLCBwcmVjaXNpb24pIHtcbiAgdmFyIG51bWJlclBhcnRzID0gbnVtU3RyLnNwbGl0KCcuJyk7XG4gIHZhciByb3VuZGVkRGVjaW1hbFBhcnRzID0gcGFyc2VGbG9hdCgnMC4nICsgKG51bWJlclBhcnRzWzFdIHx8ICcwJykpLnRvRml4ZWQocHJlY2lzaW9uKS5zcGxpdCgnLicpO1xuICB2YXIgaW50UGFydCA9IG51bWJlclBhcnRzWzBdLnNwbGl0KCcnKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChyb3VuZGVkU3RyLCBjdXJyZW50LCBpZHgpIHtcbiAgICBpZiAocm91bmRlZFN0ci5sZW5ndGggPiBpZHgpIHtcbiAgICAgIHJldHVybiAoTnVtYmVyKHJvdW5kZWRTdHJbMF0pICsgTnVtYmVyKGN1cnJlbnQpKS50b1N0cmluZygpICsgcm91bmRlZFN0ci5zdWJzdHJpbmcoMSwgcm91bmRlZFN0ci5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudCArIHJvdW5kZWRTdHI7XG4gIH0sIHJvdW5kZWREZWNpbWFsUGFydHNbMF0pO1xuXG4gIHZhciBkZWNpbWFsUGFydCA9IHJvdW5kZWREZWNpbWFsUGFydHNbMV07XG5cbiAgcmV0dXJuIGludFBhcnQgKyAoZGVjaW1hbFBhcnQgPyAnLicgKyBkZWNpbWFsUGFydCA6ICcnKTtcbn1cblxuZnVuY3Rpb24gb21pdChvYmosIGtleU1hcHMpIHtcbiAgdmFyIGZpbHRlcmVkT2JqID0ge307XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFrZXlNYXBzW2tleV0pIGZpbHRlcmVkT2JqW2tleV0gPSBvYmpba2V5XTtcbiAgfSk7XG4gIHJldHVybiBmaWx0ZXJlZE9iajtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdGhvdXNhbmRTZXBhcmF0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbdHJ1ZV0pXSksXG4gIGRlY2ltYWxTZXBhcmF0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBkZWNpbWFsUHJlY2lzaW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgZGlzcGxheVR5cGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydpbnB1dCcsICd0ZXh0J10pLFxuICBwcmVmaXg6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzdWZmaXg6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBmb3JtYXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXSksXG4gIG1hc2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ10pLFxuICBjdXN0b21JbnB1dDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBhbGxvd05lZ2F0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbk1vdXNlVXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgdHlwZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3RleHQnLCAndGVsJ10pLFxuICBpc0FsbG93ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzcGxheVR5cGU6ICdpbnB1dCcsXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcuJyxcbiAgcHJlZml4OiAnJyxcbiAgc3VmZml4OiAnJyxcbiAgYWxsb3dOZWdhdGl2ZTogdHJ1ZSxcbiAgdHlwZTogJ3RleHQnLFxuICBvbkNoYW5nZTogbm9vcCxcbiAgb25LZXlEb3duOiBub29wLFxuICBvbk1vdXNlVXA6IG5vb3AsXG4gIGlzQWxsb3dlZDogZnVuY3Rpb24gaXNBbGxvd2VkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG52YXIgTnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE51bWJlckZvcm1hdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTnVtYmVyRm9ybWF0KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE51bWJlckZvcm1hdCk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTnVtYmVyRm9ybWF0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTnVtYmVyRm9ybWF0KSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgdmFyIHZhbHVlID0gX3RoaXMub3B0aW1pemVWYWx1ZVByb3AocHJvcHMpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmFsdWU6IF90aGlzLmZvcm1hdElucHV0KHZhbHVlKS5mb3JtYXR0ZWRWYWx1ZVxuICAgIH07XG4gICAgX3RoaXMub25DaGFuZ2UgPSBfdGhpcy5vbkNoYW5nZS5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy5vbktleURvd24gPSBfdGhpcy5vbktleURvd24uYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25Nb3VzZVVwID0gX3RoaXMub25Nb3VzZVVwLmJpbmQoX3RoaXMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOdW1iZXJGb3JtYXQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlSWZSZXF1aXJlZChwcmV2UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlVmFsdWVJZlJlcXVpcmVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlVmFsdWVJZlJlcXVpcmVkKHByZXZQcm9wcykge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cblxuICAgICAgaWYgKHByZXZQcm9wcyAhPT0gcHJvcHMpIHtcbiAgICAgICAgdmFyIHN0YXRlVmFsdWUgPSBzdGF0ZS52YWx1ZTtcblxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLm9wdGltaXplVmFsdWVQcm9wKHByb3BzKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gc3RhdGVWYWx1ZTtcblxuICAgICAgICB2YXIgX2Zvcm1hdElucHV0ID0gdGhpcy5mb3JtYXRJbnB1dCh2YWx1ZSksXG4gICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IF9mb3JtYXRJbnB1dC5mb3JtYXR0ZWRWYWx1ZTtcblxuICAgICAgICBpZiAoZm9ybWF0dGVkVmFsdWUgIT09IHN0YXRlVmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBmb3JtYXR0ZWRWYWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RmxvYXRTdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGbG9hdFN0cmluZyhudW0sIHByb3BzKSB7XG4gICAgICBwcm9wcyA9IHByb3BzIHx8IHRoaXMucHJvcHM7XG5cbiAgICAgIHZhciBfZ2V0U2VwYXJhdG9ycyA9IHRoaXMuZ2V0U2VwYXJhdG9ycyhwcm9wcyksXG4gICAgICAgICAgZGVjaW1hbFNlcGFyYXRvciA9IF9nZXRTZXBhcmF0b3JzLmRlY2ltYWxTZXBhcmF0b3IsXG4gICAgICAgICAgdGhvdXNhbmRTZXBhcmF0b3IgPSBfZ2V0U2VwYXJhdG9ycy50aG91c2FuZFNlcGFyYXRvcjtcblxuICAgICAgcmV0dXJuIChudW0gfHwgJycpLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAodGhvdXNhbmRTZXBhcmF0b3IgfHwgJycpLCAnZycpLCAnJykucmVwbGFjZShkZWNpbWFsU2VwYXJhdG9yLCAnLicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEZsb2F0VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGbG9hdFZhbHVlKG51bSwgcHJvcHMpIHtcbiAgICAgIHByb3BzID0gcHJvcHMgfHwgdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuZ2V0RmxvYXRTdHJpbmcobnVtLCBwcm9wcykpIHx8IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3B0aW1pemVWYWx1ZVByb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcHRpbWl6ZVZhbHVlUHJvcChwcm9wcykge1xuICAgICAgdmFyIF9nZXRTZXBhcmF0b3JzMiA9IHRoaXMuZ2V0U2VwYXJhdG9ycyhwcm9wcyksXG4gICAgICAgICAgZGVjaW1hbFNlcGFyYXRvciA9IF9nZXRTZXBhcmF0b3JzMi5kZWNpbWFsU2VwYXJhdG9yO1xuXG4gICAgICB2YXIgZGVjaW1hbFByZWNpc2lvbiA9IHByb3BzLmRlY2ltYWxQcmVjaXNpb24sXG4gICAgICAgICAgZm9ybWF0ID0gcHJvcHMuZm9ybWF0O1xuICAgICAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG5cblxuICAgICAgaWYgKGZvcm1hdCB8fCAhKHZhbHVlIHx8IHZhbHVlID09PSAwKSkgcmV0dXJuIHZhbHVlO1xuXG4gICAgICB2YXIgaXNOdW1iZXIgPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuXG4gICAgICBpZiAoaXNOdW1iZXIpIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcblxuICAgICAgdmFsdWUgPSB0aGlzLnJlbW92ZVByZWZpeEFuZFN1ZmZpeChpc051bWJlciA/IHZhbHVlIDogdGhpcy5nZXRGbG9hdFN0cmluZyh2YWx1ZSwgcHJvcHMpLCBwcm9wcyk7XG5cbiAgICAgIC8vcm91bmQgb2ZmIHZhbHVlXG4gICAgICBpZiAodHlwZW9mIGRlY2ltYWxQcmVjaXNpb24gPT09ICdudW1iZXInKSB2YWx1ZSA9IHJvdW5kVG9QcmVjaXNpb24odmFsdWUsIGRlY2ltYWxQcmVjaXNpb24pO1xuXG4gICAgICAvL2NvcnJlY3QgZGVjaW1hbCBzZXBhcmF0b3JcbiAgICAgIGlmIChkZWNpbWFsU2VwYXJhdG9yKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnLicsIGRlY2ltYWxTZXBhcmF0b3IpO1xuICAgICAgfVxuXG4gICAgICAvL3Rocm93IGVycm9yIGlmIHZhbHVlIGhhcyB0d28gZGVjaW1hbCBzZXBlcmF0b3JzXG4gICAgICBpZiAodmFsdWUuc3BsaXQoZGVjaW1hbFNlcGFyYXRvcikubGVuZ3RoID4gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcbiAgICAgICAgICBXcm9uZyBpbnB1dCBmb3IgdmFsdWUgcHJvcHMuXFxuXFxuICAgICAgICAgIE1vcmUgdGhhbiBvbmUgZGVjaW1hbFNlcGFyYXRvciBmb3VuZFxcbiAgICAgICAnKTtcbiAgICAgIH1cblxuICAgICAgLy9pZiBkZWNpbWFsUHJlY2lzaW9uIGlzIDAgcmVtb3ZlIGRlY2ltYWxOdW1iZXJzXG4gICAgICBpZiAoZGVjaW1hbFByZWNpc2lvbiA9PT0gMCkgcmV0dXJuIHZhbHVlLnNwbGl0KGRlY2ltYWxTZXBhcmF0b3IpWzBdO1xuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlUHJlZml4QW5kU3VmZml4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlUHJlZml4QW5kU3VmZml4KHZhbCwgcHJvcHMpIHtcbiAgICAgIHZhciBmb3JtYXQgPSBwcm9wcy5mb3JtYXQsXG4gICAgICAgICAgcHJlZml4ID0gcHJvcHMucHJlZml4LFxuICAgICAgICAgIHN1ZmZpeCA9IHByb3BzLnN1ZmZpeDtcblxuICAgICAgLy9yZW1vdmUgcHJlZml4IGFuZCBzdWZmaXhcblxuICAgICAgaWYgKCFmb3JtYXQgJiYgdmFsKSB7XG4gICAgICAgIHZhciBpc05lZ2F0aXZlID0gdmFsWzBdID09PSAnLSc7XG5cbiAgICAgICAgLy9yZW1vdmUgbmVnYXRpb24gc2lnblxuICAgICAgICBpZiAoaXNOZWdhdGl2ZSkgdmFsID0gdmFsLnN1YnN0cmluZygxLCB2YWwubGVuZ3RoKTtcblxuICAgICAgICAvL3JlbW92ZSBwcmVmaXhcbiAgICAgICAgdmFsID0gcHJlZml4ICYmIHZhbC5pbmRleE9mKHByZWZpeCkgPT09IDAgPyB2YWwuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgsIHZhbC5sZW5ndGgpIDogdmFsO1xuXG4gICAgICAgIC8vcmVtb3ZlIHN1ZmZpeFxuICAgICAgICB2YXIgc3VmZml4TGFzdEluZGV4ID0gdmFsLmxhc3RJbmRleE9mKHN1ZmZpeCk7XG4gICAgICAgIHZhbCA9IHN1ZmZpeCAmJiBzdWZmaXhMYXN0SW5kZXggIT09IC0xICYmIHN1ZmZpeExhc3RJbmRleCA9PT0gdmFsLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGggPyB2YWwuc3Vic3RyaW5nKDAsIHN1ZmZpeExhc3RJbmRleCkgOiB2YWw7XG5cbiAgICAgICAgLy9hZGQgbmVnYXRpb24gc2lnbiBiYWNrXG4gICAgICAgIGlmIChpc05lZ2F0aXZlKSB2YWwgPSAnLScgKyB2YWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2VwYXJhdG9ycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlcGFyYXRvcnMocHJvcHMpIHtcbiAgICAgIHByb3BzID0gcHJvcHMgfHwgdGhpcy5wcm9wcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgICAgIGRlY2ltYWxTZXBhcmF0b3IgPSBfcHJvcHMuZGVjaW1hbFNlcGFyYXRvcjtcbiAgICAgIHZhciBfcHJvcHMyID0gcHJvcHMsXG4gICAgICAgICAgdGhvdXNhbmRTZXBhcmF0b3IgPSBfcHJvcHMyLnRob3VzYW5kU2VwYXJhdG9yO1xuXG5cbiAgICAgIGlmICh0aG91c2FuZFNlcGFyYXRvciA9PT0gdHJ1ZSkge1xuICAgICAgICB0aG91c2FuZFNlcGFyYXRvciA9ICcsJztcbiAgICAgIH1cblxuICAgICAgaWYgKGRlY2ltYWxTZXBhcmF0b3IgPT09IHRob3VzYW5kU2VwYXJhdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXFxuICAgICAgICAgIERlY2ltYWwgc2VwYXJhdG9yIGNhblxcJ3QgYmUgc2FtZSBhcyB0aG91c2FuZCBzZXBhcmF0b3IuXFxuXFxuICAgICAgICAgIHRob3VzYW5kU2VwYXJhdG9yOiAnICsgdGhvdXNhbmRTZXBhcmF0b3IgKyAnICh0aG91c2FuZFNlcGFyYXRvciA9IHt0cnVlfSBpcyBzYW1lIGFzIHRob3VzYW5kU2VwYXJhdG9yID0gXCIsXCIpXFxuICAgICAgICAgIGRlY2ltYWxTZXBhcmF0b3I6ICcgKyBkZWNpbWFsU2VwYXJhdG9yICsgJyAoZGVmYXVsdCB2YWx1ZSBmb3IgZGVjaW1hbFNlcGFyYXRvciBpcyAuKVxcbiAgICAgICAnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVjaW1hbFNlcGFyYXRvcjogZGVjaW1hbFNlcGFyYXRvcixcbiAgICAgICAgdGhvdXNhbmRTZXBhcmF0b3I6IHRob3VzYW5kU2VwYXJhdG9yXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE51bWJlclJlZ2V4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TnVtYmVyUmVnZXgoZywgaWdub3JlRGVjaW1hbFNlcGFyYXRvcikge1xuICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGZvcm1hdCA9IF9wcm9wczMuZm9ybWF0LFxuICAgICAgICAgIGRlY2ltYWxQcmVjaXNpb24gPSBfcHJvcHMzLmRlY2ltYWxQcmVjaXNpb247XG5cbiAgICAgIHZhciBfZ2V0U2VwYXJhdG9yczMgPSB0aGlzLmdldFNlcGFyYXRvcnMoKSxcbiAgICAgICAgICBkZWNpbWFsU2VwYXJhdG9yID0gX2dldFNlcGFyYXRvcnMzLmRlY2ltYWxTZXBhcmF0b3I7XG5cbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdcXFxcZCcgKyAoZGVjaW1hbFNlcGFyYXRvciAmJiBkZWNpbWFsUHJlY2lzaW9uICE9PSAwICYmICFpZ25vcmVEZWNpbWFsU2VwYXJhdG9yICYmICFmb3JtYXQgPyAnfCcgKyBlc2NhcGVSZWdFeHAoZGVjaW1hbFNlcGFyYXRvcikgOiAnJyksIGcgPyAnZycgOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldENhcmV0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDYXJldFBvc2l0aW9uKGVsLCBjYXJldFBvcykge1xuICAgICAgZWwudmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgIC8vIF4gdGhpcyBpcyB1c2VkIHRvIG5vdCBvbmx5IGdldCBcImZvY3VzXCIsIGJ1dFxuICAgICAgLy8gdG8gbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgaXQgZXZlcnl0aGluZyAtc2VsZWN0ZWQtXG4gICAgICAvLyAoaXQgY2F1c2VzIGFuIGlzc3VlIGluIGNocm9tZSwgYW5kIGhhdmluZyBpdCBkb2Vzbid0IGh1cnQgYW55IG90aGVyIGJyb3dzZXIpXG4gICAgICBpZiAoZWwgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGVsLmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgIHZhciByYW5nZSA9IGVsLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgIHJhbmdlLm1vdmUoJ2NoYXJhY3RlcicsIGNhcmV0UG9zKTtcbiAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyAoZWwuc2VsZWN0aW9uU3RhcnQgPT09IDAgYWRkZWQgZm9yIEZpcmVmb3ggYnVnKVxuICAgICAgICBpZiAoZWwuc2VsZWN0aW9uU3RhcnQgfHwgZWwuc2VsZWN0aW9uU3RhcnQgPT09IDApIHtcbiAgICAgICAgICBlbC5mb2N1cygpO1xuICAgICAgICAgIGVsLnNldFNlbGVjdGlvblJhbmdlKGNhcmV0UG9zLCBjYXJldFBvcyk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmYWlsIGNpdHksIGZvcnR1bmF0ZWx5IHRoaXMgbmV2ZXIgaGFwcGVucyAoYXMgZmFyIGFzIEkndmUgdGVzdGVkKSA6KVxuICAgICAgICBlbC5mb2N1cygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UGF0Y2hlZENhcmV0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQYXRjaGVkQ2FyZXRQb3NpdGlvbihlbCwgY2FyZXRQb3MsIGN1cnJlbnRWYWx1ZSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIC8qXG4gICAgICBzZXR0aW5nIGNhcmV0IHBvc2l0aW9uIHdpdGhpbiB0aW1lb3V0IG9mIDBtcyBpcyByZXF1aXJlZCBmb3IgbW9iaWxlIGNocm9tZSxcbiAgICAgIG90aGVyd2lzZSBicm93c2VyIHJlc2V0cyB0aGUgY2FyZXQgcG9zaXRpb24gYWZ0ZXIgd2Ugc2V0IGl0XG4gICAgICBXZSBhcmUgYWxzbyBzZXR0aW5nIGl0IHdpdGhvdXQgdGltZW91dCBzbyB0aGF0IGluIG5vcm1hbCBicm93c2VyIHdlIGRvbid0IHNlZSB0aGUgZmxpY2tlcmluZ1xuICAgICAgKi9cbiAgICAgIHRoaXMuc2V0Q2FyZXRQb3NpdGlvbihlbCwgY2FyZXRQb3MpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChlbC52YWx1ZSA9PT0gY3VycmVudFZhbHVlKSBfdGhpczIuc2V0Q2FyZXRQb3NpdGlvbihlbCwgY2FyZXRQb3MpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgLyogVGhpcyBrZWVwcyB0aGUgY2FyZXQgd2l0aGluIHR5cGluZyBhcmVhIHNvIHBlb3BsZSBjYW4ndCB0eXBlIGluIGJldHdlZW4gcHJlZml4IG9yIHN1ZmZpeCAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb3JyZWN0Q2FyZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvcnJlY3RDYXJldFBvc2l0aW9uKHZhbHVlLCBjYXJldFBvcykge1xuICAgICAgdmFyIF9wcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeCA9IF9wcm9wczQucHJlZml4LFxuICAgICAgICAgIHN1ZmZpeCA9IF9wcm9wczQuc3VmZml4O1xuXG4gICAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoY2FyZXRQb3MsIHByZWZpeC5sZW5ndGgpLCB2YWx1ZS5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRXaXRoUGF0dGVybicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdFdpdGhQYXR0ZXJuKHN0cikge1xuICAgICAgdmFyIF9wcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGZvcm1hdCA9IF9wcm9wczUuZm9ybWF0LFxuICAgICAgICAgIG1hc2sgPSBfcHJvcHM1Lm1hc2s7XG5cbiAgICAgIGlmICghZm9ybWF0KSByZXR1cm4gc3RyO1xuICAgICAgdmFyIGhhc2hDb3VudCA9IGZvcm1hdC5zcGxpdCgnIycpLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgaGFzaElkeCA9IDA7XG4gICAgICB2YXIgZnJtdGRTdHIgPSBmb3JtYXQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsbiA9IHN0ci5sZW5ndGg7IGkgPCBsbjsgaSsrKSB7XG4gICAgICAgIGlmIChpIDwgaGFzaENvdW50KSB7XG4gICAgICAgICAgaGFzaElkeCA9IGZybXRkU3RyLmluZGV4T2YoJyMnKTtcbiAgICAgICAgICBmcm10ZFN0ciA9IGZybXRkU3RyLnJlcGxhY2UoJyMnLCBzdHJbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0SWR4ID0gZnJtdGRTdHIubGFzdEluZGV4T2YoJyMnKTtcblxuICAgICAgaWYgKG1hc2spIHtcbiAgICAgICAgcmV0dXJuIGZybXRkU3RyLnJlcGxhY2UoLyMvZywgbWFzayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnJtdGRTdHIuc3Vic3RyaW5nKDAsIGhhc2hJZHggKyAxKSArIChsYXN0SWR4ICE9PSAtMSA/IGZybXRkU3RyLnN1YnN0cmluZyhsYXN0SWR4ICsgMSwgZnJtdGRTdHIubGVuZ3RoKSA6ICcnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdmb3JtYXRJbnB1dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdElucHV0KHZhbCkge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICByZW1vdmVQcmVmaXhBbmRTdWZmaXggPSB0aGlzLnJlbW92ZVByZWZpeEFuZFN1ZmZpeDtcbiAgICAgIHZhciBwcmVmaXggPSBwcm9wcy5wcmVmaXgsXG4gICAgICAgICAgc3VmZml4ID0gcHJvcHMuc3VmZml4LFxuICAgICAgICAgIG1hc2sgPSBwcm9wcy5tYXNrLFxuICAgICAgICAgIGZvcm1hdCA9IHByb3BzLmZvcm1hdCxcbiAgICAgICAgICBhbGxvd05lZ2F0aXZlID0gcHJvcHMuYWxsb3dOZWdhdGl2ZSxcbiAgICAgICAgICBkZWNpbWFsUHJlY2lzaW9uID0gcHJvcHMuZGVjaW1hbFByZWNpc2lvbjtcblxuICAgICAgdmFyIF9nZXRTZXBhcmF0b3JzNCA9IHRoaXMuZ2V0U2VwYXJhdG9ycygpLFxuICAgICAgICAgIHRob3VzYW5kU2VwYXJhdG9yID0gX2dldFNlcGFyYXRvcnM0LnRob3VzYW5kU2VwYXJhdG9yLFxuICAgICAgICAgIGRlY2ltYWxTZXBhcmF0b3IgPSBfZ2V0U2VwYXJhdG9yczQuZGVjaW1hbFNlcGFyYXRvcjtcblxuICAgICAgdmFyIG1hc2tQYXR0ZXJuID0gZm9ybWF0ICYmIHR5cGVvZiBmb3JtYXQgPT0gJ3N0cmluZycgJiYgISFtYXNrO1xuICAgICAgdmFyIG51bVJlZ2V4ID0gdGhpcy5nZXROdW1iZXJSZWdleCh0cnVlKTtcbiAgICAgIHZhciBoYXNOZWdhdGl2ZSA9IHZvaWQgMCxcbiAgICAgICAgICByZW1vdmVOZWdhdGl2ZSA9IHZvaWQgMDtcblxuICAgICAgLy9jaGFuZ2UgdmFsIHRvIHN0cmluZyBpZiBpdHMgbnVtYmVyXG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHZhbCA9IHZhbCArICcnO1xuXG4gICAgICB2YXIgbmVnYXRpdmVSZWdleCA9IG5ldyBSZWdFeHAoJygtKScpO1xuICAgICAgdmFyIGRvdWJsZU5lZ2F0aXZlUmVnZXggPSBuZXcgUmVnRXhwKCcoLSkoLikqKC0pJyk7XG5cbiAgICAgIC8vY2hlY2sgaWYgaXQgaGFzIG5lZ2F0aXZlIG51bWJlcnNcbiAgICAgIGlmIChhbGxvd05lZ2F0aXZlICYmICFmb3JtYXQpIHtcbiAgICAgICAgLy8gQ2hlY2sgbnVtYmVyIGhhcyAnLScgdmFsdWVcbiAgICAgICAgaGFzTmVnYXRpdmUgPSBuZWdhdGl2ZVJlZ2V4LnRlc3QodmFsKTtcbiAgICAgICAgLy8gQ2hlY2sgbnVtYmVyIGhhcyAyIG9yIG1vcmUgJy0nIHZhbHVlc1xuICAgICAgICByZW1vdmVOZWdhdGl2ZSA9IGRvdWJsZU5lZ2F0aXZlUmVnZXgudGVzdCh2YWwpO1xuICAgICAgfVxuXG4gICAgICAvL3JlbW92ZSBwcmVmaXggYW5kIHN1ZmZpeFxuICAgICAgdmFsID0gcmVtb3ZlUHJlZml4QW5kU3VmZml4KHZhbCwgcHJvcHMpO1xuXG4gICAgICB2YXIgdmFsTWF0Y2ggPSB2YWwgJiYgdmFsLm1hdGNoKG51bVJlZ2V4KTtcblxuICAgICAgaWYgKCF2YWxNYXRjaCAmJiByZW1vdmVOZWdhdGl2ZSkge1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogJycsIGZvcm1hdHRlZFZhbHVlOiAnJyB9O1xuICAgICAgfSBlbHNlIGlmICghdmFsTWF0Y2ggJiYgaGFzTmVnYXRpdmUpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6ICcnLCBmb3JtYXR0ZWRWYWx1ZTogJy0nIH07XG4gICAgICB9IGVsc2UgaWYgKCF2YWxNYXRjaCkge1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogJycsIGZvcm1hdHRlZFZhbHVlOiBtYXNrUGF0dGVybiA/ICcnIDogJycgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIG51bSA9IHZhbC5tYXRjaChudW1SZWdleCkuam9pbignJyk7XG5cbiAgICAgIHZhciBmb3JtYXR0ZWRWYWx1ZSA9IG51bTtcblxuICAgICAgaWYgKGZvcm1hdCkge1xuICAgICAgICBpZiAodHlwZW9mIGZvcm1hdCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGZvcm1hdHRlZFZhbHVlID0gdGhpcy5mb3JtYXRXaXRoUGF0dGVybihmb3JtYXR0ZWRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZvcm1hdCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBmb3JtYXQoZm9ybWF0dGVkVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaGFzRGVjaW1hbFNlcGFyYXRvciA9IGZvcm1hdHRlZFZhbHVlLmluZGV4T2YoZGVjaW1hbFNlcGFyYXRvcikgIT09IC0xIHx8IGRlY2ltYWxQcmVjaXNpb247XG5cbiAgICAgICAgdmFyIHBhcnRzID0gZm9ybWF0dGVkVmFsdWUuc3BsaXQoZGVjaW1hbFNlcGFyYXRvcik7XG4gICAgICAgIHZhciBiZWZvcmVEZWNpbWFsID0gcGFydHNbMF07XG4gICAgICAgIHZhciBhZnRlckRlY2ltYWwgPSBwYXJ0c1sxXSB8fCAnJztcblxuICAgICAgICAvL3JlbW92ZSBsZWFkaW5nIHplcm9zIGZyb20gbnVtYmVyIGJlZm9yZSBkZWNpbWFsXG4gICAgICAgIGJlZm9yZURlY2ltYWwgPSByZW1vdmVMZWFkaW5nWmVybyhiZWZvcmVEZWNpbWFsKTtcblxuICAgICAgICAvL2FwcGx5IGRlY2ltYWwgcHJlY2lzaW9uIGlmIGl0cyBkZWZpbmVkXG4gICAgICAgIGlmIChkZWNpbWFsUHJlY2lzaW9uICE9PSB1bmRlZmluZWQpIGFmdGVyRGVjaW1hbCA9IGxpbWl0VG9QcmVjaXNpb24oYWZ0ZXJEZWNpbWFsLCBkZWNpbWFsUHJlY2lzaW9uKTtcblxuICAgICAgICBpZiAodGhvdXNhbmRTZXBhcmF0b3IpIHtcbiAgICAgICAgICBiZWZvcmVEZWNpbWFsID0gYmVmb3JlRGVjaW1hbC5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyg/IVxcZCkpL2csICckMScgKyB0aG91c2FuZFNlcGFyYXRvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2FkZCBwcmVmaXggYW5kIHN1ZmZpeFxuICAgICAgICBpZiAocHJlZml4KSBiZWZvcmVEZWNpbWFsID0gcHJlZml4ICsgYmVmb3JlRGVjaW1hbDtcbiAgICAgICAgaWYgKHN1ZmZpeCkgYWZ0ZXJEZWNpbWFsID0gYWZ0ZXJEZWNpbWFsICsgc3VmZml4O1xuXG4gICAgICAgIGlmIChoYXNOZWdhdGl2ZSAmJiAhcmVtb3ZlTmVnYXRpdmUpIGJlZm9yZURlY2ltYWwgPSAnLScgKyBiZWZvcmVEZWNpbWFsO1xuXG4gICAgICAgIGZvcm1hdHRlZFZhbHVlID0gYmVmb3JlRGVjaW1hbCArIChoYXNEZWNpbWFsU2VwYXJhdG9yICYmIGRlY2ltYWxTZXBhcmF0b3IgfHwgJycpICsgYWZ0ZXJEZWNpbWFsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogKGhhc05lZ2F0aXZlICYmICFyZW1vdmVOZWdhdGl2ZSA/ICctJyA6ICcnKSArIHJlbW92ZVByZWZpeEFuZFN1ZmZpeChmb3JtYXR0ZWRWYWx1ZSwgcHJvcHMpLm1hdGNoKG51bVJlZ2V4KS5qb2luKCcnKSxcbiAgICAgICAgZm9ybWF0dGVkVmFsdWU6IGZvcm1hdHRlZFZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldENhcmV0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYXJldFBvc2l0aW9uKGlucHV0VmFsdWUsIGZvcm1hdHRlZFZhbHVlLCBjYXJldFBvcykge1xuICAgICAgdmFyIG51bVJlZ2V4ID0gdGhpcy5nZXROdW1iZXJSZWdleCh0cnVlKTtcbiAgICAgIHZhciBpbnB1dE51bWJlciA9IChpbnB1dFZhbHVlLm1hdGNoKG51bVJlZ2V4KSB8fCBbXSkuam9pbignJyk7XG4gICAgICB2YXIgZm9ybWF0dGVkTnVtYmVyID0gKGZvcm1hdHRlZFZhbHVlLm1hdGNoKG51bVJlZ2V4KSB8fCBbXSkuam9pbignJyk7XG4gICAgICB2YXIgaiA9IHZvaWQgMCxcbiAgICAgICAgICBpID0gdm9pZCAwO1xuXG4gICAgICBqID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNhcmV0UG9zOyBpKyspIHtcbiAgICAgICAgdmFyIGN1cnJlbnRJbnB1dENoYXIgPSBpbnB1dFZhbHVlW2ldO1xuICAgICAgICB2YXIgY3VycmVudEZvcm1hdENoYXIgPSBmb3JtYXR0ZWRWYWx1ZVtqXSB8fCAnJztcbiAgICAgICAgLy9ubyBuZWVkIHRvIGluY3JlYXNlIG5ldyBjdXJzb3IgcG9zaXRpb24gaWYgZm9ybWF0dGVkIHZhbHVlIGRvZXMgbm90IGhhdmUgdGhvc2UgY2hhcmFjdGVyc1xuICAgICAgICAvL2Nhc2UgaW5wdXRWYWx1ZSA9IDFhMjMgYW5kIGZvcm1hdHRlZFZhbHVlID0gIDEyM1xuICAgICAgICBpZiAoIWN1cnJlbnRJbnB1dENoYXIubWF0Y2gobnVtUmVnZXgpICYmIGN1cnJlbnRJbnB1dENoYXIgIT09IGN1cnJlbnRGb3JtYXRDaGFyKSBjb250aW51ZTtcblxuICAgICAgICAvL1doZW4gd2UgYXJlIHN0cmlwaW5nIG91dCBsZWFkaW5nIHplcm9zIG1haW50YWluIHRoZSBuZXcgY3Vyc29yIHBvc2l0aW9uXG4gICAgICAgIC8vQ2FzZSBpbnB1dFZhbHVlID0gMDAwMjMgYW5kIGZvcm1hdHRlZFZhbHVlID0gMjM7XG4gICAgICAgIGlmIChjdXJyZW50SW5wdXRDaGFyID09PSAnMCcgJiYgY3VycmVudEZvcm1hdENoYXIubWF0Y2gobnVtUmVnZXgpICYmIGN1cnJlbnRGb3JtYXRDaGFyICE9PSAnMCcgJiYgaW5wdXROdW1iZXIubGVuZ3RoICE9PSBmb3JtYXR0ZWROdW1iZXIubGVuZ3RoKSBjb250aW51ZTtcblxuICAgICAgICAvL3dlIGFyZSBub3QgdXNpbmcgY3VycmVudEZvcm1hdENoYXIgYmVjYXVzZSBqIGNhbiBjaGFuZ2UgaGVyZVxuICAgICAgICB3aGlsZSAoY3VycmVudElucHV0Q2hhciAhPT0gZm9ybWF0dGVkVmFsdWVbal0gJiYgIShmb3JtYXR0ZWRWYWx1ZVtqXSB8fCAnJykubWF0Y2gobnVtUmVnZXgpICYmIGogPCBmb3JtYXR0ZWRWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1qKys7XG4gICAgICB9XG5cbiAgICAgIC8vY29ycmVjdCBjYXJldCBwb3NpdGlvbiBpZiBpdHMgb3V0c2l6ZSBvZiBlZGl0YWJsZSBhcmVhXG4gICAgICBqID0gdGhpcy5jb3JyZWN0Q2FyZXRQb3NpdGlvbihmb3JtYXR0ZWRWYWx1ZSwgaik7XG5cbiAgICAgIHJldHVybiBqO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uQ2hhbmdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge1xuICAgICAgZS5wZXJzaXN0KCk7XG4gICAgICB2YXIgZWwgPSBlLnRhcmdldDtcbiAgICAgIHZhciBpbnB1dFZhbHVlID0gZWwudmFsdWU7XG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBwcm9wcy5pc0FsbG93ZWQ7XG5cbiAgICAgIHZhciBsYXN0VmFsdWUgPSBzdGF0ZS52YWx1ZTtcblxuICAgICAgdmFyIF9mb3JtYXRJbnB1dDIgPSB0aGlzLmZvcm1hdElucHV0KGlucHV0VmFsdWUpLFxuICAgICAgICAgIGZvcm1hdHRlZFZhbHVlID0gX2Zvcm1hdElucHV0Mi5mb3JtYXR0ZWRWYWx1ZSxcbiAgICAgICAgICB2YWx1ZSA9IF9mb3JtYXRJbnB1dDIudmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWNvbnN0XG5cbiAgICAgIC8qTWF4IG9mIHNlbGVjdGlvblN0YXJ0IGFuZCBzZWxlY3Rpb25FbmQgaXMgdGFrZW4gZm9yIHRoZSBwYXRjaCBvZiBwaXhlbCBhbmQgb3RoZXIgbW9iaWxlIGRldmljZSBjYXJldCBidWcqL1xuXG5cbiAgICAgIHZhciBjdXJyZW50Q2FyZXRQb3NpdGlvbiA9IE1hdGgubWF4KGVsLnNlbGVjdGlvblN0YXJ0LCBlbC5zZWxlY3Rpb25FbmQpO1xuXG4gICAgICB2YXIgdmFsdWVPYmogPSB7XG4gICAgICAgIGZvcm1hdHRlZFZhbHVlOiBmb3JtYXR0ZWRWYWx1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBmbG9hdFZhbHVlOiB0aGlzLmdldEZsb2F0VmFsdWUodmFsdWUpXG4gICAgICB9O1xuXG4gICAgICBpZiAoIWlzQWxsb3dlZCh2YWx1ZU9iaikpIHtcbiAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vc2V0IHRoZSB2YWx1ZSBpbXBlcmF0aXZlbHksIHRoaXMgaXMgcmVxdWlyZWQgZm9yIElFIGZpeFxuICAgICAgZWwudmFsdWUgPSBmb3JtYXR0ZWRWYWx1ZTtcblxuICAgICAgLy9nZXQgdGhlIGNhcmV0IHBvc2l0aW9uXG4gICAgICB2YXIgY2FyZXRQb3MgPSB0aGlzLmdldENhcmV0UG9zaXRpb24oaW5wdXRWYWx1ZSwgZm9ybWF0dGVkVmFsdWUsIGN1cnJlbnRDYXJldFBvc2l0aW9uKTtcblxuICAgICAgLy9zZXQgY2FyZXQgcG9zaXRpb25cbiAgICAgIHRoaXMuc2V0UGF0Y2hlZENhcmV0UG9zaXRpb24oZWwsIGNhcmV0UG9zLCBmb3JtYXR0ZWRWYWx1ZSk7XG5cbiAgICAgIC8vY2hhbmdlIHRoZSBzdGF0ZVxuICAgICAgaWYgKGZvcm1hdHRlZFZhbHVlICE9PSBsYXN0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBmb3JtYXR0ZWRWYWx1ZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcHJvcHMub25DaGFuZ2UoZSwgdmFsdWVPYmopO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uS2V5RG93bicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICB2YXIgZWwgPSBlLnRhcmdldDtcbiAgICAgIHZhciBzZWxlY3Rpb25FbmQgPSBlbC5zZWxlY3Rpb25FbmQsXG4gICAgICAgICAgdmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgIHZhciBzZWxlY3Rpb25TdGFydCA9IGVsLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgdmFyIF9wcm9wczYgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRlY2ltYWxQcmVjaXNpb24gPSBfcHJvcHM2LmRlY2ltYWxQcmVjaXNpb24sXG4gICAgICAgICAgcHJlZml4ID0gX3Byb3BzNi5wcmVmaXgsXG4gICAgICAgICAgc3VmZml4ID0gX3Byb3BzNi5zdWZmaXg7XG4gICAgICB2YXIga2V5ID0gZS5rZXk7XG5cbiAgICAgIHZhciBudW1SZWdleCA9IHRoaXMuZ2V0TnVtYmVyUmVnZXgoZmFsc2UsIGRlY2ltYWxQcmVjaXNpb24gIT09IHVuZGVmaW5lZCk7XG4gICAgICB2YXIgbmVnYXRpdmVSZWdleCA9IG5ldyBSZWdFeHAoJy0nKTtcblxuICAgICAgLy9IYW5kbGUgYmFja3NwYWNlIGFuZCBkZWxldGUgYWdhaW5zdCBub24gbnVtZXJpY2FsL2RlY2ltYWwgY2hhcmFjdGVyc1xuICAgICAgaWYgKHNlbGVjdGlvblN0YXJ0ID09PSBzZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgdmFyIG5ld0NhcmV0UG9zaXRpb24gPSBzZWxlY3Rpb25TdGFydDtcblxuICAgICAgICBpZiAoa2V5ID09PSAnQXJyb3dMZWZ0JyB8fCBrZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xuICAgICAgICAgIHNlbGVjdGlvblN0YXJ0ICs9IGtleSA9PT0gJ0Fycm93TGVmdCcgPyAtMSA6ICsxO1xuICAgICAgICAgIG5ld0NhcmV0UG9zaXRpb24gPSB0aGlzLmNvcnJlY3RDYXJldFBvc2l0aW9uKHZhbHVlLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnRGVsZXRlJyAmJiAhbnVtUmVnZXgudGVzdCh2YWx1ZVtzZWxlY3Rpb25TdGFydF0pICYmICFuZWdhdGl2ZVJlZ2V4LnRlc3QodmFsdWVbc2VsZWN0aW9uU3RhcnRdKSkge1xuICAgICAgICAgIHdoaWxlICghbnVtUmVnZXgudGVzdCh2YWx1ZVtuZXdDYXJldFBvc2l0aW9uXSkgJiYgbmV3Q2FyZXRQb3NpdGlvbiA8IHZhbHVlLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5ld0NhcmV0UG9zaXRpb24rKztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQmFja3NwYWNlJyAmJiAhbnVtUmVnZXgudGVzdCh2YWx1ZVtzZWxlY3Rpb25TdGFydCAtIDFdKSAmJiAhbmVnYXRpdmVSZWdleC50ZXN0KHZhbHVlW3NlbGVjdGlvblN0YXJ0IC0gMV0pKSB7XG4gICAgICAgICAgd2hpbGUgKCFudW1SZWdleC50ZXN0KHZhbHVlW25ld0NhcmV0UG9zaXRpb24gLSAxXSkgJiYgbmV3Q2FyZXRQb3NpdGlvbiA+IHByZWZpeC5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5ld0NhcmV0UG9zaXRpb24tLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3Q2FyZXRQb3NpdGlvbiAhPT0gc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5zZXRQYXRjaGVkQ2FyZXRQb3NpdGlvbihlbCwgbmV3Q2FyZXRQb3NpdGlvbiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMub25LZXlEb3duKGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29uTW91c2VVcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTW91c2VVcChlKSB7XG4gICAgICB2YXIgZWwgPSBlLnRhcmdldDtcbiAgICAgIHZhciBzZWxlY3Rpb25TdGFydCA9IGVsLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgIHNlbGVjdGlvbkVuZCA9IGVsLnNlbGVjdGlvbkVuZCxcbiAgICAgICAgICB2YWx1ZSA9IGVsLnZhbHVlO1xuXG5cbiAgICAgIGlmIChzZWxlY3Rpb25TdGFydCA9PT0gc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgIHZhciBjYXJldFBvc3Rpb24gPSB0aGlzLmNvcnJlY3RDYXJldFBvc2l0aW9uKHZhbHVlLCBzZWxlY3Rpb25TdGFydCk7XG4gICAgICAgIGlmIChjYXJldFBvc3Rpb24gIT09IHNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgdGhpcy5zZXRQYXRjaGVkQ2FyZXRQb3NpdGlvbihlbCwgY2FyZXRQb3N0aW9uLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcy5vbk1vdXNlVXAoZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHByb3BzID0gb21pdCh0aGlzLnByb3BzLCBwcm9wVHlwZXMpO1xuXG4gICAgICB2YXIgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICB0eXBlOiB0aGlzLnByb3BzLnR5cGUsXG4gICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkNoYW5nZSxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLm9uTW91c2VVcFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuY3VzdG9tSW5wdXQpIHtcbiAgICAgICAgdmFyIEN1c3RvbUlucHV0ID0gdGhpcy5wcm9wcy5jdXN0b21JbnB1dDtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEN1c3RvbUlucHV0LCBpbnB1dFByb3BzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIGlucHV0UHJvcHMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOdW1iZXJGb3JtYXQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5OdW1iZXJGb3JtYXQucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuTnVtYmVyRm9ybWF0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXJGb3JtYXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1udW1iZXItZm9ybWF0L2xpYi9udW1iZXJfZm9ybWF0LmpzXG4vLyBtb2R1bGUgaWQgPSA1NTlcbi8vIG1vZHVsZSBjaHVua3MgPSA1IiwiaW1wb3J0IHQgZnJvbSAndGFjaHlvbnMtanMnO1xuaW1wb3J0IExpc3RJdGVtIGZyb20gJy4vTGlzdEl0ZW0nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIFRvdGFsc0hpc3Rvcnk6IHtcbiAgICAuLi50LmZsZXgsXG4gICAgLi4udC5mbGV4X2NvbHVtbixcbiAgICAuLi50Lmp1c3RpZnlfY2VudGVyLFxuICAgIC4uLnQuaXRlbXNfY2VudGVyLFxuICAgIGNvbG9yOiAnIzczOEQ5OScsXG4gICAgZmxleDogMSxcbiAgICBoZWlnaHQ6IDM0NSxcbiAgICB3aWR0aDogMTAwLFxuICAgIGJvcmRlclJpZ2h0OiAnMXB4ICNDQ0Mgc29saWQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNGN0Y3RjcnLFxuICB9LFxuICBUb3RhbHNIaXN0b3J5TGlzdDoge1xuICAgIC4uLnQuZmxleCxcbiAgICAuLi50LmZsZXhfY29sdW1uLFxuICAgIC4uLnQuanVzdGlmeV9zdGFydCxcbiAgICAuLi50Lml0ZW1zX3N0YXJ0LFxuICAgIC4uLnQub3ZlcmZsb3dfc2Nyb2xsLFxuICAgIGNvbG9yOiAnIzczOEQ5OScsXG4gICAgZmxleDogMSxcbiAgICBoZWlnaHQ6IDM0NSxcbiAgICB3aWR0aDogMTAwLFxuICAgIGJvcmRlclJpZ2h0OiAnMXB4ICNDQ0Mgc29saWQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNGN0Y3RjcnLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvdGFsc0hpc3RvcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBwcm9wVHlwZXM6IHtcbiAgICB2YWx1ZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgfVxuXG4gIHNob3dIaXN0b3J5ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnZhbHVlcy5tYXAoICggdmFsdWUsIGluZGV4ICkgPT4gKFxuICAgICAgPExpc3RJdGVtIHZhbHVlPXsgdmFsdWUgfSAvPlxuICAgICkgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIlRvdGFsc0hpc3RvcnlcIiBzdHlsZT17IHRoaXMucHJvcHMudmFsdWVzLmxlbmd0aCA9PSAwID8gIHN0eWxlcy5Ub3RhbHNIaXN0b3J5IDogc3R5bGVzLlRvdGFsc0hpc3RvcnlMaXN0IH0+eyB0aGlzLnByb3BzLnZhbHVlcy5sZW5ndGggPT09IDAgPyA8c3BhbiBjbGFzc05hbWU9XCJlbXB0eVwiPk5vIEhpc3Rvcnk8L3NwYW4+IDogdGhpcy5zaG93SGlzdG9yeSgpIH08L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb21wb25lbnRzL1RvdGFsc0hpc3RvcnkvaW5kZXguanMiLCJpbXBvcnQgdCBmcm9tICd0YWNoeW9ucy1qcyc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgTGlzdEl0ZW06IHtcbiAgICAuLi50LnBhMixcbiAgICAuLi50LnRyLFxuICAgIGJvcmRlckJvdHRvbTogJzFweCAjRUZFRkVGIHNvbGlkJyxcbiAgICB3aWR0aDogMTU1LFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0ICh7IHZhbHVlIH0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9XCJMaXN0SXRlbVwiIHN0eWxlPXsgc3R5bGVzLkxpc3RJdGVtIH0+eyB2YWx1ZSB9PC9kaXY+XG4pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb21wb25lbnRzL1RvdGFsc0hpc3RvcnkvTGlzdEl0ZW0uanMiLCJpbXBvcnQgQnV0dG9uIGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgdCBmcm9tICd0YWNoeW9ucy1qcyc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgS2V5Ym9hcmQ6IHtcbiAgICBmbGV4OiAxLjUsXG4gICAgLi4udC5wYTEsXG4gIH0sXG4gIEJ1dHRvblJvdzoge1xuICAgIC4uLnQuZmxleCxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEtleWJvYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBwcm9wVHlwZXM6IHtcbiAgICBudW1iZXJDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb3BlcmF0b3JDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJLZXlib2FyZFwiIHN0eWxlPXsgc3R5bGVzLktleWJvYXJkIH0+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJCdXR0b25Sb3dcIiBzdHlsZT17IHN0eWxlcy5CdXR0b25Sb3cgfT5cbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eyB0aGlzLnByb3BzLm51bWJlckNsaWNrIH0gZmxleD17IDEgfSBsYWJlbD1cIjdcIiAvPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17IHRoaXMucHJvcHMubnVtYmVyQ2xpY2sgfSBmbGV4PXsgMSB9IGxhYmVsPVwiOFwiIC8+XG4gICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsgdGhpcy5wcm9wcy5udW1iZXJDbGljayB9IGZsZXg9eyAxIH0gbGFiZWw9XCI5XCIgLz5cbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eyB0aGlzLnByb3BzLm9wZXJhdG9yQ2xpY2sgfSBvcGVyYXRvciBmbGV4PXsgMSB9IGxhYmVsPVwiw7dcIiAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkJ1dHRvblJvd1wiIHN0eWxlPXsgc3R5bGVzLkJ1dHRvblJvdyB9PlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17IHRoaXMucHJvcHMubnVtYmVyQ2xpY2sgfSBmbGV4PXsgMSB9IGxhYmVsPVwiNFwiIC8+XG4gICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsgdGhpcy5wcm9wcy5udW1iZXJDbGljayB9IGZsZXg9eyAxIH0gbGFiZWw9XCI1XCIgLz5cbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eyB0aGlzLnByb3BzLm51bWJlckNsaWNrIH0gZmxleD17IDEgfSBsYWJlbD1cIjZcIiAvPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17IHRoaXMucHJvcHMub3BlcmF0b3JDbGljayB9IG9wZXJhdG9yIGZsZXg9eyAxIH0gbGFiZWw9XCJ4XCIgLz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJCdXR0b25Sb3dcIiBzdHlsZT17IHN0eWxlcy5CdXR0b25Sb3cgfT5cbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eyB0aGlzLnByb3BzLm51bWJlckNsaWNrIH0gZmxleD17IDEgfSBsYWJlbD1cIjFcIiAvPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17IHRoaXMucHJvcHMubnVtYmVyQ2xpY2sgfSBmbGV4PXsgMSB9IGxhYmVsPVwiMlwiIC8+XG4gICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsgdGhpcy5wcm9wcy5udW1iZXJDbGljayB9IGZsZXg9eyAxIH0gbGFiZWw9XCIzXCIgLz5cbiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eyB0aGlzLnByb3BzLm9wZXJhdG9yQ2xpY2sgfSBvcGVyYXRvciBmbGV4PXsgMSB9IGxhYmVsPVwiK1wiIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQnV0dG9uUm93XCIgc3R5bGU9eyBzdHlsZXMuQnV0dG9uUm93IH0+XG4gICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsgdGhpcy5wcm9wcy5udW1iZXJDbGljayB9IGZsZXg9eyAzLjUgfSBsYWJlbD1cIjBcIiAvPlxuICAgICAgICAgIDxCdXR0b24gb25DbGljaz17IHRoaXMucHJvcHMub3BlcmF0b3JDbGljayB9IG9wZXJhdG9yIGZsZXg9eyAxIH0gbGFiZWw9XCItXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQnV0dG9uUm93XCIgc3R5bGU9eyBzdHlsZXMuQnV0dG9uUm93IH0+XG4gICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsgdGhpcy5wcm9wcy5vcGVyYXRvckNsaWNrIH0gb3BlcmF0b3IgZmxleD17IDQgfSBsYWJlbD1cIj1cIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvS2V5Ym9hcmQvaW5kZXguanMiLCJpbXBvcnQgdCBmcm9tICd0YWNoeW9ucy1qcyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgZmxleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvcGVyYXRvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIH1cblxuICBvbkNsaWNrID0gKCBlICkgPT4ge1xuICAgIHRoaXMucHJvcHMub25DbGljayggZSwgdGhpcy5wcm9wcyApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHN0eWxlcyA9IHtcbiAgICAgIEJ1dHRvbjoge1xuICAgICAgICAuLi50LmRpYixcbiAgICAgICAgLi4udC5icjIsXG4gICAgICAgIC4uLnQucHQyLFxuICAgICAgICAuLi50LnBiMixcbiAgICAgICAgLi4udC5mMSxcbiAgICAgICAgLi4udC5tYTEsXG4gICAgICAgIC4uLnQub3V0bGluZV8wLFxuICAgICAgICB3aWR0aDogYCR7IDI1ICogdGhpcy5wcm9wcy5mbGV4IH0lYCxcbiAgICAgICAgJ2N1cnNvcic6ICdwb2ludGVyJyxcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMub3BlcmF0b3IgPyAnI0ZGRicgOiAnIzczOEQ5OScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5wcm9wcy5vcGVyYXRvciA/ICcjRjVBNjIzJyA6ICcjRkZGJyxcbiAgICAgICAgYm9yZGVyOiB0aGlzLnByb3BzLm9wZXJhdG9yID8gJ3RyYW5zcGFyZW50JyA6ICcxcHggI0E1QkVDOSBzb2xpZCcsXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybihcbiAgICAgIDxidXR0b24gb25DbGljaz17IHRoaXMub25DbGljayB9IGNsYXNzTmFtZT1cIkJ1dHRvblwiIHN0eWxlPXsgc3R5bGVzLkJ1dHRvbiB9PnsgdGhpcy5wcm9wcy5sYWJlbCB9PC9idXR0b24+XG4gICAgKTtcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tcG9uZW50cy9CdXR0b24vaW5kZXguanMiXSwibWFwcGluZ3MiOiI7QTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzdEQTtBQUNBOzs7Ozs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ3pGQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0hBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDalZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDdlhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDekJBOzs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNKQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDbEJBOzs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3RCQTs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDSEE7Ozs7Ozs7QUNBQTs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2hCQTs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2hJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUN2TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUM3QkE7QUFDQTtBQUNBOzs7Ozs7O0FDRkE7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNQQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDM0lBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQzNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy9mQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDcEJBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ0pBO0FBQ0E7Ozs7Ozs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ3JCQTs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3RKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNiQTs7Ozs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1RBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDSEE7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNwQkE7Ozs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNyQ0E7Ozs7OztBQ0FBO0FBQ0E7QUFDQTs7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDakNBOzs7Ozs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0pBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUN0QkE7QUFDQTs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDakNBO0FBQ0E7Ozs7Ozs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNSQTs7Ozs7O0FDQUE7QUFDQTtBQUNBOzs7Ozs7O0FDRkE7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDek9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDbEJBOzs7Ozs7O0FDQUE7Ozs7Ozs7QUNBQTs7Ozs7O0FDQUE7QUFDQTs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTs7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDeEJBOzs7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDSkE7QUFDQTtBQUNBOzs7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUMzTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNyMkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQy90QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUN2UkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUNiQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ0hBO0FBQ0E7Ozs7Ozs7QUNEQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ2hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM1SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlJQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDaEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDM0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3h4UUE7QUFDQTs7O0FBRUE7QUFDQTs7Ozs7OztBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBO0FBQUE7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFGQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSEE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7Ozs7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUVBO0FBSkE7O0FBU0E7QUFKQTtBQVRBO0FBQ0E7QUFZQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQUE7O0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBRUE7QUFGQTtBQUVBO0FBTkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pCQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7Ozs7OztBQUNBO0FBRUE7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUxBO0FBTUE7QUFaQTtBQUNBO0FBZUE7QUFFQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBTkE7QUFRQTs7Ozs7QUFvRkE7QUFDQTtBQUFBO0FBRUE7QUFGQTtBQUFBO0FBSUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFQQTtBQUNBO0FBTUE7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUpBO0FBQ0E7QUFJQTtBQUNBO0FBRkE7QUFPQTtBQVBBO0FBQ0E7Ozs7O0FBakhBO0FBQ0E7Ozs7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRkE7QUFLQTtBQUNBO0FBQUE7QUFHQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFKQTtBQUtBO0FBUkE7QUFTQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBTkE7QUFDQTtBQU1BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFOQTtBQUNBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQU5BO0FBQ0E7QUFNQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBTkE7QUFDQTtBQU9BOztBQUNBOzs7O0FBOUZBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZCQTtBQUNBOzs7QUFBQTtBQUNBOzs7Ozs7OztBQUNBOzs7Ozs7Ozs7OztBQVVBO0FBQ0E7QUFEQTtBQUVBO0FBS0E7QUFDQTtBQUlBO0FBTkE7QUFMQTtBQUNBO0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUZBO0FBQUE7Ozs7O0FBdkJBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUEwQkE7QUFDQTtBQUFBOzs7Ozs7Ozs7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JtQkE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7Ozs7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBUEE7QUFRQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUxBO0FBbEJBO0FBQ0E7QUEwQkE7Ozs7Ozs7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTs7Ozs7O0FBR0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBYkE7QUFDQTtBQURBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvQkE7QUFDQTs7Ozs7Ozs7QUFDQTtBQUVBO0FBR0E7QUFJQTtBQUxBO0FBSEE7QUFDQTtBQU9BO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDWEE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7Ozs7QUFDQTs7QUFFQTtBQUFBO0FBSUE7QUFDQTtBQUFBO0FBTkE7QUFDQTtBQVNBOzs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFBQTtBQUVBO0FBRkE7QUFBQTtBQUVBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFHQTtBQUhBO0FBR0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBR0E7QUFIQTtBQUdBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUdBO0FBSEE7QUFHQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUVBO0FBRkE7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFJQTtBQUpBOzs7Ozs7QUFyQ0E7QUFDQTtBQURBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2RBO0FBQ0E7Ozs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBT0E7QUFDQTs7Ozs7O0FBSUE7QUFBQTtBQUVBO0FBT0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUpBO0FBUkE7QUFDQTtBQWdCQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQTlCQTtBQUNBO0FBREE7Ozs7OztBIiwic291cmNlUm9vdCI6IiJ9
            return { page: comp.default }
          })
        